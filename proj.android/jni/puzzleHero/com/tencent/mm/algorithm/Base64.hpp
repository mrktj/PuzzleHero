/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: com.tencent.mm.algorithm.Base64
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_COM_TENCENT_MM_ALGORITHM_BASE64_HPP_DECL
#define J2CPP_COM_TENCENT_MM_ALGORITHM_BASE64_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace com { namespace tencent { namespace mm { namespace algorithm {

	class Base64;
	class Base64
		: public object<Base64>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		explicit Base64(jobject jobj)
		: object<Base64>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		Base64();
		static local_ref< array<jchar,1> > encodeToChar(local_ref< array<jbyte,1> >  const&, jboolean);
		static local_ref< array<jbyte,1> > decode(local_ref< array<jchar,1> >  const&);
		static local_ref< array<jbyte,1> > decodeFast(local_ref< array<jchar,1> >  const&);
		static local_ref< array<jbyte,1> > encodeToByte(local_ref< array<jbyte,1> >  const&, jboolean);
		static local_ref< array<jbyte,1> > decode(local_ref< array<jbyte,1> >  const&);
		static local_ref< array<jbyte,1> > decodeFast(local_ref< array<jbyte,1> >  const&);
		static local_ref< java::lang::String > encodeToString(local_ref< array<jbyte,1> >  const&, jboolean);
		static local_ref< array<jbyte,1> > decode(local_ref< java::lang::String >  const&);
		static local_ref< array<jbyte,1> > decodeFast(local_ref< java::lang::String >  const&);

	}; //class Base64

} //namespace algorithm
} //namespace mm
} //namespace tencent
} //namespace com

} //namespace j2cpp

#endif //J2CPP_COM_TENCENT_MM_ALGORITHM_BASE64_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_COM_TENCENT_MM_ALGORITHM_BASE64_HPP_IMPL
#define J2CPP_COM_TENCENT_MM_ALGORITHM_BASE64_HPP_IMPL

namespace j2cpp {



com::tencent::mm::algorithm::Base64::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


com::tencent::mm::algorithm::Base64::Base64()
: object<com::tencent::mm::algorithm::Base64>(
	call_new_object<
		com::tencent::mm::algorithm::Base64::J2CPP_CLASS_NAME,
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_NAME(0),
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


local_ref< array<jchar,1> > com::tencent::mm::algorithm::Base64::encodeToChar(local_ref< array<jbyte,1> > const &a0, jboolean a1)
{
	return call_static_method<
		com::tencent::mm::algorithm::Base64::J2CPP_CLASS_NAME,
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_NAME(1),
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< array<jchar,1> >
	>(a0, a1);
}

local_ref< array<jbyte,1> > com::tencent::mm::algorithm::Base64::decode(local_ref< array<jchar,1> > const &a0)
{
	return call_static_method<
		com::tencent::mm::algorithm::Base64::J2CPP_CLASS_NAME,
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_NAME(2),
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< array<jbyte,1> >
	>(a0);
}

local_ref< array<jbyte,1> > com::tencent::mm::algorithm::Base64::decodeFast(local_ref< array<jchar,1> > const &a0)
{
	return call_static_method<
		com::tencent::mm::algorithm::Base64::J2CPP_CLASS_NAME,
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_NAME(3),
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< array<jbyte,1> >
	>(a0);
}

local_ref< array<jbyte,1> > com::tencent::mm::algorithm::Base64::encodeToByte(local_ref< array<jbyte,1> > const &a0, jboolean a1)
{
	return call_static_method<
		com::tencent::mm::algorithm::Base64::J2CPP_CLASS_NAME,
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_NAME(4),
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< array<jbyte,1> >
	>(a0, a1);
}

local_ref< array<jbyte,1> > com::tencent::mm::algorithm::Base64::decode(local_ref< array<jbyte,1> > const &a0)
{
	return call_static_method<
		com::tencent::mm::algorithm::Base64::J2CPP_CLASS_NAME,
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_NAME(5),
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< array<jbyte,1> >
	>(a0);
}

local_ref< array<jbyte,1> > com::tencent::mm::algorithm::Base64::decodeFast(local_ref< array<jbyte,1> > const &a0)
{
	return call_static_method<
		com::tencent::mm::algorithm::Base64::J2CPP_CLASS_NAME,
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_NAME(6),
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< array<jbyte,1> >
	>(a0);
}

local_ref< java::lang::String > com::tencent::mm::algorithm::Base64::encodeToString(local_ref< array<jbyte,1> > const &a0, jboolean a1)
{
	return call_static_method<
		com::tencent::mm::algorithm::Base64::J2CPP_CLASS_NAME,
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_NAME(7),
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::lang::String >
	>(a0, a1);
}

local_ref< array<jbyte,1> > com::tencent::mm::algorithm::Base64::decode(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		com::tencent::mm::algorithm::Base64::J2CPP_CLASS_NAME,
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_NAME(8),
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< array<jbyte,1> >
	>(a0);
}

local_ref< array<jbyte,1> > com::tencent::mm::algorithm::Base64::decodeFast(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		com::tencent::mm::algorithm::Base64::J2CPP_CLASS_NAME,
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_NAME(9),
		com::tencent::mm::algorithm::Base64::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< array<jbyte,1> >
	>(a0);
}




J2CPP_DEFINE_CLASS(com::tencent::mm::algorithm::Base64,"com/tencent/mm/algorithm/Base64")
J2CPP_DEFINE_METHOD(com::tencent::mm::algorithm::Base64,0,"<init>","()V")
J2CPP_DEFINE_METHOD(com::tencent::mm::algorithm::Base64,1,"encodeToChar","([BZ)[C")
J2CPP_DEFINE_METHOD(com::tencent::mm::algorithm::Base64,2,"decode","([C)[B")
J2CPP_DEFINE_METHOD(com::tencent::mm::algorithm::Base64,3,"decodeFast","([C)[B")
J2CPP_DEFINE_METHOD(com::tencent::mm::algorithm::Base64,4,"encodeToByte","([BZ)[B")
J2CPP_DEFINE_METHOD(com::tencent::mm::algorithm::Base64,5,"decode","([B)[B")
J2CPP_DEFINE_METHOD(com::tencent::mm::algorithm::Base64,6,"decodeFast","([B)[B")
J2CPP_DEFINE_METHOD(com::tencent::mm::algorithm::Base64,7,"encodeToString","([BZ)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(com::tencent::mm::algorithm::Base64,8,"decode","(Ljava/lang/String;)[B")
J2CPP_DEFINE_METHOD(com::tencent::mm::algorithm::Base64,9,"decodeFast","(Ljava/lang/String;)[B")
J2CPP_DEFINE_METHOD(com::tencent::mm::algorithm::Base64,10,"<clinit>","()V")
J2CPP_DEFINE_FIELD(com::tencent::mm::algorithm::Base64,0,"a","[C")
J2CPP_DEFINE_FIELD(com::tencent::mm::algorithm::Base64,1,"b","[I")

} //namespace j2cpp

#endif //J2CPP_COM_TENCENT_MM_ALGORITHM_BASE64_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

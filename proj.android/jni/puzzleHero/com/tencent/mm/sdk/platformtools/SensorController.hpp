/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: com.tencent.mm.sdk.platformtools.SensorController
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_SENSORCONTROLLER_HPP_DECL
#define J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_SENSORCONTROLLER_HPP_DECL


namespace j2cpp { namespace android { namespace hardware { class Sensor; } } }
namespace j2cpp { namespace android { namespace hardware { class SensorEventListener; } } }
namespace j2cpp { namespace android { namespace hardware { class SensorEvent; } } }
namespace j2cpp { namespace android { namespace content { class Intent; } } }
namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace android { namespace content { class BroadcastReceiver; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace com { namespace tencent { namespace mm { namespace sdk { namespace platformtools { namespace SensorController_ { class SensorEventCallBack; } } } } } } }


#include <android/content/BroadcastReceiver.hpp>
#include <android/content/Context.hpp>
#include <android/content/Intent.hpp>
#include <android/hardware/Sensor.hpp>
#include <android/hardware/SensorEvent.hpp>
#include <android/hardware/SensorEventListener.hpp>
#include <com/tencent/mm/sdk/platformtools/SensorController.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace com { namespace tencent { namespace mm { namespace sdk { namespace platformtools {

	class SensorController;
	namespace SensorController_ {

		class SensorEventCallBack;
		class SensorEventCallBack
			: public object<SensorEventCallBack>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			explicit SensorEventCallBack(jobject jobj)
			: object<SensorEventCallBack>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			void onSensorEvent(jboolean);
		}; //class SensorEventCallBack

	} //namespace SensorController_

	class SensorController
		: public object<SensorController>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)

		typedef SensorController_::SensorEventCallBack SensorEventCallBack;

		explicit SensorController(jobject jobj)
		: object<SensorController>(jobj)
		{
		}

		operator local_ref<android::hardware::SensorEventListener>() const;
		operator local_ref<android::content::BroadcastReceiver>() const;
		operator local_ref<java::lang::Object>() const;


		SensorController(local_ref< android::content::Context > const&);
		void setSensorCallBack(local_ref< com::tencent::mm::sdk::platformtools::SensorController_::SensorEventCallBack >  const&);
		void removeSensorCallBack();
		void onAccuracyChanged(local_ref< android::hardware::Sensor >  const&, jint);
		jboolean isSensorEnable();
		void onSensorChanged(local_ref< android::hardware::SensorEvent >  const&);
		void onReceive(local_ref< android::content::Context >  const&, local_ref< android::content::Intent >  const&);

	}; //class SensorController

} //namespace platformtools
} //namespace sdk
} //namespace mm
} //namespace tencent
} //namespace com

} //namespace j2cpp

#endif //J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_SENSORCONTROLLER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_SENSORCONTROLLER_HPP_IMPL
#define J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_SENSORCONTROLLER_HPP_IMPL

namespace j2cpp {




com::tencent::mm::sdk::platformtools::SensorController_::SensorEventCallBack::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

void com::tencent::mm::sdk::platformtools::SensorController_::SensorEventCallBack::onSensorEvent(jboolean a0)
{
	return call_method<
		com::tencent::mm::sdk::platformtools::SensorController_::SensorEventCallBack::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::SensorController_::SensorEventCallBack::J2CPP_METHOD_NAME(0),
		com::tencent::mm::sdk::platformtools::SensorController_::SensorEventCallBack::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(com::tencent::mm::sdk::platformtools::SensorController_::SensorEventCallBack,"com/tencent/mm/sdk/platformtools/SensorController$SensorEventCallBack")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::SensorController_::SensorEventCallBack,0,"onSensorEvent","(Z)V")



com::tencent::mm::sdk::platformtools::SensorController::operator local_ref<android::hardware::SensorEventListener>() const
{
	return local_ref<android::hardware::SensorEventListener>(get_jobject());
}

com::tencent::mm::sdk::platformtools::SensorController::operator local_ref<android::content::BroadcastReceiver>() const
{
	return local_ref<android::content::BroadcastReceiver>(get_jobject());
}

com::tencent::mm::sdk::platformtools::SensorController::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


com::tencent::mm::sdk::platformtools::SensorController::SensorController(local_ref< android::content::Context > const &a0)
: object<com::tencent::mm::sdk::platformtools::SensorController>(
	call_new_object<
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_METHOD_NAME(0),
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}


void com::tencent::mm::sdk::platformtools::SensorController::setSensorCallBack(local_ref< com::tencent::mm::sdk::platformtools::SensorController_::SensorEventCallBack > const &a0)
{
	return call_method<
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_METHOD_NAME(1),
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0);
}

void com::tencent::mm::sdk::platformtools::SensorController::removeSensorCallBack()
{
	return call_method<
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_METHOD_NAME(2),
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject());
}

void com::tencent::mm::sdk::platformtools::SensorController::onAccuracyChanged(local_ref< android::hardware::Sensor > const &a0, jint a1)
{
	return call_method<
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_METHOD_NAME(3),
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0, a1);
}

jboolean com::tencent::mm::sdk::platformtools::SensorController::isSensorEnable()
{
	return call_method<
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_METHOD_NAME(4),
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(get_jobject());
}

void com::tencent::mm::sdk::platformtools::SensorController::onSensorChanged(local_ref< android::hardware::SensorEvent > const &a0)
{
	return call_method<
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_METHOD_NAME(5),
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject(), a0);
}

void com::tencent::mm::sdk::platformtools::SensorController::onReceive(local_ref< android::content::Context > const &a0, local_ref< android::content::Intent > const &a1)
{
	return call_method<
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_METHOD_NAME(6),
		com::tencent::mm::sdk::platformtools::SensorController::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject(), a0, a1);
}




J2CPP_DEFINE_CLASS(com::tencent::mm::sdk::platformtools::SensorController,"com/tencent/mm/sdk/platformtools/SensorController")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::SensorController,0,"<init>","(Landroid/content/Context;)V")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::SensorController,1,"setSensorCallBack","(Lcom/tencent/mm/sdk/platformtools/SensorController$SensorEventCallBack;)V")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::SensorController,2,"removeSensorCallBack","()V")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::SensorController,3,"onAccuracyChanged","(Landroid/hardware/Sensor;I)V")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::SensorController,4,"isSensorEnable","()Z")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::SensorController,5,"onSensorChanged","(Landroid/hardware/SensorEvent;)V")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::SensorController,6,"onReceive","(Landroid/content/Context;Landroid/content/Intent;)V")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::SensorController,7,"<clinit>","()V")
J2CPP_DEFINE_FIELD(com::tencent::mm::sdk::platformtools::SensorController,0,"aR","F")
J2CPP_DEFINE_FIELD(com::tencent::mm::sdk::platformtools::SensorController,1,"aS","Landroid/hardware/SensorManager;")
J2CPP_DEFINE_FIELD(com::tencent::mm::sdk::platformtools::SensorController,2,"aT","F")
J2CPP_DEFINE_FIELD(com::tencent::mm::sdk::platformtools::SensorController,3,"aU","F")
J2CPP_DEFINE_FIELD(com::tencent::mm::sdk::platformtools::SensorController,4,"aV","Lcom/tencent/mm/sdk/platformtools/SensorController$SensorEventCallBack;")
J2CPP_DEFINE_FIELD(com::tencent::mm::sdk::platformtools::SensorController,5,"aW","Landroid/hardware/Sensor;")
J2CPP_DEFINE_FIELD(com::tencent::mm::sdk::platformtools::SensorController,6,"aX","Z")
J2CPP_DEFINE_FIELD(com::tencent::mm::sdk::platformtools::SensorController,7,"aY","Z")
J2CPP_DEFINE_FIELD(com::tencent::mm::sdk::platformtools::SensorController,8,"aZ","Z")

} //namespace j2cpp

#endif //J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_SENSORCONTROLLER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

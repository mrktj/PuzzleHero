/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: com.tencent.mm.sdk.platformtools.InetUtil
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_INETUTIL_HPP_DECL
#define J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_INETUTIL_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace net { class InetAddress; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/net/InetAddress.hpp>


namespace j2cpp {

namespace com { namespace tencent { namespace mm { namespace sdk { namespace platformtools {

	class InetUtil;
	class InetUtil
		: public object<InetUtil>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)

		explicit InetUtil(jobject jobj)
		: object<InetUtil>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static jboolean isIPv4Address(local_ref< java::lang::String >  const&);
		static jboolean isIPv6StdAddress(local_ref< java::lang::String >  const&);
		static jboolean isIPv6HexCompressedAddress(local_ref< java::lang::String >  const&);
		static jboolean isIPv6Address(local_ref< java::lang::String >  const&);
		static local_ref< java::net::InetAddress > getByDottedAddress(local_ref< java::lang::String >  const&);

	}; //class InetUtil

} //namespace platformtools
} //namespace sdk
} //namespace mm
} //namespace tencent
} //namespace com

} //namespace j2cpp

#endif //J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_INETUTIL_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_INETUTIL_HPP_IMPL
#define J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_INETUTIL_HPP_IMPL

namespace j2cpp {



com::tencent::mm::sdk::platformtools::InetUtil::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


jboolean com::tencent::mm::sdk::platformtools::InetUtil::isIPv4Address(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_METHOD_NAME(1),
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_METHOD_SIGNATURE(1), 
		jboolean
	>(a0);
}

jboolean com::tencent::mm::sdk::platformtools::InetUtil::isIPv6StdAddress(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_METHOD_NAME(2),
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(a0);
}

jboolean com::tencent::mm::sdk::platformtools::InetUtil::isIPv6HexCompressedAddress(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_METHOD_NAME(3),
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(a0);
}

jboolean com::tencent::mm::sdk::platformtools::InetUtil::isIPv6Address(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_METHOD_NAME(4),
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(a0);
}

local_ref< java::net::InetAddress > com::tencent::mm::sdk::platformtools::InetUtil::getByDottedAddress(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_METHOD_NAME(5),
		com::tencent::mm::sdk::platformtools::InetUtil::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::net::InetAddress >
	>(a0);
}




J2CPP_DEFINE_CLASS(com::tencent::mm::sdk::platformtools::InetUtil,"com/tencent/mm/sdk/platformtools/InetUtil")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::InetUtil,0,"<init>","()V")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::InetUtil,1,"isIPv4Address","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::InetUtil,2,"isIPv6StdAddress","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::InetUtil,3,"isIPv6HexCompressedAddress","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::InetUtil,4,"isIPv6Address","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::InetUtil,5,"getByDottedAddress","(Ljava/lang/String;)Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::InetUtil,6,"<clinit>","()V")
J2CPP_DEFINE_FIELD(com::tencent::mm::sdk::platformtools::InetUtil,0,"X","Ljava/util/regex/Pattern;")
J2CPP_DEFINE_FIELD(com::tencent::mm::sdk::platformtools::InetUtil,1,"Y","Ljava/util/regex/Pattern;")
J2CPP_DEFINE_FIELD(com::tencent::mm::sdk::platformtools::InetUtil,2,"Z","Ljava/util/regex/Pattern;")

} //namespace j2cpp

#endif //J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_INETUTIL_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

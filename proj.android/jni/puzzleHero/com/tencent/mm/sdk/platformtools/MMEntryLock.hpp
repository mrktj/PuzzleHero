/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: com.tencent.mm.sdk.platformtools.MMEntryLock
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_MMENTRYLOCK_HPP_DECL
#define J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_MMENTRYLOCK_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace com { namespace tencent { namespace mm { namespace sdk { namespace platformtools {

	class MMEntryLock;
	class MMEntryLock
		: public object<MMEntryLock>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_FIELD(0)

		explicit MMEntryLock(jobject jobj)
		: object<MMEntryLock>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static jboolean lock(local_ref< java::lang::String >  const&);
		static void unlock(local_ref< java::lang::String >  const&);
		static jboolean isLocked(local_ref< java::lang::String >  const&);

	}; //class MMEntryLock

} //namespace platformtools
} //namespace sdk
} //namespace mm
} //namespace tencent
} //namespace com

} //namespace j2cpp

#endif //J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_MMENTRYLOCK_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_MMENTRYLOCK_HPP_IMPL
#define J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_MMENTRYLOCK_HPP_IMPL

namespace j2cpp {



com::tencent::mm::sdk::platformtools::MMEntryLock::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


jboolean com::tencent::mm::sdk::platformtools::MMEntryLock::lock(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		com::tencent::mm::sdk::platformtools::MMEntryLock::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::MMEntryLock::J2CPP_METHOD_NAME(1),
		com::tencent::mm::sdk::platformtools::MMEntryLock::J2CPP_METHOD_SIGNATURE(1), 
		jboolean
	>(a0);
}

void com::tencent::mm::sdk::platformtools::MMEntryLock::unlock(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		com::tencent::mm::sdk::platformtools::MMEntryLock::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::MMEntryLock::J2CPP_METHOD_NAME(2),
		com::tencent::mm::sdk::platformtools::MMEntryLock::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(a0);
}

jboolean com::tencent::mm::sdk::platformtools::MMEntryLock::isLocked(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		com::tencent::mm::sdk::platformtools::MMEntryLock::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::MMEntryLock::J2CPP_METHOD_NAME(3),
		com::tencent::mm::sdk::platformtools::MMEntryLock::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(a0);
}




J2CPP_DEFINE_CLASS(com::tencent::mm::sdk::platformtools::MMEntryLock,"com/tencent/mm/sdk/platformtools/MMEntryLock")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::MMEntryLock,0,"<init>","()V")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::MMEntryLock,1,"lock","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::MMEntryLock,2,"unlock","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::MMEntryLock,3,"isLocked","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::MMEntryLock,4,"<clinit>","()V")
J2CPP_DEFINE_FIELD(com::tencent::mm::sdk::platformtools::MMEntryLock,0,"aF","Ljava/util/Set;")

} //namespace j2cpp

#endif //J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_MMENTRYLOCK_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: com.tencent.mm.sdk.platformtools.LogHelper
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_LOGHELPER_HPP_DECL
#define J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_LOGHELPER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class PrintStream; } } }


#include <java/io/PrintStream.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace com { namespace tencent { namespace mm { namespace sdk { namespace platformtools {

	class LogHelper;
	class LogHelper
		: public object<LogHelper>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_FIELD(0)

		explicit LogHelper(jobject jobj)
		: object<LogHelper>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static void writeToStream(local_ref< java::io::PrintStream >  const&, local_ref< array<jbyte,1> >  const&, local_ref< java::lang::String >  const&, local_ref< java::lang::String >  const&);
		static void initLogHeader(local_ref< java::io::PrintStream >  const&, local_ref< java::lang::String >  const&, local_ref< java::lang::String >  const&, jlong, jint);

	}; //class LogHelper

} //namespace platformtools
} //namespace sdk
} //namespace mm
} //namespace tencent
} //namespace com

} //namespace j2cpp

#endif //J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_LOGHELPER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_LOGHELPER_HPP_IMPL
#define J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_LOGHELPER_HPP_IMPL

namespace j2cpp {



com::tencent::mm::sdk::platformtools::LogHelper::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


void com::tencent::mm::sdk::platformtools::LogHelper::writeToStream(local_ref< java::io::PrintStream > const &a0, local_ref< array<jbyte,1> > const &a1, local_ref< java::lang::String > const &a2, local_ref< java::lang::String > const &a3)
{
	return call_static_method<
		com::tencent::mm::sdk::platformtools::LogHelper::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::LogHelper::J2CPP_METHOD_NAME(1),
		com::tencent::mm::sdk::platformtools::LogHelper::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(a0, a1, a2, a3);
}

void com::tencent::mm::sdk::platformtools::LogHelper::initLogHeader(local_ref< java::io::PrintStream > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, jlong a3, jint a4)
{
	return call_static_method<
		com::tencent::mm::sdk::platformtools::LogHelper::J2CPP_CLASS_NAME,
		com::tencent::mm::sdk::platformtools::LogHelper::J2CPP_METHOD_NAME(2),
		com::tencent::mm::sdk::platformtools::LogHelper::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(a0, a1, a2, a3, a4);
}




J2CPP_DEFINE_CLASS(com::tencent::mm::sdk::platformtools::LogHelper,"com/tencent/mm/sdk/platformtools/LogHelper")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::LogHelper,0,"<init>","()V")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::LogHelper,1,"writeToStream","(Ljava/io/PrintStream;[BLjava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::LogHelper,2,"initLogHeader","(Ljava/io/PrintStream;Ljava/lang/String;Ljava/lang/String;JI)V")
J2CPP_DEFINE_METHOD(com::tencent::mm::sdk::platformtools::LogHelper,3,"<clinit>","()V")
J2CPP_DEFINE_FIELD(com::tencent::mm::sdk::platformtools::LogHelper,0,"au","[B")

} //namespace j2cpp

#endif //J2CPP_COM_TENCENT_MM_SDK_PLATFORMTOOLS_LOGHELPER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

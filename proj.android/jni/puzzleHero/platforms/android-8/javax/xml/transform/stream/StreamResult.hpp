/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: javax.xml.transform.stream.StreamResult
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_XML_TRANSFORM_STREAM_STREAMRESULT_HPP_DECL
#define J2CPP_JAVAX_XML_TRANSFORM_STREAM_STREAMRESULT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class File; } } }
namespace j2cpp { namespace java { namespace io { class Writer; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }
namespace j2cpp { namespace javax { namespace xml { namespace transform { class Result; } } } }


#include <java/io/File.hpp>
#include <java/io/OutputStream.hpp>
#include <java/io/Writer.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <javax/xml/transform/Result.hpp>


namespace j2cpp {

namespace javax { namespace xml { namespace transform { namespace stream {

	class StreamResult;
	class StreamResult
		: public object<StreamResult>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_FIELD(0)

		explicit StreamResult(jobject jobj)
		: object<StreamResult>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<javax::xml::transform::Result>() const;


		StreamResult();
		StreamResult(local_ref< java::io::OutputStream > const&);
		StreamResult(local_ref< java::io::Writer > const&);
		StreamResult(local_ref< java::lang::String > const&);
		StreamResult(local_ref< java::io::File > const&);
		void setOutputStream(local_ref< java::io::OutputStream >  const&);
		local_ref< java::io::OutputStream > getOutputStream();
		void setWriter(local_ref< java::io::Writer >  const&);
		local_ref< java::io::Writer > getWriter();
		void setSystemId(local_ref< java::lang::String >  const&);
		void setSystemId(local_ref< java::io::File >  const&);
		local_ref< java::lang::String > getSystemId();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::lang::String > > FEATURE;
	}; //class StreamResult

} //namespace stream
} //namespace transform
} //namespace xml
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_XML_TRANSFORM_STREAM_STREAMRESULT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_XML_TRANSFORM_STREAM_STREAMRESULT_HPP_IMPL
#define J2CPP_JAVAX_XML_TRANSFORM_STREAM_STREAMRESULT_HPP_IMPL

namespace j2cpp {



javax::xml::transform::stream::StreamResult::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

javax::xml::transform::stream::StreamResult::operator local_ref<javax::xml::transform::Result>() const
{
	return local_ref<javax::xml::transform::Result>(get_jobject());
}


javax::xml::transform::stream::StreamResult::StreamResult()
: object<javax::xml::transform::stream::StreamResult>(
	call_new_object<
		javax::xml::transform::stream::StreamResult::J2CPP_CLASS_NAME,
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_NAME(0),
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}



javax::xml::transform::stream::StreamResult::StreamResult(local_ref< java::io::OutputStream > const &a0)
: object<javax::xml::transform::stream::StreamResult>(
	call_new_object<
		javax::xml::transform::stream::StreamResult::J2CPP_CLASS_NAME,
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_NAME(1),
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}



javax::xml::transform::stream::StreamResult::StreamResult(local_ref< java::io::Writer > const &a0)
: object<javax::xml::transform::stream::StreamResult>(
	call_new_object<
		javax::xml::transform::stream::StreamResult::J2CPP_CLASS_NAME,
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_NAME(2),
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_SIGNATURE(2)
	>(a0)
)
{
}



javax::xml::transform::stream::StreamResult::StreamResult(local_ref< java::lang::String > const &a0)
: object<javax::xml::transform::stream::StreamResult>(
	call_new_object<
		javax::xml::transform::stream::StreamResult::J2CPP_CLASS_NAME,
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_NAME(3),
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_SIGNATURE(3)
	>(a0)
)
{
}



javax::xml::transform::stream::StreamResult::StreamResult(local_ref< java::io::File > const &a0)
: object<javax::xml::transform::stream::StreamResult>(
	call_new_object<
		javax::xml::transform::stream::StreamResult::J2CPP_CLASS_NAME,
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_NAME(4),
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_SIGNATURE(4)
	>(a0)
)
{
}


void javax::xml::transform::stream::StreamResult::setOutputStream(local_ref< java::io::OutputStream > const &a0)
{
	return call_method<
		javax::xml::transform::stream::StreamResult::J2CPP_CLASS_NAME,
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_NAME(5),
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject(), a0);
}

local_ref< java::io::OutputStream > javax::xml::transform::stream::StreamResult::getOutputStream()
{
	return call_method<
		javax::xml::transform::stream::StreamResult::J2CPP_CLASS_NAME,
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_NAME(6),
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::io::OutputStream >
	>(get_jobject());
}

void javax::xml::transform::stream::StreamResult::setWriter(local_ref< java::io::Writer > const &a0)
{
	return call_method<
		javax::xml::transform::stream::StreamResult::J2CPP_CLASS_NAME,
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_NAME(7),
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0);
}

local_ref< java::io::Writer > javax::xml::transform::stream::StreamResult::getWriter()
{
	return call_method<
		javax::xml::transform::stream::StreamResult::J2CPP_CLASS_NAME,
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_NAME(8),
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::io::Writer >
	>(get_jobject());
}

void javax::xml::transform::stream::StreamResult::setSystemId(local_ref< java::lang::String > const &a0)
{
	return call_method<
		javax::xml::transform::stream::StreamResult::J2CPP_CLASS_NAME,
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_NAME(9),
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_SIGNATURE(9), 
		void
	>(get_jobject(), a0);
}

void javax::xml::transform::stream::StreamResult::setSystemId(local_ref< java::io::File > const &a0)
{
	return call_method<
		javax::xml::transform::stream::StreamResult::J2CPP_CLASS_NAME,
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_NAME(10),
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::String > javax::xml::transform::stream::StreamResult::getSystemId()
{
	return call_method<
		javax::xml::transform::stream::StreamResult::J2CPP_CLASS_NAME,
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_NAME(11),
		javax::xml::transform::stream::StreamResult::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< java::lang::String >
	>(get_jobject());
}


static_field<
	javax::xml::transform::stream::StreamResult::J2CPP_CLASS_NAME,
	javax::xml::transform::stream::StreamResult::J2CPP_FIELD_NAME(0),
	javax::xml::transform::stream::StreamResult::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::lang::String >
> javax::xml::transform::stream::StreamResult::FEATURE;


J2CPP_DEFINE_CLASS(javax::xml::transform::stream::StreamResult,"javax/xml/transform/stream/StreamResult")
J2CPP_DEFINE_METHOD(javax::xml::transform::stream::StreamResult,0,"<init>","()V")
J2CPP_DEFINE_METHOD(javax::xml::transform::stream::StreamResult,1,"<init>","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::stream::StreamResult,2,"<init>","(Ljava/io/Writer;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::stream::StreamResult,3,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::stream::StreamResult,4,"<init>","(Ljava/io/File;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::stream::StreamResult,5,"setOutputStream","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::stream::StreamResult,6,"getOutputStream","()Ljava/io/OutputStream;")
J2CPP_DEFINE_METHOD(javax::xml::transform::stream::StreamResult,7,"setWriter","(Ljava/io/Writer;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::stream::StreamResult,8,"getWriter","()Ljava/io/Writer;")
J2CPP_DEFINE_METHOD(javax::xml::transform::stream::StreamResult,9,"setSystemId","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::stream::StreamResult,10,"setSystemId","(Ljava/io/File;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::stream::StreamResult,11,"getSystemId","()Ljava/lang/String;")
J2CPP_DEFINE_FIELD(javax::xml::transform::stream::StreamResult,0,"FEATURE","Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVAX_XML_TRANSFORM_STREAM_STREAMRESULT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

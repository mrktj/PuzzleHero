/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: javax.xml.transform.Transformer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_XML_TRANSFORM_TRANSFORMER_HPP_DECL
#define J2CPP_JAVAX_XML_TRANSFORM_TRANSFORMER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Properties; } } }
namespace j2cpp { namespace javax { namespace xml { namespace transform { class Result; } } } }
namespace j2cpp { namespace javax { namespace xml { namespace transform { class URIResolver; } } } }
namespace j2cpp { namespace javax { namespace xml { namespace transform { class ErrorListener; } } } }
namespace j2cpp { namespace javax { namespace xml { namespace transform { class Source; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Properties.hpp>
#include <javax/xml/transform/ErrorListener.hpp>
#include <javax/xml/transform/Result.hpp>
#include <javax/xml/transform/Source.hpp>
#include <javax/xml/transform/URIResolver.hpp>


namespace j2cpp {

namespace javax { namespace xml { namespace transform {

	class Transformer;
	class Transformer
		: public object<Transformer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)

		explicit Transformer(jobject jobj)
		: object<Transformer>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		void reset();
		void transform(local_ref< javax::xml::transform::Source >  const&, local_ref< javax::xml::transform::Result >  const&);
		void setParameter(local_ref< java::lang::String >  const&, local_ref< java::lang::Object >  const&);
		local_ref< java::lang::Object > getParameter(local_ref< java::lang::String >  const&);
		void clearParameters();
		void setURIResolver(local_ref< javax::xml::transform::URIResolver >  const&);
		local_ref< javax::xml::transform::URIResolver > getURIResolver();
		void setOutputProperties(local_ref< java::util::Properties >  const&);
		local_ref< java::util::Properties > getOutputProperties();
		void setOutputProperty(local_ref< java::lang::String >  const&, local_ref< java::lang::String >  const&);
		local_ref< java::lang::String > getOutputProperty(local_ref< java::lang::String >  const&);
		void setErrorListener(local_ref< javax::xml::transform::ErrorListener >  const&);
		local_ref< javax::xml::transform::ErrorListener > getErrorListener();
	}; //class Transformer

} //namespace transform
} //namespace xml
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_XML_TRANSFORM_TRANSFORMER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_XML_TRANSFORM_TRANSFORMER_HPP_IMPL
#define J2CPP_JAVAX_XML_TRANSFORM_TRANSFORMER_HPP_IMPL

namespace j2cpp {



javax::xml::transform::Transformer::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


void javax::xml::transform::Transformer::reset()
{
	return call_method<
		javax::xml::transform::Transformer::J2CPP_CLASS_NAME,
		javax::xml::transform::Transformer::J2CPP_METHOD_NAME(1),
		javax::xml::transform::Transformer::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject());
}

void javax::xml::transform::Transformer::transform(local_ref< javax::xml::transform::Source > const &a0, local_ref< javax::xml::transform::Result > const &a1)
{
	return call_method<
		javax::xml::transform::Transformer::J2CPP_CLASS_NAME,
		javax::xml::transform::Transformer::J2CPP_METHOD_NAME(2),
		javax::xml::transform::Transformer::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0, a1);
}

void javax::xml::transform::Transformer::setParameter(local_ref< java::lang::String > const &a0, local_ref< java::lang::Object > const &a1)
{
	return call_method<
		javax::xml::transform::Transformer::J2CPP_CLASS_NAME,
		javax::xml::transform::Transformer::J2CPP_METHOD_NAME(3),
		javax::xml::transform::Transformer::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::Object > javax::xml::transform::Transformer::getParameter(local_ref< java::lang::String > const &a0)
{
	return call_method<
		javax::xml::transform::Transformer::J2CPP_CLASS_NAME,
		javax::xml::transform::Transformer::J2CPP_METHOD_NAME(4),
		javax::xml::transform::Transformer::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::lang::Object >
	>(get_jobject(), a0);
}

void javax::xml::transform::Transformer::clearParameters()
{
	return call_method<
		javax::xml::transform::Transformer::J2CPP_CLASS_NAME,
		javax::xml::transform::Transformer::J2CPP_METHOD_NAME(5),
		javax::xml::transform::Transformer::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject());
}

void javax::xml::transform::Transformer::setURIResolver(local_ref< javax::xml::transform::URIResolver > const &a0)
{
	return call_method<
		javax::xml::transform::Transformer::J2CPP_CLASS_NAME,
		javax::xml::transform::Transformer::J2CPP_METHOD_NAME(6),
		javax::xml::transform::Transformer::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject(), a0);
}

local_ref< javax::xml::transform::URIResolver > javax::xml::transform::Transformer::getURIResolver()
{
	return call_method<
		javax::xml::transform::Transformer::J2CPP_CLASS_NAME,
		javax::xml::transform::Transformer::J2CPP_METHOD_NAME(7),
		javax::xml::transform::Transformer::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< javax::xml::transform::URIResolver >
	>(get_jobject());
}

void javax::xml::transform::Transformer::setOutputProperties(local_ref< java::util::Properties > const &a0)
{
	return call_method<
		javax::xml::transform::Transformer::J2CPP_CLASS_NAME,
		javax::xml::transform::Transformer::J2CPP_METHOD_NAME(8),
		javax::xml::transform::Transformer::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}

local_ref< java::util::Properties > javax::xml::transform::Transformer::getOutputProperties()
{
	return call_method<
		javax::xml::transform::Transformer::J2CPP_CLASS_NAME,
		javax::xml::transform::Transformer::J2CPP_METHOD_NAME(9),
		javax::xml::transform::Transformer::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::util::Properties >
	>(get_jobject());
}

void javax::xml::transform::Transformer::setOutputProperty(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return call_method<
		javax::xml::transform::Transformer::J2CPP_CLASS_NAME,
		javax::xml::transform::Transformer::J2CPP_METHOD_NAME(10),
		javax::xml::transform::Transformer::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::String > javax::xml::transform::Transformer::getOutputProperty(local_ref< java::lang::String > const &a0)
{
	return call_method<
		javax::xml::transform::Transformer::J2CPP_CLASS_NAME,
		javax::xml::transform::Transformer::J2CPP_METHOD_NAME(11),
		javax::xml::transform::Transformer::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< java::lang::String >
	>(get_jobject(), a0);
}

void javax::xml::transform::Transformer::setErrorListener(local_ref< javax::xml::transform::ErrorListener > const &a0)
{
	return call_method<
		javax::xml::transform::Transformer::J2CPP_CLASS_NAME,
		javax::xml::transform::Transformer::J2CPP_METHOD_NAME(12),
		javax::xml::transform::Transformer::J2CPP_METHOD_SIGNATURE(12), 
		void
	>(get_jobject(), a0);
}

local_ref< javax::xml::transform::ErrorListener > javax::xml::transform::Transformer::getErrorListener()
{
	return call_method<
		javax::xml::transform::Transformer::J2CPP_CLASS_NAME,
		javax::xml::transform::Transformer::J2CPP_METHOD_NAME(13),
		javax::xml::transform::Transformer::J2CPP_METHOD_SIGNATURE(13), 
		local_ref< javax::xml::transform::ErrorListener >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(javax::xml::transform::Transformer,"javax/xml/transform/Transformer")
J2CPP_DEFINE_METHOD(javax::xml::transform::Transformer,0,"<init>","()V")
J2CPP_DEFINE_METHOD(javax::xml::transform::Transformer,1,"reset","()V")
J2CPP_DEFINE_METHOD(javax::xml::transform::Transformer,2,"transform","(Ljavax/xml/transform/Source;Ljavax/xml/transform/Result;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::Transformer,3,"setParameter","(Ljava/lang/String;Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::Transformer,4,"getParameter","(Ljava/lang/String;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(javax::xml::transform::Transformer,5,"clearParameters","()V")
J2CPP_DEFINE_METHOD(javax::xml::transform::Transformer,6,"setURIResolver","(Ljavax/xml/transform/URIResolver;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::Transformer,7,"getURIResolver","()Ljavax/xml/transform/URIResolver;")
J2CPP_DEFINE_METHOD(javax::xml::transform::Transformer,8,"setOutputProperties","(Ljava/util/Properties;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::Transformer,9,"getOutputProperties","()Ljava/util/Properties;")
J2CPP_DEFINE_METHOD(javax::xml::transform::Transformer,10,"setOutputProperty","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::Transformer,11,"getOutputProperty","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(javax::xml::transform::Transformer,12,"setErrorListener","(Ljavax/xml/transform/ErrorListener;)V")
J2CPP_DEFINE_METHOD(javax::xml::transform::Transformer,13,"getErrorListener","()Ljavax/xml/transform/ErrorListener;")

} //namespace j2cpp

#endif //J2CPP_JAVAX_XML_TRANSFORM_TRANSFORMER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

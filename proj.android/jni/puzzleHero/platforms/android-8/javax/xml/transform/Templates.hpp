/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: javax.xml.transform.Templates
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_XML_TRANSFORM_TEMPLATES_HPP_DECL
#define J2CPP_JAVAX_XML_TRANSFORM_TEMPLATES_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Properties; } } }
namespace j2cpp { namespace javax { namespace xml { namespace transform { class Transformer; } } } }


#include <java/lang/Object.hpp>
#include <java/util/Properties.hpp>
#include <javax/xml/transform/Transformer.hpp>


namespace j2cpp {

namespace javax { namespace xml { namespace transform {

	class Templates;
	class Templates
		: public object<Templates>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		explicit Templates(jobject jobj)
		: object<Templates>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		local_ref< javax::xml::transform::Transformer > newTransformer();
		local_ref< java::util::Properties > getOutputProperties();
	}; //class Templates

} //namespace transform
} //namespace xml
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_XML_TRANSFORM_TEMPLATES_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_XML_TRANSFORM_TEMPLATES_HPP_IMPL
#define J2CPP_JAVAX_XML_TRANSFORM_TEMPLATES_HPP_IMPL

namespace j2cpp {



javax::xml::transform::Templates::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

local_ref< javax::xml::transform::Transformer > javax::xml::transform::Templates::newTransformer()
{
	return call_method<
		javax::xml::transform::Templates::J2CPP_CLASS_NAME,
		javax::xml::transform::Templates::J2CPP_METHOD_NAME(0),
		javax::xml::transform::Templates::J2CPP_METHOD_SIGNATURE(0), 
		local_ref< javax::xml::transform::Transformer >
	>(get_jobject());
}

local_ref< java::util::Properties > javax::xml::transform::Templates::getOutputProperties()
{
	return call_method<
		javax::xml::transform::Templates::J2CPP_CLASS_NAME,
		javax::xml::transform::Templates::J2CPP_METHOD_NAME(1),
		javax::xml::transform::Templates::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::util::Properties >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(javax::xml::transform::Templates,"javax/xml/transform/Templates")
J2CPP_DEFINE_METHOD(javax::xml::transform::Templates,0,"newTransformer","()Ljavax/xml/transform/Transformer;")
J2CPP_DEFINE_METHOD(javax::xml::transform::Templates,1,"getOutputProperties","()Ljava/util/Properties;")

} //namespace j2cpp

#endif //J2CPP_JAVAX_XML_TRANSFORM_TEMPLATES_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

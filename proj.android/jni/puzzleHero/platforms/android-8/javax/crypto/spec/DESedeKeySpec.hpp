/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: javax.crypto.spec.DESedeKeySpec
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC_HPP_DECL
#define J2CPP_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { namespace spec { class KeySpec; } } } }


#include <java/lang/Object.hpp>
#include <java/security/spec/KeySpec.hpp>


namespace j2cpp {

namespace javax { namespace crypto { namespace spec {

	class DESedeKeySpec;
	class DESedeKeySpec
		: public object<DESedeKeySpec>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_FIELD(0)

		explicit DESedeKeySpec(jobject jobj)
		: object<DESedeKeySpec>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::security::spec::KeySpec>() const;


		DESedeKeySpec(local_ref< array<jbyte,1> > const&);
		DESedeKeySpec(local_ref< array<jbyte,1> > const&, jint);
		local_ref< array<jbyte,1> > getKey();
		static jboolean isParityAdjusted(local_ref< array<jbyte,1> >  const&, jint);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > DES_EDE_KEY_LEN;
	}; //class DESedeKeySpec

} //namespace spec
} //namespace crypto
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC_HPP_IMPL
#define J2CPP_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC_HPP_IMPL

namespace j2cpp {



javax::crypto::spec::DESedeKeySpec::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

javax::crypto::spec::DESedeKeySpec::operator local_ref<java::security::spec::KeySpec>() const
{
	return local_ref<java::security::spec::KeySpec>(get_jobject());
}


javax::crypto::spec::DESedeKeySpec::DESedeKeySpec(local_ref< array<jbyte,1> > const &a0)
: object<javax::crypto::spec::DESedeKeySpec>(
	call_new_object<
		javax::crypto::spec::DESedeKeySpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::DESedeKeySpec::J2CPP_METHOD_NAME(0),
		javax::crypto::spec::DESedeKeySpec::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}



javax::crypto::spec::DESedeKeySpec::DESedeKeySpec(local_ref< array<jbyte,1> > const &a0, jint a1)
: object<javax::crypto::spec::DESedeKeySpec>(
	call_new_object<
		javax::crypto::spec::DESedeKeySpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::DESedeKeySpec::J2CPP_METHOD_NAME(1),
		javax::crypto::spec::DESedeKeySpec::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1)
)
{
}


local_ref< array<jbyte,1> > javax::crypto::spec::DESedeKeySpec::getKey()
{
	return call_method<
		javax::crypto::spec::DESedeKeySpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::DESedeKeySpec::J2CPP_METHOD_NAME(2),
		javax::crypto::spec::DESedeKeySpec::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< array<jbyte,1> >
	>(get_jobject());
}

jboolean javax::crypto::spec::DESedeKeySpec::isParityAdjusted(local_ref< array<jbyte,1> > const &a0, jint a1)
{
	return call_static_method<
		javax::crypto::spec::DESedeKeySpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::DESedeKeySpec::J2CPP_METHOD_NAME(3),
		javax::crypto::spec::DESedeKeySpec::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(a0, a1);
}


static_field<
	javax::crypto::spec::DESedeKeySpec::J2CPP_CLASS_NAME,
	javax::crypto::spec::DESedeKeySpec::J2CPP_FIELD_NAME(0),
	javax::crypto::spec::DESedeKeySpec::J2CPP_FIELD_SIGNATURE(0),
	jint
> javax::crypto::spec::DESedeKeySpec::DES_EDE_KEY_LEN;


J2CPP_DEFINE_CLASS(javax::crypto::spec::DESedeKeySpec,"javax/crypto/spec/DESedeKeySpec")
J2CPP_DEFINE_METHOD(javax::crypto::spec::DESedeKeySpec,0,"<init>","([B)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::DESedeKeySpec,1,"<init>","([BI)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::DESedeKeySpec,2,"getKey","()[B")
J2CPP_DEFINE_METHOD(javax::crypto::spec::DESedeKeySpec,3,"isParityAdjusted","([BI)Z")
J2CPP_DEFINE_FIELD(javax::crypto::spec::DESedeKeySpec,0,"DES_EDE_KEY_LEN","I")

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SPEC_DESEDEKEYSPEC_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

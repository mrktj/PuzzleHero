/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: javax.crypto.SecretKeyFactory
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SECRETKEYFACTORY_HPP_DECL
#define J2CPP_JAVAX_CRYPTO_SECRETKEYFACTORY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { namespace spec { class KeySpec; } } } }
namespace j2cpp { namespace java { namespace security { class Provider; } } }
namespace j2cpp { namespace javax { namespace crypto { class SecretKey; } } }


#include <java/lang/Class.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/security/Provider.hpp>
#include <java/security/spec/KeySpec.hpp>
#include <javax/crypto/SecretKey.hpp>


namespace j2cpp {

namespace javax { namespace crypto {

	class SecretKeyFactory;
	class SecretKeyFactory
		: public object<SecretKeyFactory>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit SecretKeyFactory(jobject jobj)
		: object<SecretKeyFactory>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		local_ref< java::lang::String > getAlgorithm();
		local_ref< java::security::Provider > getProvider();
		static local_ref< javax::crypto::SecretKeyFactory > getInstance(local_ref< java::lang::String >  const&);
		static local_ref< javax::crypto::SecretKeyFactory > getInstance(local_ref< java::lang::String >  const&, local_ref< java::lang::String >  const&);
		static local_ref< javax::crypto::SecretKeyFactory > getInstance(local_ref< java::lang::String >  const&, local_ref< java::security::Provider >  const&);
		local_ref< javax::crypto::SecretKey > generateSecret(local_ref< java::security::spec::KeySpec >  const&);
		local_ref< java::security::spec::KeySpec > getKeySpec(local_ref< javax::crypto::SecretKey >  const&, local_ref< java::lang::Class >  const&);
		local_ref< javax::crypto::SecretKey > translateKey(local_ref< javax::crypto::SecretKey >  const&);
	}; //class SecretKeyFactory

} //namespace crypto
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SECRETKEYFACTORY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SECRETKEYFACTORY_HPP_IMPL
#define J2CPP_JAVAX_CRYPTO_SECRETKEYFACTORY_HPP_IMPL

namespace j2cpp {



javax::crypto::SecretKeyFactory::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


local_ref< java::lang::String > javax::crypto::SecretKeyFactory::getAlgorithm()
{
	return call_method<
		javax::crypto::SecretKeyFactory::J2CPP_CLASS_NAME,
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_NAME(1),
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::security::Provider > javax::crypto::SecretKeyFactory::getProvider()
{
	return call_method<
		javax::crypto::SecretKeyFactory::J2CPP_CLASS_NAME,
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_NAME(2),
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::security::Provider >
	>(get_jobject());
}

local_ref< javax::crypto::SecretKeyFactory > javax::crypto::SecretKeyFactory::getInstance(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		javax::crypto::SecretKeyFactory::J2CPP_CLASS_NAME,
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_NAME(3),
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< javax::crypto::SecretKeyFactory >
	>(a0);
}

local_ref< javax::crypto::SecretKeyFactory > javax::crypto::SecretKeyFactory::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return call_static_method<
		javax::crypto::SecretKeyFactory::J2CPP_CLASS_NAME,
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_NAME(4),
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< javax::crypto::SecretKeyFactory >
	>(a0, a1);
}

local_ref< javax::crypto::SecretKeyFactory > javax::crypto::SecretKeyFactory::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::security::Provider > const &a1)
{
	return call_static_method<
		javax::crypto::SecretKeyFactory::J2CPP_CLASS_NAME,
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_NAME(5),
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< javax::crypto::SecretKeyFactory >
	>(a0, a1);
}

local_ref< javax::crypto::SecretKey > javax::crypto::SecretKeyFactory::generateSecret(local_ref< java::security::spec::KeySpec > const &a0)
{
	return call_method<
		javax::crypto::SecretKeyFactory::J2CPP_CLASS_NAME,
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_NAME(6),
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< javax::crypto::SecretKey >
	>(get_jobject(), a0);
}

local_ref< java::security::spec::KeySpec > javax::crypto::SecretKeyFactory::getKeySpec(local_ref< javax::crypto::SecretKey > const &a0, local_ref< java::lang::Class > const &a1)
{
	return call_method<
		javax::crypto::SecretKeyFactory::J2CPP_CLASS_NAME,
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_NAME(7),
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::security::spec::KeySpec >
	>(get_jobject(), a0, a1);
}

local_ref< javax::crypto::SecretKey > javax::crypto::SecretKeyFactory::translateKey(local_ref< javax::crypto::SecretKey > const &a0)
{
	return call_method<
		javax::crypto::SecretKeyFactory::J2CPP_CLASS_NAME,
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_NAME(8),
		javax::crypto::SecretKeyFactory::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< javax::crypto::SecretKey >
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(javax::crypto::SecretKeyFactory,"javax/crypto/SecretKeyFactory")
J2CPP_DEFINE_METHOD(javax::crypto::SecretKeyFactory,0,"<init>","(Ljavax/crypto/SecretKeyFactorySpi;Ljava/security/Provider;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(javax::crypto::SecretKeyFactory,1,"getAlgorithm","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(javax::crypto::SecretKeyFactory,2,"getProvider","()Ljava/security/Provider;")
J2CPP_DEFINE_METHOD(javax::crypto::SecretKeyFactory,3,"getInstance","(Ljava/lang/String;)Ljavax/crypto/SecretKeyFactory;")
J2CPP_DEFINE_METHOD(javax::crypto::SecretKeyFactory,4,"getInstance","(Ljava/lang/String;Ljava/lang/String;)Ljavax/crypto/SecretKeyFactory;")
J2CPP_DEFINE_METHOD(javax::crypto::SecretKeyFactory,5,"getInstance","(Ljava/lang/String;Ljava/security/Provider;)Ljavax/crypto/SecretKeyFactory;")
J2CPP_DEFINE_METHOD(javax::crypto::SecretKeyFactory,6,"generateSecret","(Ljava/security/spec/KeySpec;)Ljavax/crypto/SecretKey;")
J2CPP_DEFINE_METHOD(javax::crypto::SecretKeyFactory,7,"getKeySpec","(Ljavax/crypto/SecretKey;Ljava/lang/Class;)Ljava/security/spec/KeySpec;")
J2CPP_DEFINE_METHOD(javax::crypto::SecretKeyFactory,8,"translateKey","(Ljavax/crypto/SecretKey;)Ljavax/crypto/SecretKey;")

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SECRETKEYFACTORY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

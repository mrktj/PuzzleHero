/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: javax.crypto.CipherSpi
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_CIPHERSPI_HPP_DECL
#define J2CPP_JAVAX_CRYPTO_CIPHERSPI_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace javax { namespace crypto {

	class CipherSpi;
	class CipherSpi
		: public object<CipherSpi>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)

		explicit CipherSpi(jobject jobj)
		: object<CipherSpi>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		CipherSpi();
	}; //class CipherSpi

} //namespace crypto
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_CIPHERSPI_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_CIPHERSPI_HPP_IMPL
#define J2CPP_JAVAX_CRYPTO_CIPHERSPI_HPP_IMPL

namespace j2cpp {



javax::crypto::CipherSpi::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


javax::crypto::CipherSpi::CipherSpi()
: object<javax::crypto::CipherSpi>(
	call_new_object<
		javax::crypto::CipherSpi::J2CPP_CLASS_NAME,
		javax::crypto::CipherSpi::J2CPP_METHOD_NAME(0),
		javax::crypto::CipherSpi::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}





















J2CPP_DEFINE_CLASS(javax::crypto::CipherSpi,"javax/crypto/CipherSpi")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,0,"<init>","()V")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,1,"engineSetMode","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,2,"engineSetPadding","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,3,"engineGetBlockSize","()I")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,4,"engineGetOutputSize","(I)I")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,5,"engineGetIV","()[B")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,6,"engineGetParameters","()Ljava/security/AlgorithmParameters;")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,7,"engineInit","(ILjava/security/Key;Ljava/security/SecureRandom;)V")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,8,"engineInit","(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)V")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,9,"engineInit","(ILjava/security/Key;Ljava/security/AlgorithmParameters;Ljava/security/SecureRandom;)V")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,10,"engineUpdate","([BII)[B")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,11,"engineUpdate","([BII[BI)I")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,12,"engineUpdate","(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,13,"engineDoFinal","([BII)[B")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,14,"engineDoFinal","([BII[BI)I")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,15,"engineDoFinal","(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,16,"engineWrap","(Ljava/security/Key;)[B")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,17,"engineUnwrap","([BLjava/lang/String;I)Ljava/security/Key;")
J2CPP_DEFINE_METHOD(javax::crypto::CipherSpi,18,"engineGetKeySize","(Ljava/security/Key;)I")

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_CIPHERSPI_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

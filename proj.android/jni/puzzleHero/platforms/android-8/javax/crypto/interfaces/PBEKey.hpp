/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: javax.crypto.interfaces.PBEKey
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_INTERFACES_PBEKEY_HPP_DECL
#define J2CPP_JAVAX_CRYPTO_INTERFACES_PBEKEY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { class Key; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }
namespace j2cpp { namespace javax { namespace crypto { class SecretKey; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>
#include <java/security/Key.hpp>
#include <javax/crypto/SecretKey.hpp>


namespace j2cpp {

namespace javax { namespace crypto { namespace interfaces {

	class PBEKey;
	class PBEKey
		: public object<PBEKey>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_FIELD(0)

		explicit PBEKey(jobject jobj)
		: object<PBEKey>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::security::Key>() const;
		operator local_ref<java::io::Serializable>() const;
		operator local_ref<javax::crypto::SecretKey>() const;


		jint getIterationCount();
		local_ref< array<jbyte,1> > getSalt();
		local_ref< array<jchar,1> > getPassword();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jlong > serialVersionUID;
	}; //class PBEKey

} //namespace interfaces
} //namespace crypto
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_INTERFACES_PBEKEY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_INTERFACES_PBEKEY_HPP_IMPL
#define J2CPP_JAVAX_CRYPTO_INTERFACES_PBEKEY_HPP_IMPL

namespace j2cpp {



javax::crypto::interfaces::PBEKey::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

javax::crypto::interfaces::PBEKey::operator local_ref<java::security::Key>() const
{
	return local_ref<java::security::Key>(get_jobject());
}

javax::crypto::interfaces::PBEKey::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}

javax::crypto::interfaces::PBEKey::operator local_ref<javax::crypto::SecretKey>() const
{
	return local_ref<javax::crypto::SecretKey>(get_jobject());
}

jint javax::crypto::interfaces::PBEKey::getIterationCount()
{
	return call_method<
		javax::crypto::interfaces::PBEKey::J2CPP_CLASS_NAME,
		javax::crypto::interfaces::PBEKey::J2CPP_METHOD_NAME(0),
		javax::crypto::interfaces::PBEKey::J2CPP_METHOD_SIGNATURE(0), 
		jint
	>(get_jobject());
}

local_ref< array<jbyte,1> > javax::crypto::interfaces::PBEKey::getSalt()
{
	return call_method<
		javax::crypto::interfaces::PBEKey::J2CPP_CLASS_NAME,
		javax::crypto::interfaces::PBEKey::J2CPP_METHOD_NAME(1),
		javax::crypto::interfaces::PBEKey::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< array<jbyte,1> >
	>(get_jobject());
}

local_ref< array<jchar,1> > javax::crypto::interfaces::PBEKey::getPassword()
{
	return call_method<
		javax::crypto::interfaces::PBEKey::J2CPP_CLASS_NAME,
		javax::crypto::interfaces::PBEKey::J2CPP_METHOD_NAME(2),
		javax::crypto::interfaces::PBEKey::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< array<jchar,1> >
	>(get_jobject());
}


static_field<
	javax::crypto::interfaces::PBEKey::J2CPP_CLASS_NAME,
	javax::crypto::interfaces::PBEKey::J2CPP_FIELD_NAME(0),
	javax::crypto::interfaces::PBEKey::J2CPP_FIELD_SIGNATURE(0),
	jlong
> javax::crypto::interfaces::PBEKey::serialVersionUID;


J2CPP_DEFINE_CLASS(javax::crypto::interfaces::PBEKey,"javax/crypto/interfaces/PBEKey")
J2CPP_DEFINE_METHOD(javax::crypto::interfaces::PBEKey,0,"getIterationCount","()I")
J2CPP_DEFINE_METHOD(javax::crypto::interfaces::PBEKey,1,"getSalt","()[B")
J2CPP_DEFINE_METHOD(javax::crypto::interfaces::PBEKey,2,"getPassword","()[C")
J2CPP_DEFINE_FIELD(javax::crypto::interfaces::PBEKey,0,"serialVersionUID","J")

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_INTERFACES_PBEKEY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

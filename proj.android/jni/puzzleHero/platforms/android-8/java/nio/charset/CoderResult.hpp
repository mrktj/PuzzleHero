/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.nio.charset.CoderResult
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHARSET_CODERRESULT_HPP_DECL
#define J2CPP_JAVA_NIO_CHARSET_CODERRESULT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace nio { namespace charset {

	class CoderResult;
	class CoderResult
		: public object<CoderResult>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		explicit CoderResult(jobject jobj)
		: object<CoderResult>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static local_ref< java::nio::charset::CoderResult > malformedForLength(jint);
		static local_ref< java::nio::charset::CoderResult > unmappableForLength(jint);
		jboolean isUnderflow();
		jboolean isError();
		jboolean isMalformed();
		jboolean isOverflow();
		jboolean isUnmappable();
		jint length();
		void throwException();
		local_ref< java::lang::String > toString();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::nio::charset::CoderResult > > UNDERFLOW;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::nio::charset::CoderResult > > OVERFLOW;
	}; //class CoderResult

} //namespace charset
} //namespace nio
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHARSET_CODERRESULT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHARSET_CODERRESULT_HPP_IMPL
#define J2CPP_JAVA_NIO_CHARSET_CODERRESULT_HPP_IMPL

namespace j2cpp {



java::nio::charset::CoderResult::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


local_ref< java::nio::charset::CoderResult > java::nio::charset::CoderResult::malformedForLength(jint a0)
{
	return call_static_method<
		java::nio::charset::CoderResult::J2CPP_CLASS_NAME,
		java::nio::charset::CoderResult::J2CPP_METHOD_NAME(1),
		java::nio::charset::CoderResult::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::nio::charset::CoderResult >
	>(a0);
}

local_ref< java::nio::charset::CoderResult > java::nio::charset::CoderResult::unmappableForLength(jint a0)
{
	return call_static_method<
		java::nio::charset::CoderResult::J2CPP_CLASS_NAME,
		java::nio::charset::CoderResult::J2CPP_METHOD_NAME(2),
		java::nio::charset::CoderResult::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::nio::charset::CoderResult >
	>(a0);
}

jboolean java::nio::charset::CoderResult::isUnderflow()
{
	return call_method<
		java::nio::charset::CoderResult::J2CPP_CLASS_NAME,
		java::nio::charset::CoderResult::J2CPP_METHOD_NAME(3),
		java::nio::charset::CoderResult::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(get_jobject());
}

jboolean java::nio::charset::CoderResult::isError()
{
	return call_method<
		java::nio::charset::CoderResult::J2CPP_CLASS_NAME,
		java::nio::charset::CoderResult::J2CPP_METHOD_NAME(4),
		java::nio::charset::CoderResult::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(get_jobject());
}

jboolean java::nio::charset::CoderResult::isMalformed()
{
	return call_method<
		java::nio::charset::CoderResult::J2CPP_CLASS_NAME,
		java::nio::charset::CoderResult::J2CPP_METHOD_NAME(5),
		java::nio::charset::CoderResult::J2CPP_METHOD_SIGNATURE(5), 
		jboolean
	>(get_jobject());
}

jboolean java::nio::charset::CoderResult::isOverflow()
{
	return call_method<
		java::nio::charset::CoderResult::J2CPP_CLASS_NAME,
		java::nio::charset::CoderResult::J2CPP_METHOD_NAME(6),
		java::nio::charset::CoderResult::J2CPP_METHOD_SIGNATURE(6), 
		jboolean
	>(get_jobject());
}

jboolean java::nio::charset::CoderResult::isUnmappable()
{
	return call_method<
		java::nio::charset::CoderResult::J2CPP_CLASS_NAME,
		java::nio::charset::CoderResult::J2CPP_METHOD_NAME(7),
		java::nio::charset::CoderResult::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject());
}

jint java::nio::charset::CoderResult::length()
{
	return call_method<
		java::nio::charset::CoderResult::J2CPP_CLASS_NAME,
		java::nio::charset::CoderResult::J2CPP_METHOD_NAME(8),
		java::nio::charset::CoderResult::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}

void java::nio::charset::CoderResult::throwException()
{
	return call_method<
		java::nio::charset::CoderResult::J2CPP_CLASS_NAME,
		java::nio::charset::CoderResult::J2CPP_METHOD_NAME(9),
		java::nio::charset::CoderResult::J2CPP_METHOD_SIGNATURE(9), 
		void
	>(get_jobject());
}

local_ref< java::lang::String > java::nio::charset::CoderResult::toString()
{
	return call_method<
		java::nio::charset::CoderResult::J2CPP_CLASS_NAME,
		java::nio::charset::CoderResult::J2CPP_METHOD_NAME(10),
		java::nio::charset::CoderResult::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::lang::String >
	>(get_jobject());
}



static_field<
	java::nio::charset::CoderResult::J2CPP_CLASS_NAME,
	java::nio::charset::CoderResult::J2CPP_FIELD_NAME(0),
	java::nio::charset::CoderResult::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::nio::charset::CoderResult >
> java::nio::charset::CoderResult::UNDERFLOW;

static_field<
	java::nio::charset::CoderResult::J2CPP_CLASS_NAME,
	java::nio::charset::CoderResult::J2CPP_FIELD_NAME(1),
	java::nio::charset::CoderResult::J2CPP_FIELD_SIGNATURE(1),
	local_ref< java::nio::charset::CoderResult >
> java::nio::charset::CoderResult::OVERFLOW;


J2CPP_DEFINE_CLASS(java::nio::charset::CoderResult,"java/nio/charset/CoderResult")
J2CPP_DEFINE_METHOD(java::nio::charset::CoderResult,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::nio::charset::CoderResult,1,"malformedForLength","(I)Ljava/nio/charset/CoderResult;")
J2CPP_DEFINE_METHOD(java::nio::charset::CoderResult,2,"unmappableForLength","(I)Ljava/nio/charset/CoderResult;")
J2CPP_DEFINE_METHOD(java::nio::charset::CoderResult,3,"isUnderflow","()Z")
J2CPP_DEFINE_METHOD(java::nio::charset::CoderResult,4,"isError","()Z")
J2CPP_DEFINE_METHOD(java::nio::charset::CoderResult,5,"isMalformed","()Z")
J2CPP_DEFINE_METHOD(java::nio::charset::CoderResult,6,"isOverflow","()Z")
J2CPP_DEFINE_METHOD(java::nio::charset::CoderResult,7,"isUnmappable","()Z")
J2CPP_DEFINE_METHOD(java::nio::charset::CoderResult,8,"length","()I")
J2CPP_DEFINE_METHOD(java::nio::charset::CoderResult,9,"throwException","()V")
J2CPP_DEFINE_METHOD(java::nio::charset::CoderResult,10,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::nio::charset::CoderResult,11,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::nio::charset::CoderResult,0,"UNDERFLOW","Ljava/nio/charset/CoderResult;")
J2CPP_DEFINE_FIELD(java::nio::charset::CoderResult,1,"OVERFLOW","Ljava/nio/charset/CoderResult;")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHARSET_CODERRESULT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

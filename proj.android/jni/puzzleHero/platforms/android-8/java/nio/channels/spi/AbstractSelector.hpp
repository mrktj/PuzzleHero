/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.nio.channels.spi.AbstractSelector
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTOR_HPP_DECL
#define J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTOR_HPP_DECL


namespace j2cpp { namespace java { namespace nio { namespace channels { namespace spi { class SelectorProvider; } } } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class Selector; } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/nio/channels/Selector.hpp>
#include <java/nio/channels/spi/SelectorProvider.hpp>


namespace j2cpp {

namespace java { namespace nio { namespace channels { namespace spi {

	class AbstractSelector;
	class AbstractSelector
		: public object<AbstractSelector>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)

		explicit AbstractSelector(jobject jobj)
		: object<AbstractSelector>(jobj)
		{
		}

		operator local_ref<java::nio::channels::Selector>() const;
		operator local_ref<java::lang::Object>() const;


		void close();
		jboolean isOpen();
		local_ref< java::nio::channels::spi::SelectorProvider > provider();
	}; //class AbstractSelector

} //namespace spi
} //namespace channels
} //namespace nio
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTOR_HPP_IMPL
#define J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTOR_HPP_IMPL

namespace j2cpp {



java::nio::channels::spi::AbstractSelector::operator local_ref<java::nio::channels::Selector>() const
{
	return local_ref<java::nio::channels::Selector>(get_jobject());
}

java::nio::channels::spi::AbstractSelector::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


void java::nio::channels::spi::AbstractSelector::close()
{
	return call_method<
		java::nio::channels::spi::AbstractSelector::J2CPP_CLASS_NAME,
		java::nio::channels::spi::AbstractSelector::J2CPP_METHOD_NAME(1),
		java::nio::channels::spi::AbstractSelector::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject());
}


jboolean java::nio::channels::spi::AbstractSelector::isOpen()
{
	return call_method<
		java::nio::channels::spi::AbstractSelector::J2CPP_CLASS_NAME,
		java::nio::channels::spi::AbstractSelector::J2CPP_METHOD_NAME(3),
		java::nio::channels::spi::AbstractSelector::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(get_jobject());
}

local_ref< java::nio::channels::spi::SelectorProvider > java::nio::channels::spi::AbstractSelector::provider()
{
	return call_method<
		java::nio::channels::spi::AbstractSelector::J2CPP_CLASS_NAME,
		java::nio::channels::spi::AbstractSelector::J2CPP_METHOD_NAME(4),
		java::nio::channels::spi::AbstractSelector::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::nio::channels::spi::SelectorProvider >
	>(get_jobject());
}







J2CPP_DEFINE_CLASS(java::nio::channels::spi::AbstractSelector,"java/nio/channels/spi/AbstractSelector")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelector,0,"<init>","(Ljava/nio/channels/spi/SelectorProvider;)V")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelector,1,"close","()V")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelector,2,"implCloseSelector","()V")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelector,3,"isOpen","()Z")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelector,4,"provider","()Ljava/nio/channels/spi/SelectorProvider;")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelector,5,"cancelledKeys","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelector,6,"register","(Ljava/nio/channels/spi/AbstractSelectableChannel;ILjava/lang/Object;)Ljava/nio/channels/SelectionKey;")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelector,7,"deregister","(Ljava/nio/channels/spi/AbstractSelectionKey;)V")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelector,8,"begin","()V")
J2CPP_DEFINE_METHOD(java::nio::channels::spi::AbstractSelector,9,"end","()V")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_SPI_ABSTRACTSELECTOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

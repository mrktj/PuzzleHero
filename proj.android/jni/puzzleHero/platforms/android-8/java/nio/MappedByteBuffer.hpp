/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.nio.MappedByteBuffer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_MAPPEDBYTEBUFFER_HPP_DECL
#define J2CPP_JAVA_NIO_MAPPEDBYTEBUFFER_HPP_DECL


namespace j2cpp { namespace java { namespace nio { class ByteBuffer; } } }
namespace j2cpp { namespace java { namespace nio { class Buffer; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Comparable; } } }


#include <java/lang/Comparable.hpp>
#include <java/lang/Object.hpp>
#include <java/nio/Buffer.hpp>
#include <java/nio/ByteBuffer.hpp>


namespace j2cpp {

namespace java { namespace nio {

	class MappedByteBuffer;
	class MappedByteBuffer
		: public object<MappedByteBuffer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		explicit MappedByteBuffer(jobject jobj)
		: object<MappedByteBuffer>(jobj)
		{
		}

		operator local_ref<java::nio::ByteBuffer>() const;
		operator local_ref<java::nio::Buffer>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Comparable>() const;


		jboolean isLoaded();
		local_ref< java::nio::MappedByteBuffer > load();
		local_ref< java::nio::MappedByteBuffer > force();
	}; //class MappedByteBuffer

} //namespace nio
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_MAPPEDBYTEBUFFER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_MAPPEDBYTEBUFFER_HPP_IMPL
#define J2CPP_JAVA_NIO_MAPPEDBYTEBUFFER_HPP_IMPL

namespace j2cpp {



java::nio::MappedByteBuffer::operator local_ref<java::nio::ByteBuffer>() const
{
	return local_ref<java::nio::ByteBuffer>(get_jobject());
}

java::nio::MappedByteBuffer::operator local_ref<java::nio::Buffer>() const
{
	return local_ref<java::nio::Buffer>(get_jobject());
}

java::nio::MappedByteBuffer::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::nio::MappedByteBuffer::operator local_ref<java::lang::Comparable>() const
{
	return local_ref<java::lang::Comparable>(get_jobject());
}


jboolean java::nio::MappedByteBuffer::isLoaded()
{
	return call_method<
		java::nio::MappedByteBuffer::J2CPP_CLASS_NAME,
		java::nio::MappedByteBuffer::J2CPP_METHOD_NAME(1),
		java::nio::MappedByteBuffer::J2CPP_METHOD_SIGNATURE(1), 
		jboolean
	>(get_jobject());
}

local_ref< java::nio::MappedByteBuffer > java::nio::MappedByteBuffer::load()
{
	return call_method<
		java::nio::MappedByteBuffer::J2CPP_CLASS_NAME,
		java::nio::MappedByteBuffer::J2CPP_METHOD_NAME(2),
		java::nio::MappedByteBuffer::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::nio::MappedByteBuffer >
	>(get_jobject());
}

local_ref< java::nio::MappedByteBuffer > java::nio::MappedByteBuffer::force()
{
	return call_method<
		java::nio::MappedByteBuffer::J2CPP_CLASS_NAME,
		java::nio::MappedByteBuffer::J2CPP_METHOD_NAME(3),
		java::nio::MappedByteBuffer::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::nio::MappedByteBuffer >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::nio::MappedByteBuffer,"java/nio/MappedByteBuffer")
J2CPP_DEFINE_METHOD(java::nio::MappedByteBuffer,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::nio::MappedByteBuffer,1,"isLoaded","()Z")
J2CPP_DEFINE_METHOD(java::nio::MappedByteBuffer,2,"load","()Ljava/nio/MappedByteBuffer;")
J2CPP_DEFINE_METHOD(java::nio::MappedByteBuffer,3,"force","()Ljava/nio/MappedByteBuffer;")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_MAPPEDBYTEBUFFER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.sql.Timestamp
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_TIMESTAMP_HPP_DECL
#define J2CPP_JAVA_SQL_TIMESTAMP_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Cloneable; } } }
namespace j2cpp { namespace java { namespace lang { class Comparable; } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Cloneable.hpp>
#include <java/lang/Comparable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Date.hpp>


namespace j2cpp {

namespace java { namespace sql {

	class Timestamp;
	class Timestamp
		: public object<Timestamp>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)

		explicit Timestamp(jobject jobj)
		: object<Timestamp>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Cloneable>() const;
		operator local_ref<java::lang::Comparable>() const;
		operator local_ref<java::util::Date>() const;
		operator local_ref<java::io::Serializable>() const;


		Timestamp(jint, jint, jint, jint, jint, jint, jint);
		Timestamp(jlong);
		jboolean after(local_ref< java::sql::Timestamp >  const&);
		jboolean before(local_ref< java::sql::Timestamp >  const&);
		jint compareTo(local_ref< java::util::Date >  const&);
		jint compareTo(local_ref< java::sql::Timestamp >  const&);
		jboolean equals(local_ref< java::lang::Object >  const&);
		jboolean equals(local_ref< java::sql::Timestamp >  const&);
		jint getNanos();
		jlong getTime();
		void setNanos(jint);
		void setTime(jlong);
		local_ref< java::lang::String > toString();
		static local_ref< java::sql::Timestamp > valueOf(local_ref< java::lang::String >  const&);
		jint compareTo(local_ref< java::lang::Object >  const&);
	}; //class Timestamp

} //namespace sql
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_TIMESTAMP_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_TIMESTAMP_HPP_IMPL
#define J2CPP_JAVA_SQL_TIMESTAMP_HPP_IMPL

namespace j2cpp {



java::sql::Timestamp::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::sql::Timestamp::operator local_ref<java::lang::Cloneable>() const
{
	return local_ref<java::lang::Cloneable>(get_jobject());
}

java::sql::Timestamp::operator local_ref<java::lang::Comparable>() const
{
	return local_ref<java::lang::Comparable>(get_jobject());
}

java::sql::Timestamp::operator local_ref<java::util::Date>() const
{
	return local_ref<java::util::Date>(get_jobject());
}

java::sql::Timestamp::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


java::sql::Timestamp::Timestamp(jint a0, jint a1, jint a2, jint a3, jint a4, jint a5, jint a6)
: object<java::sql::Timestamp>(
	call_new_object<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(0),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1, a2, a3, a4, a5, a6)
)
{
}



java::sql::Timestamp::Timestamp(jlong a0)
: object<java::sql::Timestamp>(
	call_new_object<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(1),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}


jboolean java::sql::Timestamp::after(local_ref< java::sql::Timestamp > const &a0)
{
	return call_method<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(2),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::sql::Timestamp::before(local_ref< java::sql::Timestamp > const &a0)
{
	return call_method<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(3),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(get_jobject(), a0);
}

jint java::sql::Timestamp::compareTo(local_ref< java::util::Date > const &a0)
{
	return call_method<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(4),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject(), a0);
}

jint java::sql::Timestamp::compareTo(local_ref< java::sql::Timestamp > const &a0)
{
	return call_method<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(5),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(5), 
		jint
	>(get_jobject(), a0);
}

jboolean java::sql::Timestamp::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(6),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(6), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::sql::Timestamp::equals(local_ref< java::sql::Timestamp > const &a0)
{
	return call_method<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(7),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject(), a0);
}

jint java::sql::Timestamp::getNanos()
{
	return call_method<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(8),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}

jlong java::sql::Timestamp::getTime()
{
	return call_method<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(9),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(9), 
		jlong
	>(get_jobject());
}

void java::sql::Timestamp::setNanos(jint a0)
{
	return call_method<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(10),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject(), a0);
}

void java::sql::Timestamp::setTime(jlong a0)
{
	return call_method<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(11),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::sql::Timestamp::toString()
{
	return call_method<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(12),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(12), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::sql::Timestamp > java::sql::Timestamp::valueOf(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(13),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(13), 
		local_ref< java::sql::Timestamp >
	>(a0);
}

jint java::sql::Timestamp::compareTo(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::sql::Timestamp::J2CPP_CLASS_NAME,
		java::sql::Timestamp::J2CPP_METHOD_NAME(14),
		java::sql::Timestamp::J2CPP_METHOD_SIGNATURE(14), 
		jint
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::sql::Timestamp,"java/sql/Timestamp")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,0,"<init>","(IIIIIII)V")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,1,"<init>","(J)V")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,2,"after","(Ljava/sql/Timestamp;)Z")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,3,"before","(Ljava/sql/Timestamp;)Z")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,4,"compareTo","(Ljava/util/Date;)I")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,5,"compareTo","(Ljava/sql/Timestamp;)I")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,6,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,7,"equals","(Ljava/sql/Timestamp;)Z")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,8,"getNanos","()I")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,9,"getTime","()J")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,10,"setNanos","(I)V")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,11,"setTime","(J)V")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,12,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,13,"valueOf","(Ljava/lang/String;)Ljava/sql/Timestamp;")
J2CPP_DEFINE_METHOD(java::sql::Timestamp,14,"compareTo","(Ljava/lang/Object;)I")

} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_TIMESTAMP_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

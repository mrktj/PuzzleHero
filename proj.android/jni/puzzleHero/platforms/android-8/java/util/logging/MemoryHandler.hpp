/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.logging.MemoryHandler
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_MEMORYHANDLER_HPP_DECL
#define J2CPP_JAVA_UTIL_LOGGING_MEMORYHANDLER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { namespace logging { class Level; } } } }
namespace j2cpp { namespace java { namespace util { namespace logging { class LogRecord; } } } }
namespace j2cpp { namespace java { namespace util { namespace logging { class Handler; } } } }


#include <java/lang/Object.hpp>
#include <java/util/logging/Handler.hpp>
#include <java/util/logging/Level.hpp>
#include <java/util/logging/LogRecord.hpp>


namespace j2cpp {

namespace java { namespace util { namespace logging {

	class MemoryHandler;
	class MemoryHandler
		: public object<MemoryHandler>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit MemoryHandler(jobject jobj)
		: object<MemoryHandler>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::util::logging::Handler>() const;


		MemoryHandler();
		MemoryHandler(local_ref< java::util::logging::Handler > const&, jint, local_ref< java::util::logging::Level > const&);
		void close();
		void flush();
		void publish(local_ref< java::util::logging::LogRecord >  const&);
		local_ref< java::util::logging::Level > getPushLevel();
		jboolean isLoggable(local_ref< java::util::logging::LogRecord >  const&);
		void push();
		void setPushLevel(local_ref< java::util::logging::Level >  const&);
	}; //class MemoryHandler

} //namespace logging
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_MEMORYHANDLER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_MEMORYHANDLER_HPP_IMPL
#define J2CPP_JAVA_UTIL_LOGGING_MEMORYHANDLER_HPP_IMPL

namespace j2cpp {



java::util::logging::MemoryHandler::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::logging::MemoryHandler::operator local_ref<java::util::logging::Handler>() const
{
	return local_ref<java::util::logging::Handler>(get_jobject());
}


java::util::logging::MemoryHandler::MemoryHandler()
: object<java::util::logging::MemoryHandler>(
	call_new_object<
		java::util::logging::MemoryHandler::J2CPP_CLASS_NAME,
		java::util::logging::MemoryHandler::J2CPP_METHOD_NAME(0),
		java::util::logging::MemoryHandler::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}



java::util::logging::MemoryHandler::MemoryHandler(local_ref< java::util::logging::Handler > const &a0, jint a1, local_ref< java::util::logging::Level > const &a2)
: object<java::util::logging::MemoryHandler>(
	call_new_object<
		java::util::logging::MemoryHandler::J2CPP_CLASS_NAME,
		java::util::logging::MemoryHandler::J2CPP_METHOD_NAME(1),
		java::util::logging::MemoryHandler::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1, a2)
)
{
}


void java::util::logging::MemoryHandler::close()
{
	return call_method<
		java::util::logging::MemoryHandler::J2CPP_CLASS_NAME,
		java::util::logging::MemoryHandler::J2CPP_METHOD_NAME(2),
		java::util::logging::MemoryHandler::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject());
}

void java::util::logging::MemoryHandler::flush()
{
	return call_method<
		java::util::logging::MemoryHandler::J2CPP_CLASS_NAME,
		java::util::logging::MemoryHandler::J2CPP_METHOD_NAME(3),
		java::util::logging::MemoryHandler::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject());
}

void java::util::logging::MemoryHandler::publish(local_ref< java::util::logging::LogRecord > const &a0)
{
	return call_method<
		java::util::logging::MemoryHandler::J2CPP_CLASS_NAME,
		java::util::logging::MemoryHandler::J2CPP_METHOD_NAME(4),
		java::util::logging::MemoryHandler::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}

local_ref< java::util::logging::Level > java::util::logging::MemoryHandler::getPushLevel()
{
	return call_method<
		java::util::logging::MemoryHandler::J2CPP_CLASS_NAME,
		java::util::logging::MemoryHandler::J2CPP_METHOD_NAME(5),
		java::util::logging::MemoryHandler::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::util::logging::Level >
	>(get_jobject());
}

jboolean java::util::logging::MemoryHandler::isLoggable(local_ref< java::util::logging::LogRecord > const &a0)
{
	return call_method<
		java::util::logging::MemoryHandler::J2CPP_CLASS_NAME,
		java::util::logging::MemoryHandler::J2CPP_METHOD_NAME(6),
		java::util::logging::MemoryHandler::J2CPP_METHOD_SIGNATURE(6), 
		jboolean
	>(get_jobject(), a0);
}

void java::util::logging::MemoryHandler::push()
{
	return call_method<
		java::util::logging::MemoryHandler::J2CPP_CLASS_NAME,
		java::util::logging::MemoryHandler::J2CPP_METHOD_NAME(7),
		java::util::logging::MemoryHandler::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject());
}

void java::util::logging::MemoryHandler::setPushLevel(local_ref< java::util::logging::Level > const &a0)
{
	return call_method<
		java::util::logging::MemoryHandler::J2CPP_CLASS_NAME,
		java::util::logging::MemoryHandler::J2CPP_METHOD_NAME(8),
		java::util::logging::MemoryHandler::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::util::logging::MemoryHandler,"java/util/logging/MemoryHandler")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,1,"<init>","(Ljava/util/logging/Handler;ILjava/util/logging/Level;)V")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,2,"close","()V")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,3,"flush","()V")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,4,"publish","(Ljava/util/logging/LogRecord;)V")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,5,"getPushLevel","()Ljava/util/logging/Level;")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,6,"isLoggable","(Ljava/util/logging/LogRecord;)Z")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,7,"push","()V")
J2CPP_DEFINE_METHOD(java::util::logging::MemoryHandler,8,"setPushLevel","(Ljava/util/logging/Level;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_MEMORYHANDLER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

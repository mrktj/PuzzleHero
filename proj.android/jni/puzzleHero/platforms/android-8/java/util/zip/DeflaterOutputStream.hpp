/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.zip.DeflaterOutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { namespace zip { class Deflater; } } } }
namespace j2cpp { namespace java { namespace io { class FilterOutputStream; } } }
namespace j2cpp { namespace java { namespace io { class Closeable; } } }
namespace j2cpp { namespace java { namespace io { class Flushable; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/Closeable.hpp>
#include <java/io/FilterOutputStream.hpp>
#include <java/io/Flushable.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/Object.hpp>
#include <java/util/zip/Deflater.hpp>


namespace j2cpp {

namespace java { namespace util { namespace zip {

	class DeflaterOutputStream;
	class DeflaterOutputStream
		: public object<DeflaterOutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		explicit DeflaterOutputStream(jobject jobj)
		: object<DeflaterOutputStream>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::FilterOutputStream>() const;
		operator local_ref<java::io::Closeable>() const;
		operator local_ref<java::io::Flushable>() const;
		operator local_ref<java::io::OutputStream>() const;


		DeflaterOutputStream(local_ref< java::io::OutputStream > const&, local_ref< java::util::zip::Deflater > const&);
		DeflaterOutputStream(local_ref< java::io::OutputStream > const&);
		DeflaterOutputStream(local_ref< java::io::OutputStream > const&, local_ref< java::util::zip::Deflater > const&, jint);
		void close();
		void finish();
		void write(jint);
		void write(local_ref< array<jbyte,1> >  const&, jint, jint);
		void flush();

	}; //class DeflaterOutputStream

} //namespace zip
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM_HPP_IMPL

namespace j2cpp {



java::util::zip::DeflaterOutputStream::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::zip::DeflaterOutputStream::operator local_ref<java::io::FilterOutputStream>() const
{
	return local_ref<java::io::FilterOutputStream>(get_jobject());
}

java::util::zip::DeflaterOutputStream::operator local_ref<java::io::Closeable>() const
{
	return local_ref<java::io::Closeable>(get_jobject());
}

java::util::zip::DeflaterOutputStream::operator local_ref<java::io::Flushable>() const
{
	return local_ref<java::io::Flushable>(get_jobject());
}

java::util::zip::DeflaterOutputStream::operator local_ref<java::io::OutputStream>() const
{
	return local_ref<java::io::OutputStream>(get_jobject());
}


java::util::zip::DeflaterOutputStream::DeflaterOutputStream(local_ref< java::io::OutputStream > const &a0, local_ref< java::util::zip::Deflater > const &a1)
: object<java::util::zip::DeflaterOutputStream>(
	call_new_object<
		java::util::zip::DeflaterOutputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_NAME(0),
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1)
)
{
}



java::util::zip::DeflaterOutputStream::DeflaterOutputStream(local_ref< java::io::OutputStream > const &a0)
: object<java::util::zip::DeflaterOutputStream>(
	call_new_object<
		java::util::zip::DeflaterOutputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_NAME(1),
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}



java::util::zip::DeflaterOutputStream::DeflaterOutputStream(local_ref< java::io::OutputStream > const &a0, local_ref< java::util::zip::Deflater > const &a1, jint a2)
: object<java::util::zip::DeflaterOutputStream>(
	call_new_object<
		java::util::zip::DeflaterOutputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_NAME(2),
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_SIGNATURE(2)
	>(a0, a1, a2)
)
{
}



void java::util::zip::DeflaterOutputStream::close()
{
	return call_method<
		java::util::zip::DeflaterOutputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_NAME(4),
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject());
}

void java::util::zip::DeflaterOutputStream::finish()
{
	return call_method<
		java::util::zip::DeflaterOutputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_NAME(5),
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject());
}

void java::util::zip::DeflaterOutputStream::write(jint a0)
{
	return call_method<
		java::util::zip::DeflaterOutputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_NAME(6),
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject(), a0);
}

void java::util::zip::DeflaterOutputStream::write(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::util::zip::DeflaterOutputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_NAME(7),
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0, a1, a2);
}

void java::util::zip::DeflaterOutputStream::flush()
{
	return call_method<
		java::util::zip::DeflaterOutputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_NAME(8),
		java::util::zip::DeflaterOutputStream::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject());
}



J2CPP_DEFINE_CLASS(java::util::zip::DeflaterOutputStream,"java/util/zip/DeflaterOutputStream")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterOutputStream,0,"<init>","(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)V")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterOutputStream,1,"<init>","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterOutputStream,2,"<init>","(Ljava/io/OutputStream;Ljava/util/zip/Deflater;I)V")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterOutputStream,3,"deflate","()V")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterOutputStream,4,"close","()V")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterOutputStream,5,"finish","()V")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterOutputStream,6,"write","(I)V")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterOutputStream,7,"write","([BII)V")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterOutputStream,8,"flush","()V")
J2CPP_DEFINE_FIELD(java::util::zip::DeflaterOutputStream,0,"buf","[B")
J2CPP_DEFINE_FIELD(java::util::zip::DeflaterOutputStream,1,"def","Ljava/util/zip/Deflater;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_DEFLATEROUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

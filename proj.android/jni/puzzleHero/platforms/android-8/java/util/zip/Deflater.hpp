/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.zip.Deflater
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_DEFLATER_HPP_DECL
#define J2CPP_JAVA_UTIL_ZIP_DEFLATER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace util { namespace zip {

	class Deflater;
	class Deflater
		: public object<Deflater>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)

		explicit Deflater(jobject jobj)
		: object<Deflater>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		Deflater();
		Deflater(jint);
		Deflater(jint, jboolean);
		jint deflate(local_ref< array<jbyte,1> >  const&);
		jint deflate(local_ref< array<jbyte,1> >  const&, jint, jint);
		void end();
		void finish();
		jboolean finished();
		jint getAdler();
		jint getTotalIn();
		jint getTotalOut();
		jboolean needsInput();
		void reset();
		void setDictionary(local_ref< array<jbyte,1> >  const&);
		void setDictionary(local_ref< array<jbyte,1> >  const&, jint, jint);
		void setInput(local_ref< array<jbyte,1> >  const&);
		void setInput(local_ref< array<jbyte,1> >  const&, jint, jint);
		void setLevel(jint);
		void setStrategy(jint);
		jlong getBytesRead();
		jlong getBytesWritten();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > BEST_COMPRESSION;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > BEST_SPEED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > DEFAULT_COMPRESSION;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > DEFAULT_STRATEGY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), jint > DEFLATED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), jint > FILTERED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), jint > HUFFMAN_ONLY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), jint > NO_COMPRESSION;
	}; //class Deflater

} //namespace zip
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_DEFLATER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_DEFLATER_HPP_IMPL
#define J2CPP_JAVA_UTIL_ZIP_DEFLATER_HPP_IMPL

namespace j2cpp {



java::util::zip::Deflater::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::util::zip::Deflater::Deflater()
: object<java::util::zip::Deflater>(
	call_new_object<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(0),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}



java::util::zip::Deflater::Deflater(jint a0)
: object<java::util::zip::Deflater>(
	call_new_object<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(1),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}



java::util::zip::Deflater::Deflater(jint a0, jboolean a1)
: object<java::util::zip::Deflater>(
	call_new_object<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(2),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(2)
	>(a0, a1)
)
{
}


jint java::util::zip::Deflater::deflate(local_ref< array<jbyte,1> > const &a0)
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(3),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(get_jobject(), a0);
}

jint java::util::zip::Deflater::deflate(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(4),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject(), a0, a1, a2);
}

void java::util::zip::Deflater::end()
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(5),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject());
}


void java::util::zip::Deflater::finish()
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(7),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject());
}

jboolean java::util::zip::Deflater::finished()
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(8),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(8), 
		jboolean
	>(get_jobject());
}

jint java::util::zip::Deflater::getAdler()
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(9),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(9), 
		jint
	>(get_jobject());
}

jint java::util::zip::Deflater::getTotalIn()
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(10),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(10), 
		jint
	>(get_jobject());
}

jint java::util::zip::Deflater::getTotalOut()
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(11),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(11), 
		jint
	>(get_jobject());
}

jboolean java::util::zip::Deflater::needsInput()
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(12),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(12), 
		jboolean
	>(get_jobject());
}

void java::util::zip::Deflater::reset()
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(13),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject());
}

void java::util::zip::Deflater::setDictionary(local_ref< array<jbyte,1> > const &a0)
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(14),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(14), 
		void
	>(get_jobject(), a0);
}

void java::util::zip::Deflater::setDictionary(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(15),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(15), 
		void
	>(get_jobject(), a0, a1, a2);
}

void java::util::zip::Deflater::setInput(local_ref< array<jbyte,1> > const &a0)
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(16),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(16), 
		void
	>(get_jobject(), a0);
}

void java::util::zip::Deflater::setInput(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(17),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(17), 
		void
	>(get_jobject(), a0, a1, a2);
}

void java::util::zip::Deflater::setLevel(jint a0)
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(18),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(18), 
		void
	>(get_jobject(), a0);
}

void java::util::zip::Deflater::setStrategy(jint a0)
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(19),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(19), 
		void
	>(get_jobject(), a0);
}

jlong java::util::zip::Deflater::getBytesRead()
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(20),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(20), 
		jlong
	>(get_jobject());
}

jlong java::util::zip::Deflater::getBytesWritten()
{
	return call_method<
		java::util::zip::Deflater::J2CPP_CLASS_NAME,
		java::util::zip::Deflater::J2CPP_METHOD_NAME(21),
		java::util::zip::Deflater::J2CPP_METHOD_SIGNATURE(21), 
		jlong
	>(get_jobject());
}


static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(0),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(0),
	jint
> java::util::zip::Deflater::BEST_COMPRESSION;

static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(1),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(1),
	jint
> java::util::zip::Deflater::BEST_SPEED;

static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(2),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(2),
	jint
> java::util::zip::Deflater::DEFAULT_COMPRESSION;

static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(3),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(3),
	jint
> java::util::zip::Deflater::DEFAULT_STRATEGY;

static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(4),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(4),
	jint
> java::util::zip::Deflater::DEFLATED;

static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(5),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(5),
	jint
> java::util::zip::Deflater::FILTERED;

static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(6),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(6),
	jint
> java::util::zip::Deflater::HUFFMAN_ONLY;

static_field<
	java::util::zip::Deflater::J2CPP_CLASS_NAME,
	java::util::zip::Deflater::J2CPP_FIELD_NAME(7),
	java::util::zip::Deflater::J2CPP_FIELD_SIGNATURE(7),
	jint
> java::util::zip::Deflater::NO_COMPRESSION;


J2CPP_DEFINE_CLASS(java::util::zip::Deflater,"java/util/zip/Deflater")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,2,"<init>","(IZ)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,3,"deflate","([B)I")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,4,"deflate","([BII)I")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,5,"end","()V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,6,"finalize","()V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,7,"finish","()V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,8,"finished","()Z")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,9,"getAdler","()I")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,10,"getTotalIn","()I")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,11,"getTotalOut","()I")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,12,"needsInput","()Z")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,13,"reset","()V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,14,"setDictionary","([B)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,15,"setDictionary","([BII)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,16,"setInput","([B)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,17,"setInput","([BII)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,18,"setLevel","(I)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,19,"setStrategy","(I)V")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,20,"getBytesRead","()J")
J2CPP_DEFINE_METHOD(java::util::zip::Deflater,21,"getBytesWritten","()J")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,0,"BEST_COMPRESSION","I")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,1,"BEST_SPEED","I")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,2,"DEFAULT_COMPRESSION","I")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,3,"DEFAULT_STRATEGY","I")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,4,"DEFLATED","I")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,5,"FILTERED","I")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,6,"HUFFMAN_ONLY","I")
J2CPP_DEFINE_FIELD(java::util::zip::Deflater,7,"NO_COMPRESSION","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_DEFLATER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

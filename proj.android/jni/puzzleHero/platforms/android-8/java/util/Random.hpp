/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.Random
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_RANDOM_HPP_DECL
#define J2CPP_JAVA_UTIL_RANDOM_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace util {

	class Random;
	class Random
		: public object<Random>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)

		explicit Random(jobject jobj)
		: object<Random>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		Random();
		Random(jlong);
		jboolean nextBoolean();
		void nextBytes(local_ref< array<jbyte,1> >  const&);
		jdouble nextDouble();
		jfloat nextFloat();
		jdouble nextGaussian();
		jint nextInt();
		jint nextInt(jint);
		jlong nextLong();
		void setSeed(jlong);
	}; //class Random

} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_RANDOM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_RANDOM_HPP_IMPL
#define J2CPP_JAVA_UTIL_RANDOM_HPP_IMPL

namespace j2cpp {



java::util::Random::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::Random::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


java::util::Random::Random()
: object<java::util::Random>(
	call_new_object<
		java::util::Random::J2CPP_CLASS_NAME,
		java::util::Random::J2CPP_METHOD_NAME(0),
		java::util::Random::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}



java::util::Random::Random(jlong a0)
: object<java::util::Random>(
	call_new_object<
		java::util::Random::J2CPP_CLASS_NAME,
		java::util::Random::J2CPP_METHOD_NAME(1),
		java::util::Random::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}



jboolean java::util::Random::nextBoolean()
{
	return call_method<
		java::util::Random::J2CPP_CLASS_NAME,
		java::util::Random::J2CPP_METHOD_NAME(3),
		java::util::Random::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(get_jobject());
}

void java::util::Random::nextBytes(local_ref< array<jbyte,1> > const &a0)
{
	return call_method<
		java::util::Random::J2CPP_CLASS_NAME,
		java::util::Random::J2CPP_METHOD_NAME(4),
		java::util::Random::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}

jdouble java::util::Random::nextDouble()
{
	return call_method<
		java::util::Random::J2CPP_CLASS_NAME,
		java::util::Random::J2CPP_METHOD_NAME(5),
		java::util::Random::J2CPP_METHOD_SIGNATURE(5), 
		jdouble
	>(get_jobject());
}

jfloat java::util::Random::nextFloat()
{
	return call_method<
		java::util::Random::J2CPP_CLASS_NAME,
		java::util::Random::J2CPP_METHOD_NAME(6),
		java::util::Random::J2CPP_METHOD_SIGNATURE(6), 
		jfloat
	>(get_jobject());
}

jdouble java::util::Random::nextGaussian()
{
	return call_method<
		java::util::Random::J2CPP_CLASS_NAME,
		java::util::Random::J2CPP_METHOD_NAME(7),
		java::util::Random::J2CPP_METHOD_SIGNATURE(7), 
		jdouble
	>(get_jobject());
}

jint java::util::Random::nextInt()
{
	return call_method<
		java::util::Random::J2CPP_CLASS_NAME,
		java::util::Random::J2CPP_METHOD_NAME(8),
		java::util::Random::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}

jint java::util::Random::nextInt(jint a0)
{
	return call_method<
		java::util::Random::J2CPP_CLASS_NAME,
		java::util::Random::J2CPP_METHOD_NAME(9),
		java::util::Random::J2CPP_METHOD_SIGNATURE(9), 
		jint
	>(get_jobject(), a0);
}

jlong java::util::Random::nextLong()
{
	return call_method<
		java::util::Random::J2CPP_CLASS_NAME,
		java::util::Random::J2CPP_METHOD_NAME(10),
		java::util::Random::J2CPP_METHOD_SIGNATURE(10), 
		jlong
	>(get_jobject());
}

void java::util::Random::setSeed(jlong a0)
{
	return call_method<
		java::util::Random::J2CPP_CLASS_NAME,
		java::util::Random::J2CPP_METHOD_NAME(11),
		java::util::Random::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::util::Random,"java/util/Random")
J2CPP_DEFINE_METHOD(java::util::Random,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::Random,1,"<init>","(J)V")
J2CPP_DEFINE_METHOD(java::util::Random,2,"next","(I)I")
J2CPP_DEFINE_METHOD(java::util::Random,3,"nextBoolean","()Z")
J2CPP_DEFINE_METHOD(java::util::Random,4,"nextBytes","([B)V")
J2CPP_DEFINE_METHOD(java::util::Random,5,"nextDouble","()D")
J2CPP_DEFINE_METHOD(java::util::Random,6,"nextFloat","()F")
J2CPP_DEFINE_METHOD(java::util::Random,7,"nextGaussian","()D")
J2CPP_DEFINE_METHOD(java::util::Random,8,"nextInt","()I")
J2CPP_DEFINE_METHOD(java::util::Random,9,"nextInt","(I)I")
J2CPP_DEFINE_METHOD(java::util::Random,10,"nextLong","()J")
J2CPP_DEFINE_METHOD(java::util::Random,11,"setSeed","(J)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_RANDOM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

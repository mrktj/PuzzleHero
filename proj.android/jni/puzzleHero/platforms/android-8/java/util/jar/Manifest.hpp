/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.jar.Manifest
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_JAR_MANIFEST_HPP_DECL
#define J2CPP_JAVA_UTIL_JAR_MANIFEST_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Cloneable; } } }
namespace j2cpp { namespace java { namespace util { class Map; } } }
namespace j2cpp { namespace java { namespace util { namespace jar { class Attributes; } } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/InputStream.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/Cloneable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Map.hpp>
#include <java/util/jar/Attributes.hpp>


namespace j2cpp {

namespace java { namespace util { namespace jar {

	class Manifest;
	class Manifest
		: public object<Manifest>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)

		explicit Manifest(jobject jobj)
		: object<Manifest>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Cloneable>() const;


		Manifest();
		Manifest(local_ref< java::io::InputStream > const&);
		Manifest(local_ref< java::util::jar::Manifest > const&);
		void clear();
		local_ref< java::util::jar::Attributes > getAttributes(local_ref< java::lang::String >  const&);
		local_ref< java::util::Map > getEntries();
		local_ref< java::util::jar::Attributes > getMainAttributes();
		local_ref< java::lang::Object > clone();
		void write(local_ref< java::io::OutputStream >  const&);
		void read(local_ref< java::io::InputStream >  const&);
		jint hashCode();
		jboolean equals(local_ref< java::lang::Object >  const&);
	}; //class Manifest

} //namespace jar
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_JAR_MANIFEST_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_JAR_MANIFEST_HPP_IMPL
#define J2CPP_JAVA_UTIL_JAR_MANIFEST_HPP_IMPL

namespace j2cpp {



java::util::jar::Manifest::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::jar::Manifest::operator local_ref<java::lang::Cloneable>() const
{
	return local_ref<java::lang::Cloneable>(get_jobject());
}


java::util::jar::Manifest::Manifest()
: object<java::util::jar::Manifest>(
	call_new_object<
		java::util::jar::Manifest::J2CPP_CLASS_NAME,
		java::util::jar::Manifest::J2CPP_METHOD_NAME(0),
		java::util::jar::Manifest::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}



java::util::jar::Manifest::Manifest(local_ref< java::io::InputStream > const &a0)
: object<java::util::jar::Manifest>(
	call_new_object<
		java::util::jar::Manifest::J2CPP_CLASS_NAME,
		java::util::jar::Manifest::J2CPP_METHOD_NAME(1),
		java::util::jar::Manifest::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}



java::util::jar::Manifest::Manifest(local_ref< java::util::jar::Manifest > const &a0)
: object<java::util::jar::Manifest>(
	call_new_object<
		java::util::jar::Manifest::J2CPP_CLASS_NAME,
		java::util::jar::Manifest::J2CPP_METHOD_NAME(2),
		java::util::jar::Manifest::J2CPP_METHOD_SIGNATURE(2)
	>(a0)
)
{
}


void java::util::jar::Manifest::clear()
{
	return call_method<
		java::util::jar::Manifest::J2CPP_CLASS_NAME,
		java::util::jar::Manifest::J2CPP_METHOD_NAME(3),
		java::util::jar::Manifest::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject());
}

local_ref< java::util::jar::Attributes > java::util::jar::Manifest::getAttributes(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::util::jar::Manifest::J2CPP_CLASS_NAME,
		java::util::jar::Manifest::J2CPP_METHOD_NAME(4),
		java::util::jar::Manifest::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::util::jar::Attributes >
	>(get_jobject(), a0);
}

local_ref< java::util::Map > java::util::jar::Manifest::getEntries()
{
	return call_method<
		java::util::jar::Manifest::J2CPP_CLASS_NAME,
		java::util::jar::Manifest::J2CPP_METHOD_NAME(5),
		java::util::jar::Manifest::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::util::Map >
	>(get_jobject());
}

local_ref< java::util::jar::Attributes > java::util::jar::Manifest::getMainAttributes()
{
	return call_method<
		java::util::jar::Manifest::J2CPP_CLASS_NAME,
		java::util::jar::Manifest::J2CPP_METHOD_NAME(6),
		java::util::jar::Manifest::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::util::jar::Attributes >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::jar::Manifest::clone()
{
	return call_method<
		java::util::jar::Manifest::J2CPP_CLASS_NAME,
		java::util::jar::Manifest::J2CPP_METHOD_NAME(7),
		java::util::jar::Manifest::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

void java::util::jar::Manifest::write(local_ref< java::io::OutputStream > const &a0)
{
	return call_method<
		java::util::jar::Manifest::J2CPP_CLASS_NAME,
		java::util::jar::Manifest::J2CPP_METHOD_NAME(8),
		java::util::jar::Manifest::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}

void java::util::jar::Manifest::read(local_ref< java::io::InputStream > const &a0)
{
	return call_method<
		java::util::jar::Manifest::J2CPP_CLASS_NAME,
		java::util::jar::Manifest::J2CPP_METHOD_NAME(9),
		java::util::jar::Manifest::J2CPP_METHOD_SIGNATURE(9), 
		void
	>(get_jobject(), a0);
}

jint java::util::jar::Manifest::hashCode()
{
	return call_method<
		java::util::jar::Manifest::J2CPP_CLASS_NAME,
		java::util::jar::Manifest::J2CPP_METHOD_NAME(10),
		java::util::jar::Manifest::J2CPP_METHOD_SIGNATURE(10), 
		jint
	>(get_jobject());
}

jboolean java::util::jar::Manifest::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::jar::Manifest::J2CPP_CLASS_NAME,
		java::util::jar::Manifest::J2CPP_METHOD_NAME(11),
		java::util::jar::Manifest::J2CPP_METHOD_SIGNATURE(11), 
		jboolean
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::util::jar::Manifest,"java/util/jar/Manifest")
J2CPP_DEFINE_METHOD(java::util::jar::Manifest,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::jar::Manifest,1,"<init>","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::util::jar::Manifest,2,"<init>","(Ljava/util/jar/Manifest;)V")
J2CPP_DEFINE_METHOD(java::util::jar::Manifest,3,"clear","()V")
J2CPP_DEFINE_METHOD(java::util::jar::Manifest,4,"getAttributes","(Ljava/lang/String;)Ljava/util/jar/Attributes;")
J2CPP_DEFINE_METHOD(java::util::jar::Manifest,5,"getEntries","()Ljava/util/Map;")
J2CPP_DEFINE_METHOD(java::util::jar::Manifest,6,"getMainAttributes","()Ljava/util/jar/Attributes;")
J2CPP_DEFINE_METHOD(java::util::jar::Manifest,7,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::jar::Manifest,8,"write","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(java::util::jar::Manifest,9,"read","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::util::jar::Manifest,10,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::util::jar::Manifest,11,"equals","(Ljava/lang/Object;)Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_JAR_MANIFEST_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

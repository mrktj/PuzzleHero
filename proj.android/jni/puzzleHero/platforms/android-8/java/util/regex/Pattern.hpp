/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.regex.Pattern
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_REGEX_PATTERN_HPP_DECL
#define J2CPP_JAVA_UTIL_REGEX_PATTERN_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { namespace regex { class Matcher; } } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/regex/Matcher.hpp>


namespace j2cpp {

namespace java { namespace util { namespace regex {

	class Pattern;
	class Pattern
		: public object<Pattern>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)

		explicit Pattern(jobject jobj)
		: object<Pattern>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		local_ref< java::util::regex::Matcher > matcher(local_ref< java::lang::CharSequence >  const&);
		local_ref< array< local_ref< java::lang::String >, 1> > split(local_ref< java::lang::CharSequence >  const&, jint);
		local_ref< array< local_ref< java::lang::String >, 1> > split(local_ref< java::lang::CharSequence >  const&);
		local_ref< java::lang::String > pattern();
		local_ref< java::lang::String > toString();
		jint flags();
		static local_ref< java::util::regex::Pattern > compile(local_ref< java::lang::String >  const&, jint);
		static local_ref< java::util::regex::Pattern > compile(local_ref< java::lang::String >  const&);
		static jboolean matches(local_ref< java::lang::String >  const&, local_ref< java::lang::CharSequence >  const&);
		static local_ref< java::lang::String > quote(local_ref< java::lang::String >  const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > UNIX_LINES;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > CASE_INSENSITIVE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > COMMENTS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > MULTILINE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), jint > LITERAL;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), jint > DOTALL;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), jint > UNICODE_CASE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), jint > CANON_EQ;
	}; //class Pattern

} //namespace regex
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_REGEX_PATTERN_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_REGEX_PATTERN_HPP_IMPL
#define J2CPP_JAVA_UTIL_REGEX_PATTERN_HPP_IMPL

namespace j2cpp {



java::util::regex::Pattern::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::regex::Pattern::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


local_ref< java::util::regex::Matcher > java::util::regex::Pattern::matcher(local_ref< java::lang::CharSequence > const &a0)
{
	return call_method<
		java::util::regex::Pattern::J2CPP_CLASS_NAME,
		java::util::regex::Pattern::J2CPP_METHOD_NAME(1),
		java::util::regex::Pattern::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::util::regex::Matcher >
	>(get_jobject(), a0);
}

local_ref< array< local_ref< java::lang::String >, 1> > java::util::regex::Pattern::split(local_ref< java::lang::CharSequence > const &a0, jint a1)
{
	return call_method<
		java::util::regex::Pattern::J2CPP_CLASS_NAME,
		java::util::regex::Pattern::J2CPP_METHOD_NAME(2),
		java::util::regex::Pattern::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(get_jobject(), a0, a1);
}

local_ref< array< local_ref< java::lang::String >, 1> > java::util::regex::Pattern::split(local_ref< java::lang::CharSequence > const &a0)
{
	return call_method<
		java::util::regex::Pattern::J2CPP_CLASS_NAME,
		java::util::regex::Pattern::J2CPP_METHOD_NAME(3),
		java::util::regex::Pattern::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::util::regex::Pattern::pattern()
{
	return call_method<
		java::util::regex::Pattern::J2CPP_CLASS_NAME,
		java::util::regex::Pattern::J2CPP_METHOD_NAME(4),
		java::util::regex::Pattern::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::util::regex::Pattern::toString()
{
	return call_method<
		java::util::regex::Pattern::J2CPP_CLASS_NAME,
		java::util::regex::Pattern::J2CPP_METHOD_NAME(5),
		java::util::regex::Pattern::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint java::util::regex::Pattern::flags()
{
	return call_method<
		java::util::regex::Pattern::J2CPP_CLASS_NAME,
		java::util::regex::Pattern::J2CPP_METHOD_NAME(6),
		java::util::regex::Pattern::J2CPP_METHOD_SIGNATURE(6), 
		jint
	>(get_jobject());
}

local_ref< java::util::regex::Pattern > java::util::regex::Pattern::compile(local_ref< java::lang::String > const &a0, jint a1)
{
	return call_static_method<
		java::util::regex::Pattern::J2CPP_CLASS_NAME,
		java::util::regex::Pattern::J2CPP_METHOD_NAME(7),
		java::util::regex::Pattern::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::util::regex::Pattern >
	>(a0, a1);
}

local_ref< java::util::regex::Pattern > java::util::regex::Pattern::compile(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		java::util::regex::Pattern::J2CPP_CLASS_NAME,
		java::util::regex::Pattern::J2CPP_METHOD_NAME(8),
		java::util::regex::Pattern::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::util::regex::Pattern >
	>(a0);
}

jboolean java::util::regex::Pattern::matches(local_ref< java::lang::String > const &a0, local_ref< java::lang::CharSequence > const &a1)
{
	return call_static_method<
		java::util::regex::Pattern::J2CPP_CLASS_NAME,
		java::util::regex::Pattern::J2CPP_METHOD_NAME(9),
		java::util::regex::Pattern::J2CPP_METHOD_SIGNATURE(9), 
		jboolean
	>(a0, a1);
}

local_ref< java::lang::String > java::util::regex::Pattern::quote(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		java::util::regex::Pattern::J2CPP_CLASS_NAME,
		java::util::regex::Pattern::J2CPP_METHOD_NAME(10),
		java::util::regex::Pattern::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::lang::String >
	>(a0);
}



static_field<
	java::util::regex::Pattern::J2CPP_CLASS_NAME,
	java::util::regex::Pattern::J2CPP_FIELD_NAME(0),
	java::util::regex::Pattern::J2CPP_FIELD_SIGNATURE(0),
	jint
> java::util::regex::Pattern::UNIX_LINES;

static_field<
	java::util::regex::Pattern::J2CPP_CLASS_NAME,
	java::util::regex::Pattern::J2CPP_FIELD_NAME(1),
	java::util::regex::Pattern::J2CPP_FIELD_SIGNATURE(1),
	jint
> java::util::regex::Pattern::CASE_INSENSITIVE;

static_field<
	java::util::regex::Pattern::J2CPP_CLASS_NAME,
	java::util::regex::Pattern::J2CPP_FIELD_NAME(2),
	java::util::regex::Pattern::J2CPP_FIELD_SIGNATURE(2),
	jint
> java::util::regex::Pattern::COMMENTS;

static_field<
	java::util::regex::Pattern::J2CPP_CLASS_NAME,
	java::util::regex::Pattern::J2CPP_FIELD_NAME(3),
	java::util::regex::Pattern::J2CPP_FIELD_SIGNATURE(3),
	jint
> java::util::regex::Pattern::MULTILINE;

static_field<
	java::util::regex::Pattern::J2CPP_CLASS_NAME,
	java::util::regex::Pattern::J2CPP_FIELD_NAME(4),
	java::util::regex::Pattern::J2CPP_FIELD_SIGNATURE(4),
	jint
> java::util::regex::Pattern::LITERAL;

static_field<
	java::util::regex::Pattern::J2CPP_CLASS_NAME,
	java::util::regex::Pattern::J2CPP_FIELD_NAME(5),
	java::util::regex::Pattern::J2CPP_FIELD_SIGNATURE(5),
	jint
> java::util::regex::Pattern::DOTALL;

static_field<
	java::util::regex::Pattern::J2CPP_CLASS_NAME,
	java::util::regex::Pattern::J2CPP_FIELD_NAME(6),
	java::util::regex::Pattern::J2CPP_FIELD_SIGNATURE(6),
	jint
> java::util::regex::Pattern::UNICODE_CASE;

static_field<
	java::util::regex::Pattern::J2CPP_CLASS_NAME,
	java::util::regex::Pattern::J2CPP_FIELD_NAME(7),
	java::util::regex::Pattern::J2CPP_FIELD_SIGNATURE(7),
	jint
> java::util::regex::Pattern::CANON_EQ;


J2CPP_DEFINE_CLASS(java::util::regex::Pattern,"java/util/regex/Pattern")
J2CPP_DEFINE_METHOD(java::util::regex::Pattern,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::regex::Pattern,1,"matcher","(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;")
J2CPP_DEFINE_METHOD(java::util::regex::Pattern,2,"split","(Ljava/lang/CharSequence;I)[java.lang.String")
J2CPP_DEFINE_METHOD(java::util::regex::Pattern,3,"split","(Ljava/lang/CharSequence;)[java.lang.String")
J2CPP_DEFINE_METHOD(java::util::regex::Pattern,4,"pattern","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::regex::Pattern,5,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::regex::Pattern,6,"flags","()I")
J2CPP_DEFINE_METHOD(java::util::regex::Pattern,7,"compile","(Ljava/lang/String;I)Ljava/util/regex/Pattern;")
J2CPP_DEFINE_METHOD(java::util::regex::Pattern,8,"compile","(Ljava/lang/String;)Ljava/util/regex/Pattern;")
J2CPP_DEFINE_METHOD(java::util::regex::Pattern,9,"matches","(Ljava/lang/String;Ljava/lang/CharSequence;)Z")
J2CPP_DEFINE_METHOD(java::util::regex::Pattern,10,"quote","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::regex::Pattern,11,"finalize","()V")
J2CPP_DEFINE_FIELD(java::util::regex::Pattern,0,"UNIX_LINES","I")
J2CPP_DEFINE_FIELD(java::util::regex::Pattern,1,"CASE_INSENSITIVE","I")
J2CPP_DEFINE_FIELD(java::util::regex::Pattern,2,"COMMENTS","I")
J2CPP_DEFINE_FIELD(java::util::regex::Pattern,3,"MULTILINE","I")
J2CPP_DEFINE_FIELD(java::util::regex::Pattern,4,"LITERAL","I")
J2CPP_DEFINE_FIELD(java::util::regex::Pattern,5,"DOTALL","I")
J2CPP_DEFINE_FIELD(java::util::regex::Pattern,6,"UNICODE_CASE","I")
J2CPP_DEFINE_FIELD(java::util::regex::Pattern,7,"CANON_EQ","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_REGEX_PATTERN_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

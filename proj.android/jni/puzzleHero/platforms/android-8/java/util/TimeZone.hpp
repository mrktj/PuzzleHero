/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.TimeZone
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_TIMEZONE_HPP_DECL
#define J2CPP_JAVA_UTIL_TIMEZONE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Cloneable; } } }
namespace j2cpp { namespace java { namespace util { class Locale; } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Cloneable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Date.hpp>
#include <java/util/Locale.hpp>


namespace j2cpp {

namespace java { namespace util {

	class TimeZone;
	class TimeZone
		: public object<TimeZone>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		explicit TimeZone(jobject jobj)
		: object<TimeZone>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Cloneable>() const;
		operator local_ref<java::io::Serializable>() const;


		TimeZone();
		local_ref< java::lang::Object > clone();
		static local_ref< array< local_ref< java::lang::String >, 1> > getAvailableIDs();
		static local_ref< array< local_ref< java::lang::String >, 1> > getAvailableIDs(jint);
		static local_ref< java::util::TimeZone > getDefault();
		local_ref< java::lang::String > getDisplayName();
		local_ref< java::lang::String > getDisplayName(local_ref< java::util::Locale >  const&);
		local_ref< java::lang::String > getDisplayName(jboolean, jint);
		local_ref< java::lang::String > getDisplayName(jboolean, jint, local_ref< java::util::Locale >  const&);
		local_ref< java::lang::String > getID();
		jint getDSTSavings();
		jint getOffset(jlong);
		jint getOffset(jint, jint, jint, jint, jint, jint);
		jint getRawOffset();
		static local_ref< java::util::TimeZone > getTimeZone(local_ref< java::lang::String >  const&);
		jboolean hasSameRules(local_ref< java::util::TimeZone >  const&);
		jboolean inDaylightTime(local_ref< java::util::Date >  const&);
		static void setDefault(local_ref< java::util::TimeZone >  const&);
		void setID(local_ref< java::lang::String >  const&);
		void setRawOffset(jint);
		jboolean useDaylightTime();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > SHORT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > LONG;
	}; //class TimeZone

} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_TIMEZONE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_TIMEZONE_HPP_IMPL
#define J2CPP_JAVA_UTIL_TIMEZONE_HPP_IMPL

namespace j2cpp {



java::util::TimeZone::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::TimeZone::operator local_ref<java::lang::Cloneable>() const
{
	return local_ref<java::lang::Cloneable>(get_jobject());
}

java::util::TimeZone::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


java::util::TimeZone::TimeZone()
: object<java::util::TimeZone>(
	call_new_object<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(0),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


local_ref< java::lang::Object > java::util::TimeZone::clone()
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(1),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::String >, 1> > java::util::TimeZone::getAvailableIDs()
{
	return call_static_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(2),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>();
}

local_ref< array< local_ref< java::lang::String >, 1> > java::util::TimeZone::getAvailableIDs(jint a0)
{
	return call_static_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(3),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(a0);
}

local_ref< java::util::TimeZone > java::util::TimeZone::getDefault()
{
	return call_static_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(4),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::util::TimeZone >
	>();
}

local_ref< java::lang::String > java::util::TimeZone::getDisplayName()
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(5),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::util::TimeZone::getDisplayName(local_ref< java::util::Locale > const &a0)
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(6),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::lang::String >
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::util::TimeZone::getDisplayName(jboolean a0, jint a1)
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(7),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::lang::String >
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::String > java::util::TimeZone::getDisplayName(jboolean a0, jint a1, local_ref< java::util::Locale > const &a2)
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(8),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::lang::String >
	>(get_jobject(), a0, a1, a2);
}

local_ref< java::lang::String > java::util::TimeZone::getID()
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(9),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint java::util::TimeZone::getDSTSavings()
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(10),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(10), 
		jint
	>(get_jobject());
}

jint java::util::TimeZone::getOffset(jlong a0)
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(11),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(11), 
		jint
	>(get_jobject(), a0);
}

jint java::util::TimeZone::getOffset(jint a0, jint a1, jint a2, jint a3, jint a4, jint a5)
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(12),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(12), 
		jint
	>(get_jobject(), a0, a1, a2, a3, a4, a5);
}

jint java::util::TimeZone::getRawOffset()
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(13),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(13), 
		jint
	>(get_jobject());
}

local_ref< java::util::TimeZone > java::util::TimeZone::getTimeZone(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(14),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(14), 
		local_ref< java::util::TimeZone >
	>(a0);
}

jboolean java::util::TimeZone::hasSameRules(local_ref< java::util::TimeZone > const &a0)
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(15),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(15), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::TimeZone::inDaylightTime(local_ref< java::util::Date > const &a0)
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(16),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(16), 
		jboolean
	>(get_jobject(), a0);
}

void java::util::TimeZone::setDefault(local_ref< java::util::TimeZone > const &a0)
{
	return call_static_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(17),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(17), 
		void
	>(a0);
}

void java::util::TimeZone::setID(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(18),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(18), 
		void
	>(get_jobject(), a0);
}

void java::util::TimeZone::setRawOffset(jint a0)
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(19),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(19), 
		void
	>(get_jobject(), a0);
}

jboolean java::util::TimeZone::useDaylightTime()
{
	return call_method<
		java::util::TimeZone::J2CPP_CLASS_NAME,
		java::util::TimeZone::J2CPP_METHOD_NAME(20),
		java::util::TimeZone::J2CPP_METHOD_SIGNATURE(20), 
		jboolean
	>(get_jobject());
}


static_field<
	java::util::TimeZone::J2CPP_CLASS_NAME,
	java::util::TimeZone::J2CPP_FIELD_NAME(0),
	java::util::TimeZone::J2CPP_FIELD_SIGNATURE(0),
	jint
> java::util::TimeZone::SHORT;

static_field<
	java::util::TimeZone::J2CPP_CLASS_NAME,
	java::util::TimeZone::J2CPP_FIELD_NAME(1),
	java::util::TimeZone::J2CPP_FIELD_SIGNATURE(1),
	jint
> java::util::TimeZone::LONG;


J2CPP_DEFINE_CLASS(java::util::TimeZone,"java/util/TimeZone")
J2CPP_DEFINE_METHOD(java::util::TimeZone,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::TimeZone,1,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::TimeZone,2,"getAvailableIDs","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::util::TimeZone,3,"getAvailableIDs","(I)[java.lang.String")
J2CPP_DEFINE_METHOD(java::util::TimeZone,4,"getDefault","()Ljava/util/TimeZone;")
J2CPP_DEFINE_METHOD(java::util::TimeZone,5,"getDisplayName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::TimeZone,6,"getDisplayName","(Ljava/util/Locale;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::TimeZone,7,"getDisplayName","(ZI)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::TimeZone,8,"getDisplayName","(ZILjava/util/Locale;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::TimeZone,9,"getID","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::TimeZone,10,"getDSTSavings","()I")
J2CPP_DEFINE_METHOD(java::util::TimeZone,11,"getOffset","(J)I")
J2CPP_DEFINE_METHOD(java::util::TimeZone,12,"getOffset","(IIIIII)I")
J2CPP_DEFINE_METHOD(java::util::TimeZone,13,"getRawOffset","()I")
J2CPP_DEFINE_METHOD(java::util::TimeZone,14,"getTimeZone","(Ljava/lang/String;)Ljava/util/TimeZone;")
J2CPP_DEFINE_METHOD(java::util::TimeZone,15,"hasSameRules","(Ljava/util/TimeZone;)Z")
J2CPP_DEFINE_METHOD(java::util::TimeZone,16,"inDaylightTime","(Ljava/util/Date;)Z")
J2CPP_DEFINE_METHOD(java::util::TimeZone,17,"setDefault","(Ljava/util/TimeZone;)V")
J2CPP_DEFINE_METHOD(java::util::TimeZone,18,"setID","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::TimeZone,19,"setRawOffset","(I)V")
J2CPP_DEFINE_METHOD(java::util::TimeZone,20,"useDaylightTime","()Z")
J2CPP_DEFINE_FIELD(java::util::TimeZone,0,"SHORT","I")
J2CPP_DEFINE_FIELD(java::util::TimeZone,1,"LONG","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_TIMEZONE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

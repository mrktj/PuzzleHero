/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.atomic.AtomicLong
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Number; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Number.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent { namespace atomic {

	class AtomicLong;
	class AtomicLong
		: public object<AtomicLong>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)

		explicit AtomicLong(jobject jobj)
		: object<AtomicLong>(jobj)
		{
		}

		operator local_ref<java::lang::Number>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		AtomicLong(jlong);
		AtomicLong();
		jlong get();
		void set(jlong);
		jlong getAndSet(jlong);
		jboolean compareAndSet(jlong, jlong);
		jboolean weakCompareAndSet(jlong, jlong);
		jlong getAndIncrement();
		jlong getAndDecrement();
		jlong getAndAdd(jlong);
		jlong incrementAndGet();
		jlong decrementAndGet();
		jlong addAndGet(jlong);
		local_ref< java::lang::String > toString();
		jint intValue();
		jlong longValue();
		jfloat floatValue();
		jdouble doubleValue();
	}; //class AtomicLong

} //namespace atomic
} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_HPP_IMPL

namespace j2cpp {



java::util::concurrent::atomic::AtomicLong::operator local_ref<java::lang::Number>() const
{
	return local_ref<java::lang::Number>(get_jobject());
}

java::util::concurrent::atomic::AtomicLong::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::concurrent::atomic::AtomicLong::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


java::util::concurrent::atomic::AtomicLong::AtomicLong(jlong a0)
: object<java::util::concurrent::atomic::AtomicLong>(
	call_new_object<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(0),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}



java::util::concurrent::atomic::AtomicLong::AtomicLong()
: object<java::util::concurrent::atomic::AtomicLong>(
	call_new_object<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(1),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(1)
	>()
)
{
}


jlong java::util::concurrent::atomic::AtomicLong::get()
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(2),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(2), 
		jlong
	>(get_jobject());
}

void java::util::concurrent::atomic::AtomicLong::set(jlong a0)
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(3),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0);
}

jlong java::util::concurrent::atomic::AtomicLong::getAndSet(jlong a0)
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(4),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(4), 
		jlong
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::atomic::AtomicLong::compareAndSet(jlong a0, jlong a1)
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(5),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(5), 
		jboolean
	>(get_jobject(), a0, a1);
}

jboolean java::util::concurrent::atomic::AtomicLong::weakCompareAndSet(jlong a0, jlong a1)
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(6),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(6), 
		jboolean
	>(get_jobject(), a0, a1);
}

jlong java::util::concurrent::atomic::AtomicLong::getAndIncrement()
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(7),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(7), 
		jlong
	>(get_jobject());
}

jlong java::util::concurrent::atomic::AtomicLong::getAndDecrement()
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(8),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(8), 
		jlong
	>(get_jobject());
}

jlong java::util::concurrent::atomic::AtomicLong::getAndAdd(jlong a0)
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(9),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(9), 
		jlong
	>(get_jobject(), a0);
}

jlong java::util::concurrent::atomic::AtomicLong::incrementAndGet()
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(10),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(10), 
		jlong
	>(get_jobject());
}

jlong java::util::concurrent::atomic::AtomicLong::decrementAndGet()
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(11),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(11), 
		jlong
	>(get_jobject());
}

jlong java::util::concurrent::atomic::AtomicLong::addAndGet(jlong a0)
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(12),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(12), 
		jlong
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::util::concurrent::atomic::AtomicLong::toString()
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(13),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(13), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint java::util::concurrent::atomic::AtomicLong::intValue()
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(14),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(14), 
		jint
	>(get_jobject());
}

jlong java::util::concurrent::atomic::AtomicLong::longValue()
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(15),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(15), 
		jlong
	>(get_jobject());
}

jfloat java::util::concurrent::atomic::AtomicLong::floatValue()
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(16),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(16), 
		jfloat
	>(get_jobject());
}

jdouble java::util::concurrent::atomic::AtomicLong::doubleValue()
{
	return call_method<
		java::util::concurrent::atomic::AtomicLong::J2CPP_CLASS_NAME,
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_NAME(17),
		java::util::concurrent::atomic::AtomicLong::J2CPP_METHOD_SIGNATURE(17), 
		jdouble
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::util::concurrent::atomic::AtomicLong,"java/util/concurrent/atomic/AtomicLong")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,0,"<init>","(J)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,1,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,2,"get","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,3,"set","(J)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,4,"getAndSet","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,5,"compareAndSet","(JJ)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,6,"weakCompareAndSet","(JJ)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,7,"getAndIncrement","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,8,"getAndDecrement","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,9,"getAndAdd","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,10,"incrementAndGet","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,11,"decrementAndGet","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,12,"addAndGet","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,13,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,14,"intValue","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,15,"longValue","()J")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,16,"floatValue","()F")
J2CPP_DEFINE_METHOD(java::util::concurrent::atomic::AtomicLong,17,"doubleValue","()D")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_ATOMIC_ATOMICLONG_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

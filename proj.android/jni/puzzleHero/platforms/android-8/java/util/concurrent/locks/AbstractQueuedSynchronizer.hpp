/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.locks.AbstractQueuedSynchronizer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_ABSTRACTQUEUEDSYNCHRONIZER_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_ABSTRACTQUEUEDSYNCHRONIZER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Thread; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { namespace locks { namespace AbstractQueuedSynchronizer_ { class ConditionObject; } } } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { namespace locks { class AbstractOwnableSynchronizer; } } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { namespace locks { class Condition; } } } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/Thread.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Date.hpp>
#include <java/util/concurrent/TimeUnit.hpp>
#include <java/util/concurrent/locks/AbstractOwnableSynchronizer.hpp>
#include <java/util/concurrent/locks/AbstractQueuedSynchronizer.hpp>
#include <java/util/concurrent/locks/Condition.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent { namespace locks {

	class AbstractQueuedSynchronizer;
	namespace AbstractQueuedSynchronizer_ {

		class ConditionObject;
		class ConditionObject
			: public object<ConditionObject>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)
			J2CPP_DECLARE_METHOD(5)
			J2CPP_DECLARE_METHOD(6)
			J2CPP_DECLARE_METHOD(7)
			J2CPP_DECLARE_METHOD(8)
			J2CPP_DECLARE_METHOD(9)
			J2CPP_DECLARE_METHOD(10)
			J2CPP_DECLARE_FIELD(0)

			explicit ConditionObject(jobject jobj)
			: object<ConditionObject>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::util::concurrent::locks::Condition>() const;
			operator local_ref<java::io::Serializable>() const;


			ConditionObject(local_ref< java::util::concurrent::locks::AbstractQueuedSynchronizer > const&);
			void signal();
			void signalAll();
			void awaitUninterruptibly();
			void await();
			jlong awaitNanos(jlong);
			jboolean awaitUntil(local_ref< java::util::Date >  const&);
			jboolean await(jlong, local_ref< java::util::concurrent::TimeUnit >  const&);

		}; //class ConditionObject

	} //namespace AbstractQueuedSynchronizer_

	class AbstractQueuedSynchronizer
		: public object<AbstractQueuedSynchronizer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)

		typedef AbstractQueuedSynchronizer_::ConditionObject ConditionObject;

		explicit AbstractQueuedSynchronizer(jobject jobj)
		: object<AbstractQueuedSynchronizer>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::util::concurrent::locks::AbstractOwnableSynchronizer>() const;
		operator local_ref<java::io::Serializable>() const;


		void acquire(jint);
		void acquireInterruptibly(jint);
		jboolean tryAcquireNanos(jint, jlong);
		jboolean release(jint);
		void acquireShared(jint);
		void acquireSharedInterruptibly(jint);
		jboolean tryAcquireSharedNanos(jint, jlong);
		jboolean releaseShared(jint);
		jboolean hasQueuedThreads();
		jboolean hasContended();
		local_ref< java::lang::Thread > getFirstQueuedThread();
		jboolean isQueued(local_ref< java::lang::Thread >  const&);
		jint getQueueLength();
		local_ref< java::util::Collection > getQueuedThreads();
		local_ref< java::util::Collection > getExclusiveQueuedThreads();
		local_ref< java::util::Collection > getSharedQueuedThreads();
		local_ref< java::lang::String > toString();
		jboolean owns(local_ref< java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject >  const&);
		jboolean hasWaiters(local_ref< java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject >  const&);
		jint getWaitQueueLength(local_ref< java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject >  const&);
		local_ref< java::util::Collection > getWaitingThreads(local_ref< java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject >  const&);
	}; //class AbstractQueuedSynchronizer

} //namespace locks
} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_ABSTRACTQUEUEDSYNCHRONIZER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_ABSTRACTQUEUEDSYNCHRONIZER_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_ABSTRACTQUEUEDSYNCHRONIZER_HPP_IMPL

namespace j2cpp {




java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::operator local_ref<java::util::concurrent::locks::Condition>() const
{
	return local_ref<java::util::concurrent::locks::Condition>(get_jobject());
}

java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::ConditionObject(local_ref< java::util::concurrent::locks::AbstractQueuedSynchronizer > const &a0)
: object<java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject>(
	call_new_object<
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_NAME(0),
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}


void java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::signal()
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_NAME(1),
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject());
}

void java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::signalAll()
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_NAME(2),
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject());
}

void java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::awaitUninterruptibly()
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_NAME(3),
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject());
}

void java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::await()
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_NAME(4),
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject());
}

jlong java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::awaitNanos(jlong a0)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_NAME(5),
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_SIGNATURE(5), 
		jlong
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::awaitUntil(local_ref< java::util::Date > const &a0)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_NAME(6),
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_SIGNATURE(6), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::await(jlong a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_NAME(7),
		java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject(), a0, a1);
}






J2CPP_DEFINE_CLASS(java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject,"java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject,0,"<init>","(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject,1,"signal","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject,2,"signalAll","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject,3,"awaitUninterruptibly","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject,4,"await","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject,5,"awaitNanos","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject,6,"awaitUntil","(Ljava/util/Date;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject,7,"await","(JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject,8,"hasWaiters","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject,9,"getWaitQueueLength","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject,10,"getWaitingThreads","()Ljava/util/Collection;")
J2CPP_DEFINE_FIELD(java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject,0,"this$0","Ljava/util/concurrent/locks/AbstractQueuedSynchronizer;")



java::util::concurrent::locks::AbstractQueuedSynchronizer::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::concurrent::locks::AbstractQueuedSynchronizer::operator local_ref<java::util::concurrent::locks::AbstractOwnableSynchronizer>() const
{
	return local_ref<java::util::concurrent::locks::AbstractOwnableSynchronizer>(get_jobject());
}

java::util::concurrent::locks::AbstractQueuedSynchronizer::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}










void java::util::concurrent::locks::AbstractQueuedSynchronizer::acquire(jint a0)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(9),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(9), 
		void
	>(get_jobject(), a0);
}

void java::util::concurrent::locks::AbstractQueuedSynchronizer::acquireInterruptibly(jint a0)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(10),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::locks::AbstractQueuedSynchronizer::tryAcquireNanos(jint a0, jlong a1)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(11),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(11), 
		jboolean
	>(get_jobject(), a0, a1);
}

jboolean java::util::concurrent::locks::AbstractQueuedSynchronizer::release(jint a0)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(12),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(12), 
		jboolean
	>(get_jobject(), a0);
}

void java::util::concurrent::locks::AbstractQueuedSynchronizer::acquireShared(jint a0)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(13),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject(), a0);
}

void java::util::concurrent::locks::AbstractQueuedSynchronizer::acquireSharedInterruptibly(jint a0)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(14),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(14), 
		void
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::locks::AbstractQueuedSynchronizer::tryAcquireSharedNanos(jint a0, jlong a1)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(15),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(15), 
		jboolean
	>(get_jobject(), a0, a1);
}

jboolean java::util::concurrent::locks::AbstractQueuedSynchronizer::releaseShared(jint a0)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(16),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(16), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::locks::AbstractQueuedSynchronizer::hasQueuedThreads()
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(17),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(17), 
		jboolean
	>(get_jobject());
}

jboolean java::util::concurrent::locks::AbstractQueuedSynchronizer::hasContended()
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(18),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(18), 
		jboolean
	>(get_jobject());
}

local_ref< java::lang::Thread > java::util::concurrent::locks::AbstractQueuedSynchronizer::getFirstQueuedThread()
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(19),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(19), 
		local_ref< java::lang::Thread >
	>(get_jobject());
}

jboolean java::util::concurrent::locks::AbstractQueuedSynchronizer::isQueued(local_ref< java::lang::Thread > const &a0)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(20),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(20), 
		jboolean
	>(get_jobject(), a0);
}

jint java::util::concurrent::locks::AbstractQueuedSynchronizer::getQueueLength()
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(21),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(21), 
		jint
	>(get_jobject());
}

local_ref< java::util::Collection > java::util::concurrent::locks::AbstractQueuedSynchronizer::getQueuedThreads()
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(22),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(22), 
		local_ref< java::util::Collection >
	>(get_jobject());
}

local_ref< java::util::Collection > java::util::concurrent::locks::AbstractQueuedSynchronizer::getExclusiveQueuedThreads()
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(23),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(23), 
		local_ref< java::util::Collection >
	>(get_jobject());
}

local_ref< java::util::Collection > java::util::concurrent::locks::AbstractQueuedSynchronizer::getSharedQueuedThreads()
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(24),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(24), 
		local_ref< java::util::Collection >
	>(get_jobject());
}

local_ref< java::lang::String > java::util::concurrent::locks::AbstractQueuedSynchronizer::toString()
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(25),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(25), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean java::util::concurrent::locks::AbstractQueuedSynchronizer::owns(local_ref< java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject > const &a0)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(26),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(26), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::locks::AbstractQueuedSynchronizer::hasWaiters(local_ref< java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject > const &a0)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(27),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(27), 
		jboolean
	>(get_jobject(), a0);
}

jint java::util::concurrent::locks::AbstractQueuedSynchronizer::getWaitQueueLength(local_ref< java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject > const &a0)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(28),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(28), 
		jint
	>(get_jobject(), a0);
}

local_ref< java::util::Collection > java::util::concurrent::locks::AbstractQueuedSynchronizer::getWaitingThreads(local_ref< java::util::concurrent::locks::AbstractQueuedSynchronizer_::ConditionObject > const &a0)
{
	return call_method<
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_CLASS_NAME,
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_NAME(29),
		java::util::concurrent::locks::AbstractQueuedSynchronizer::J2CPP_METHOD_SIGNATURE(29), 
		local_ref< java::util::Collection >
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::locks::AbstractQueuedSynchronizer,"java/util/concurrent/locks/AbstractQueuedSynchronizer")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,1,"getState","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,2,"setState","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,3,"compareAndSetState","(II)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,4,"tryAcquire","(I)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,5,"tryRelease","(I)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,6,"tryAcquireShared","(I)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,7,"tryReleaseShared","(I)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,8,"isHeldExclusively","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,9,"acquire","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,10,"acquireInterruptibly","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,11,"tryAcquireNanos","(IJ)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,12,"release","(I)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,13,"acquireShared","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,14,"acquireSharedInterruptibly","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,15,"tryAcquireSharedNanos","(IJ)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,16,"releaseShared","(I)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,17,"hasQueuedThreads","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,18,"hasContended","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,19,"getFirstQueuedThread","()Ljava/lang/Thread;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,20,"isQueued","(Ljava/lang/Thread;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,21,"getQueueLength","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,22,"getQueuedThreads","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,23,"getExclusiveQueuedThreads","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,24,"getSharedQueuedThreads","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,25,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,26,"owns","(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,27,"hasWaiters","(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,28,"getWaitQueueLength","(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::locks::AbstractQueuedSynchronizer,29,"getWaitingThreads","(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Ljava/util/Collection;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_LOCKS_ABSTRACTQUEUEDSYNCHRONIZER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.ExecutorCompletionService
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_EXECUTORCOMPLETIONSERVICE_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_EXECUTORCOMPLETIONSERVICE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Runnable; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class BlockingQueue; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class Executor; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class Future; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class CompletionService; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class Callable; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/Runnable.hpp>
#include <java/util/concurrent/BlockingQueue.hpp>
#include <java/util/concurrent/Callable.hpp>
#include <java/util/concurrent/CompletionService.hpp>
#include <java/util/concurrent/Executor.hpp>
#include <java/util/concurrent/Future.hpp>
#include <java/util/concurrent/TimeUnit.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class ExecutorCompletionService;
	class ExecutorCompletionService
		: public object<ExecutorCompletionService>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		explicit ExecutorCompletionService(jobject jobj)
		: object<ExecutorCompletionService>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::util::concurrent::CompletionService>() const;


		ExecutorCompletionService(local_ref< java::util::concurrent::Executor > const&);
		ExecutorCompletionService(local_ref< java::util::concurrent::Executor > const&, local_ref< java::util::concurrent::BlockingQueue > const&);
		local_ref< java::util::concurrent::Future > submit(local_ref< java::util::concurrent::Callable >  const&);
		local_ref< java::util::concurrent::Future > submit(local_ref< java::lang::Runnable >  const&, local_ref< java::lang::Object >  const&);
		local_ref< java::util::concurrent::Future > take();
		local_ref< java::util::concurrent::Future > poll();
		local_ref< java::util::concurrent::Future > poll(jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
	}; //class ExecutorCompletionService

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_EXECUTORCOMPLETIONSERVICE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_EXECUTORCOMPLETIONSERVICE_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_EXECUTORCOMPLETIONSERVICE_HPP_IMPL

namespace j2cpp {



java::util::concurrent::ExecutorCompletionService::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::concurrent::ExecutorCompletionService::operator local_ref<java::util::concurrent::CompletionService>() const
{
	return local_ref<java::util::concurrent::CompletionService>(get_jobject());
}


java::util::concurrent::ExecutorCompletionService::ExecutorCompletionService(local_ref< java::util::concurrent::Executor > const &a0)
: object<java::util::concurrent::ExecutorCompletionService>(
	call_new_object<
		java::util::concurrent::ExecutorCompletionService::J2CPP_CLASS_NAME,
		java::util::concurrent::ExecutorCompletionService::J2CPP_METHOD_NAME(0),
		java::util::concurrent::ExecutorCompletionService::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}



java::util::concurrent::ExecutorCompletionService::ExecutorCompletionService(local_ref< java::util::concurrent::Executor > const &a0, local_ref< java::util::concurrent::BlockingQueue > const &a1)
: object<java::util::concurrent::ExecutorCompletionService>(
	call_new_object<
		java::util::concurrent::ExecutorCompletionService::J2CPP_CLASS_NAME,
		java::util::concurrent::ExecutorCompletionService::J2CPP_METHOD_NAME(1),
		java::util::concurrent::ExecutorCompletionService::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1)
)
{
}


local_ref< java::util::concurrent::Future > java::util::concurrent::ExecutorCompletionService::submit(local_ref< java::util::concurrent::Callable > const &a0)
{
	return call_method<
		java::util::concurrent::ExecutorCompletionService::J2CPP_CLASS_NAME,
		java::util::concurrent::ExecutorCompletionService::J2CPP_METHOD_NAME(2),
		java::util::concurrent::ExecutorCompletionService::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::util::concurrent::Future >
	>(get_jobject(), a0);
}

local_ref< java::util::concurrent::Future > java::util::concurrent::ExecutorCompletionService::submit(local_ref< java::lang::Runnable > const &a0, local_ref< java::lang::Object > const &a1)
{
	return call_method<
		java::util::concurrent::ExecutorCompletionService::J2CPP_CLASS_NAME,
		java::util::concurrent::ExecutorCompletionService::J2CPP_METHOD_NAME(3),
		java::util::concurrent::ExecutorCompletionService::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::util::concurrent::Future >
	>(get_jobject(), a0, a1);
}

local_ref< java::util::concurrent::Future > java::util::concurrent::ExecutorCompletionService::take()
{
	return call_method<
		java::util::concurrent::ExecutorCompletionService::J2CPP_CLASS_NAME,
		java::util::concurrent::ExecutorCompletionService::J2CPP_METHOD_NAME(4),
		java::util::concurrent::ExecutorCompletionService::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::util::concurrent::Future >
	>(get_jobject());
}

local_ref< java::util::concurrent::Future > java::util::concurrent::ExecutorCompletionService::poll()
{
	return call_method<
		java::util::concurrent::ExecutorCompletionService::J2CPP_CLASS_NAME,
		java::util::concurrent::ExecutorCompletionService::J2CPP_METHOD_NAME(5),
		java::util::concurrent::ExecutorCompletionService::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::util::concurrent::Future >
	>(get_jobject());
}

local_ref< java::util::concurrent::Future > java::util::concurrent::ExecutorCompletionService::poll(jlong a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return call_method<
		java::util::concurrent::ExecutorCompletionService::J2CPP_CLASS_NAME,
		java::util::concurrent::ExecutorCompletionService::J2CPP_METHOD_NAME(6),
		java::util::concurrent::ExecutorCompletionService::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::util::concurrent::Future >
	>(get_jobject(), a0, a1);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::ExecutorCompletionService,"java/util/concurrent/ExecutorCompletionService")
J2CPP_DEFINE_METHOD(java::util::concurrent::ExecutorCompletionService,0,"<init>","(Ljava/util/concurrent/Executor;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ExecutorCompletionService,1,"<init>","(Ljava/util/concurrent/Executor;Ljava/util/concurrent/BlockingQueue;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ExecutorCompletionService,2,"submit","(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ExecutorCompletionService,3,"submit","(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ExecutorCompletionService,4,"take","()Ljava/util/concurrent/Future;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ExecutorCompletionService,5,"poll","()Ljava/util/concurrent/Future;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ExecutorCompletionService,6,"poll","(JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/Future;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_EXECUTORCOMPLETIONSERVICE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

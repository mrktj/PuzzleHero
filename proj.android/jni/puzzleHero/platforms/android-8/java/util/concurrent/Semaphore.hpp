/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.Semaphore
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_SEMAPHORE_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_SEMAPHORE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/concurrent/TimeUnit.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class Semaphore;
	class Semaphore
		: public object<Semaphore>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)

		explicit Semaphore(jobject jobj)
		: object<Semaphore>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		Semaphore(jint);
		Semaphore(jint, jboolean);
		void acquire();
		void acquireUninterruptibly();
		jboolean tryAcquire();
		jboolean tryAcquire(jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		void release();
		void acquire(jint);
		void acquireUninterruptibly(jint);
		jboolean tryAcquire(jint);
		jboolean tryAcquire(jint, jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		void release(jint);
		jint availablePermits();
		jint drainPermits();
		jboolean isFair();
		jboolean hasQueuedThreads();
		jint getQueueLength();
		local_ref< java::lang::String > toString();
	}; //class Semaphore

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_SEMAPHORE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_SEMAPHORE_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_SEMAPHORE_HPP_IMPL

namespace j2cpp {



java::util::concurrent::Semaphore::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::concurrent::Semaphore::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


java::util::concurrent::Semaphore::Semaphore(jint a0)
: object<java::util::concurrent::Semaphore>(
	call_new_object<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(0),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}



java::util::concurrent::Semaphore::Semaphore(jint a0, jboolean a1)
: object<java::util::concurrent::Semaphore>(
	call_new_object<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(1),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1)
)
{
}


void java::util::concurrent::Semaphore::acquire()
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(2),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject());
}

void java::util::concurrent::Semaphore::acquireUninterruptibly()
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(3),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject());
}

jboolean java::util::concurrent::Semaphore::tryAcquire()
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(4),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(get_jobject());
}

jboolean java::util::concurrent::Semaphore::tryAcquire(jlong a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(5),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(5), 
		jboolean
	>(get_jobject(), a0, a1);
}

void java::util::concurrent::Semaphore::release()
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(6),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject());
}

void java::util::concurrent::Semaphore::acquire(jint a0)
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(7),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0);
}

void java::util::concurrent::Semaphore::acquireUninterruptibly(jint a0)
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(8),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::Semaphore::tryAcquire(jint a0)
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(9),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(9), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::Semaphore::tryAcquire(jint a0, jlong a1, local_ref< java::util::concurrent::TimeUnit > const &a2)
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(10),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(10), 
		jboolean
	>(get_jobject(), a0, a1, a2);
}

void java::util::concurrent::Semaphore::release(jint a0)
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(11),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject(), a0);
}

jint java::util::concurrent::Semaphore::availablePermits()
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(12),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(12), 
		jint
	>(get_jobject());
}

jint java::util::concurrent::Semaphore::drainPermits()
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(13),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(13), 
		jint
	>(get_jobject());
}


jboolean java::util::concurrent::Semaphore::isFair()
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(15),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(15), 
		jboolean
	>(get_jobject());
}

jboolean java::util::concurrent::Semaphore::hasQueuedThreads()
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(16),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(16), 
		jboolean
	>(get_jobject());
}

jint java::util::concurrent::Semaphore::getQueueLength()
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(17),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(17), 
		jint
	>(get_jobject());
}


local_ref< java::lang::String > java::util::concurrent::Semaphore::toString()
{
	return call_method<
		java::util::concurrent::Semaphore::J2CPP_CLASS_NAME,
		java::util::concurrent::Semaphore::J2CPP_METHOD_NAME(19),
		java::util::concurrent::Semaphore::J2CPP_METHOD_SIGNATURE(19), 
		local_ref< java::lang::String >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::util::concurrent::Semaphore,"java/util/concurrent/Semaphore")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,1,"<init>","(IZ)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,2,"acquire","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,3,"acquireUninterruptibly","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,4,"tryAcquire","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,5,"tryAcquire","(JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,6,"release","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,7,"acquire","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,8,"acquireUninterruptibly","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,9,"tryAcquire","(I)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,10,"tryAcquire","(IJLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,11,"release","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,12,"availablePermits","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,13,"drainPermits","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,14,"reducePermits","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,15,"isFair","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,16,"hasQueuedThreads","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,17,"getQueueLength","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,18,"getQueuedThreads","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Semaphore,19,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_SEMAPHORE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

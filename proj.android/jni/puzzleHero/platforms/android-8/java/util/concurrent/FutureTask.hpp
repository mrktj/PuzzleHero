/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.FutureTask
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_FUTURETASK_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_FUTURETASK_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Runnable; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class Future; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class Callable; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/Runnable.hpp>
#include <java/util/concurrent/Callable.hpp>
#include <java/util/concurrent/Future.hpp>
#include <java/util/concurrent/TimeUnit.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class FutureTask;
	class FutureTask
		: public object<FutureTask>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)

		explicit FutureTask(jobject jobj)
		: object<FutureTask>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Runnable>() const;
		operator local_ref<java::util::concurrent::Future>() const;


		FutureTask(local_ref< java::util::concurrent::Callable > const&);
		FutureTask(local_ref< java::lang::Runnable > const&, local_ref< java::lang::Object > const&);
		jboolean isCancelled();
		jboolean isDone();
		jboolean cancel(jboolean);
		local_ref< java::lang::Object > get();
		local_ref< java::lang::Object > get(jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		void run();
	}; //class FutureTask

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_FUTURETASK_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_FUTURETASK_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_FUTURETASK_HPP_IMPL

namespace j2cpp {



java::util::concurrent::FutureTask::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::concurrent::FutureTask::operator local_ref<java::lang::Runnable>() const
{
	return local_ref<java::lang::Runnable>(get_jobject());
}

java::util::concurrent::FutureTask::operator local_ref<java::util::concurrent::Future>() const
{
	return local_ref<java::util::concurrent::Future>(get_jobject());
}


java::util::concurrent::FutureTask::FutureTask(local_ref< java::util::concurrent::Callable > const &a0)
: object<java::util::concurrent::FutureTask>(
	call_new_object<
		java::util::concurrent::FutureTask::J2CPP_CLASS_NAME,
		java::util::concurrent::FutureTask::J2CPP_METHOD_NAME(0),
		java::util::concurrent::FutureTask::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}



java::util::concurrent::FutureTask::FutureTask(local_ref< java::lang::Runnable > const &a0, local_ref< java::lang::Object > const &a1)
: object<java::util::concurrent::FutureTask>(
	call_new_object<
		java::util::concurrent::FutureTask::J2CPP_CLASS_NAME,
		java::util::concurrent::FutureTask::J2CPP_METHOD_NAME(1),
		java::util::concurrent::FutureTask::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1)
)
{
}


jboolean java::util::concurrent::FutureTask::isCancelled()
{
	return call_method<
		java::util::concurrent::FutureTask::J2CPP_CLASS_NAME,
		java::util::concurrent::FutureTask::J2CPP_METHOD_NAME(2),
		java::util::concurrent::FutureTask::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(get_jobject());
}

jboolean java::util::concurrent::FutureTask::isDone()
{
	return call_method<
		java::util::concurrent::FutureTask::J2CPP_CLASS_NAME,
		java::util::concurrent::FutureTask::J2CPP_METHOD_NAME(3),
		java::util::concurrent::FutureTask::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(get_jobject());
}

jboolean java::util::concurrent::FutureTask::cancel(jboolean a0)
{
	return call_method<
		java::util::concurrent::FutureTask::J2CPP_CLASS_NAME,
		java::util::concurrent::FutureTask::J2CPP_METHOD_NAME(4),
		java::util::concurrent::FutureTask::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< java::lang::Object > java::util::concurrent::FutureTask::get()
{
	return call_method<
		java::util::concurrent::FutureTask::J2CPP_CLASS_NAME,
		java::util::concurrent::FutureTask::J2CPP_METHOD_NAME(5),
		java::util::concurrent::FutureTask::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::concurrent::FutureTask::get(jlong a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return call_method<
		java::util::concurrent::FutureTask::J2CPP_CLASS_NAME,
		java::util::concurrent::FutureTask::J2CPP_METHOD_NAME(6),
		java::util::concurrent::FutureTask::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::lang::Object >
	>(get_jobject(), a0, a1);
}




void java::util::concurrent::FutureTask::run()
{
	return call_method<
		java::util::concurrent::FutureTask::J2CPP_CLASS_NAME,
		java::util::concurrent::FutureTask::J2CPP_METHOD_NAME(10),
		java::util::concurrent::FutureTask::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject());
}



J2CPP_DEFINE_CLASS(java::util::concurrent::FutureTask,"java/util/concurrent/FutureTask")
J2CPP_DEFINE_METHOD(java::util::concurrent::FutureTask,0,"<init>","(Ljava/util/concurrent/Callable;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::FutureTask,1,"<init>","(Ljava/lang/Runnable;Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::FutureTask,2,"isCancelled","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::FutureTask,3,"isDone","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::FutureTask,4,"cancel","(Z)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::FutureTask,5,"get","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::FutureTask,6,"get","(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::FutureTask,7,"done","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::FutureTask,8,"set","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::FutureTask,9,"setException","(Ljava/lang/Throwable;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::FutureTask,10,"run","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::FutureTask,11,"runAndReset","()Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_FUTURETASK_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.net.DatagramPacket
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_DATAGRAMPACKET_HPP_DECL
#define J2CPP_JAVA_NET_DATAGRAMPACKET_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace net { class InetAddress; } } }
namespace j2cpp { namespace java { namespace net { class SocketAddress; } } }


#include <java/lang/Object.hpp>
#include <java/net/InetAddress.hpp>
#include <java/net/SocketAddress.hpp>


namespace j2cpp {

namespace java { namespace net {

	class DatagramPacket;
	class DatagramPacket
		: public object<DatagramPacket>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)

		explicit DatagramPacket(jobject jobj)
		: object<DatagramPacket>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		DatagramPacket(local_ref< array<jbyte,1> > const&, jint);
		DatagramPacket(local_ref< array<jbyte,1> > const&, jint, jint);
		DatagramPacket(local_ref< array<jbyte,1> > const&, jint, jint, local_ref< java::net::InetAddress > const&, jint);
		DatagramPacket(local_ref< array<jbyte,1> > const&, jint, local_ref< java::net::InetAddress > const&, jint);
		DatagramPacket(local_ref< array<jbyte,1> > const&, jint, local_ref< java::net::SocketAddress > const&);
		DatagramPacket(local_ref< array<jbyte,1> > const&, jint, jint, local_ref< java::net::SocketAddress > const&);
		local_ref< java::net::InetAddress > getAddress();
		local_ref< array<jbyte,1> > getData();
		jint getLength();
		jint getOffset();
		jint getPort();
		void setAddress(local_ref< java::net::InetAddress >  const&);
		void setData(local_ref< array<jbyte,1> >  const&, jint, jint);
		void setData(local_ref< array<jbyte,1> >  const&);
		void setLength(jint);
		void setPort(jint);
		local_ref< java::net::SocketAddress > getSocketAddress();
		void setSocketAddress(local_ref< java::net::SocketAddress >  const&);
	}; //class DatagramPacket

} //namespace net
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_DATAGRAMPACKET_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_DATAGRAMPACKET_HPP_IMPL
#define J2CPP_JAVA_NET_DATAGRAMPACKET_HPP_IMPL

namespace j2cpp {



java::net::DatagramPacket::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::net::DatagramPacket::DatagramPacket(local_ref< array<jbyte,1> > const &a0, jint a1)
: object<java::net::DatagramPacket>(
	call_new_object<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(0),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1)
)
{
}



java::net::DatagramPacket::DatagramPacket(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
: object<java::net::DatagramPacket>(
	call_new_object<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(1),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1, a2)
)
{
}



java::net::DatagramPacket::DatagramPacket(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2, local_ref< java::net::InetAddress > const &a3, jint a4)
: object<java::net::DatagramPacket>(
	call_new_object<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(2),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(2)
	>(a0, a1, a2, a3, a4)
)
{
}



java::net::DatagramPacket::DatagramPacket(local_ref< array<jbyte,1> > const &a0, jint a1, local_ref< java::net::InetAddress > const &a2, jint a3)
: object<java::net::DatagramPacket>(
	call_new_object<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(3),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(3)
	>(a0, a1, a2, a3)
)
{
}



java::net::DatagramPacket::DatagramPacket(local_ref< array<jbyte,1> > const &a0, jint a1, local_ref< java::net::SocketAddress > const &a2)
: object<java::net::DatagramPacket>(
	call_new_object<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(4),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(4)
	>(a0, a1, a2)
)
{
}



java::net::DatagramPacket::DatagramPacket(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2, local_ref< java::net::SocketAddress > const &a3)
: object<java::net::DatagramPacket>(
	call_new_object<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(5),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(5)
	>(a0, a1, a2, a3)
)
{
}


local_ref< java::net::InetAddress > java::net::DatagramPacket::getAddress()
{
	return call_method<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(6),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::net::InetAddress >
	>(get_jobject());
}

local_ref< array<jbyte,1> > java::net::DatagramPacket::getData()
{
	return call_method<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(7),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< array<jbyte,1> >
	>(get_jobject());
}

jint java::net::DatagramPacket::getLength()
{
	return call_method<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(8),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}

jint java::net::DatagramPacket::getOffset()
{
	return call_method<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(9),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(9), 
		jint
	>(get_jobject());
}

jint java::net::DatagramPacket::getPort()
{
	return call_method<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(10),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(10), 
		jint
	>(get_jobject());
}

void java::net::DatagramPacket::setAddress(local_ref< java::net::InetAddress > const &a0)
{
	return call_method<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(11),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject(), a0);
}

void java::net::DatagramPacket::setData(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(12),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(12), 
		void
	>(get_jobject(), a0, a1, a2);
}

void java::net::DatagramPacket::setData(local_ref< array<jbyte,1> > const &a0)
{
	return call_method<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(13),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject(), a0);
}

void java::net::DatagramPacket::setLength(jint a0)
{
	return call_method<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(14),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(14), 
		void
	>(get_jobject(), a0);
}

void java::net::DatagramPacket::setPort(jint a0)
{
	return call_method<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(15),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(15), 
		void
	>(get_jobject(), a0);
}

local_ref< java::net::SocketAddress > java::net::DatagramPacket::getSocketAddress()
{
	return call_method<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(16),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(16), 
		local_ref< java::net::SocketAddress >
	>(get_jobject());
}

void java::net::DatagramPacket::setSocketAddress(local_ref< java::net::SocketAddress > const &a0)
{
	return call_method<
		java::net::DatagramPacket::J2CPP_CLASS_NAME,
		java::net::DatagramPacket::J2CPP_METHOD_NAME(17),
		java::net::DatagramPacket::J2CPP_METHOD_SIGNATURE(17), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::net::DatagramPacket,"java/net/DatagramPacket")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,0,"<init>","([BI)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,1,"<init>","([BII)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,2,"<init>","([BIILjava/net/InetAddress;I)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,3,"<init>","([BILjava/net/InetAddress;I)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,4,"<init>","([BILjava/net/SocketAddress;)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,5,"<init>","([BIILjava/net/SocketAddress;)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,6,"getAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,7,"getData","()[B")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,8,"getLength","()I")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,9,"getOffset","()I")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,10,"getPort","()I")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,11,"setAddress","(Ljava/net/InetAddress;)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,12,"setData","([BII)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,13,"setData","([B)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,14,"setLength","(I)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,15,"setPort","(I)V")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,16,"getSocketAddress","()Ljava/net/SocketAddress;")
J2CPP_DEFINE_METHOD(java::net::DatagramPacket,17,"setSocketAddress","(Ljava/net/SocketAddress;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_DATAGRAMPACKET_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

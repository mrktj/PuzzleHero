/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.net.InetAddress
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_INETADDRESS_HPP_DECL
#define J2CPP_JAVA_NET_INETADDRESS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace net { class NetworkInterface; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/net/NetworkInterface.hpp>


namespace j2cpp {

namespace java { namespace net {

	class InetAddress;
	class InetAddress
		: public object<InetAddress>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)

		explicit InetAddress(jobject jobj)
		: object<InetAddress>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		jboolean equals(local_ref< java::lang::Object >  const&);
		local_ref< array<jbyte,1> > getAddress();
		static local_ref< array< local_ref< java::net::InetAddress >, 1> > getAllByName(local_ref< java::lang::String >  const&);
		static local_ref< java::net::InetAddress > getByName(local_ref< java::lang::String >  const&);
		local_ref< java::lang::String > getHostAddress();
		local_ref< java::lang::String > getHostName();
		local_ref< java::lang::String > getCanonicalHostName();
		static local_ref< java::net::InetAddress > getLocalHost();
		jint hashCode();
		jboolean isMulticastAddress();
		local_ref< java::lang::String > toString();
		jboolean isLoopbackAddress();
		jboolean isLinkLocalAddress();
		jboolean isSiteLocalAddress();
		jboolean isMCGlobal();
		jboolean isMCNodeLocal();
		jboolean isMCLinkLocal();
		jboolean isMCSiteLocal();
		jboolean isMCOrgLocal();
		jboolean isAnyLocalAddress();
		jboolean isReachable(jint);
		jboolean isReachable(local_ref< java::net::NetworkInterface >  const&, jint, jint);
		static local_ref< java::net::InetAddress > getByAddress(local_ref< array<jbyte,1> >  const&);
		static local_ref< java::net::InetAddress > getByAddress(local_ref< java::lang::String >  const&, local_ref< array<jbyte,1> >  const&);
	}; //class InetAddress

} //namespace net
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_INETADDRESS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_INETADDRESS_HPP_IMPL
#define J2CPP_JAVA_NET_INETADDRESS_HPP_IMPL

namespace j2cpp {



java::net::InetAddress::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::net::InetAddress::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


jboolean java::net::InetAddress::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(1),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(1), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< array<jbyte,1> > java::net::InetAddress::getAddress()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(2),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< array<jbyte,1> >
	>(get_jobject());
}

local_ref< array< local_ref< java::net::InetAddress >, 1> > java::net::InetAddress::getAllByName(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(3),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< array< local_ref< java::net::InetAddress >, 1> >
	>(a0);
}

local_ref< java::net::InetAddress > java::net::InetAddress::getByName(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(4),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::net::InetAddress >
	>(a0);
}

local_ref< java::lang::String > java::net::InetAddress::getHostAddress()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(5),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::net::InetAddress::getHostName()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(6),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::net::InetAddress::getCanonicalHostName()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(7),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::net::InetAddress > java::net::InetAddress::getLocalHost()
{
	return call_static_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(8),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::net::InetAddress >
	>();
}

jint java::net::InetAddress::hashCode()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(9),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(9), 
		jint
	>(get_jobject());
}

jboolean java::net::InetAddress::isMulticastAddress()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(10),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(10), 
		jboolean
	>(get_jobject());
}

local_ref< java::lang::String > java::net::InetAddress::toString()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(11),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean java::net::InetAddress::isLoopbackAddress()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(12),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(12), 
		jboolean
	>(get_jobject());
}

jboolean java::net::InetAddress::isLinkLocalAddress()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(13),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(13), 
		jboolean
	>(get_jobject());
}

jboolean java::net::InetAddress::isSiteLocalAddress()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(14),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(14), 
		jboolean
	>(get_jobject());
}

jboolean java::net::InetAddress::isMCGlobal()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(15),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(15), 
		jboolean
	>(get_jobject());
}

jboolean java::net::InetAddress::isMCNodeLocal()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(16),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(16), 
		jboolean
	>(get_jobject());
}

jboolean java::net::InetAddress::isMCLinkLocal()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(17),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(17), 
		jboolean
	>(get_jobject());
}

jboolean java::net::InetAddress::isMCSiteLocal()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(18),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(18), 
		jboolean
	>(get_jobject());
}

jboolean java::net::InetAddress::isMCOrgLocal()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(19),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(19), 
		jboolean
	>(get_jobject());
}

jboolean java::net::InetAddress::isAnyLocalAddress()
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(20),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(20), 
		jboolean
	>(get_jobject());
}

jboolean java::net::InetAddress::isReachable(jint a0)
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(21),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(21), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::net::InetAddress::isReachable(local_ref< java::net::NetworkInterface > const &a0, jint a1, jint a2)
{
	return call_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(22),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(22), 
		jboolean
	>(get_jobject(), a0, a1, a2);
}

local_ref< java::net::InetAddress > java::net::InetAddress::getByAddress(local_ref< array<jbyte,1> > const &a0)
{
	return call_static_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(23),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(23), 
		local_ref< java::net::InetAddress >
	>(a0);
}

local_ref< java::net::InetAddress > java::net::InetAddress::getByAddress(local_ref< java::lang::String > const &a0, local_ref< array<jbyte,1> > const &a1)
{
	return call_static_method<
		java::net::InetAddress::J2CPP_CLASS_NAME,
		java::net::InetAddress::J2CPP_METHOD_NAME(24),
		java::net::InetAddress::J2CPP_METHOD_SIGNATURE(24), 
		local_ref< java::net::InetAddress >
	>(a0, a1);
}


J2CPP_DEFINE_CLASS(java::net::InetAddress,"java/net/InetAddress")
J2CPP_DEFINE_METHOD(java::net::InetAddress,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::net::InetAddress,1,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::net::InetAddress,2,"getAddress","()[B")
J2CPP_DEFINE_METHOD(java::net::InetAddress,3,"getAllByName","(Ljava/lang/String;)[java.net.InetAddress")
J2CPP_DEFINE_METHOD(java::net::InetAddress,4,"getByName","(Ljava/lang/String;)Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(java::net::InetAddress,5,"getHostAddress","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::InetAddress,6,"getHostName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::InetAddress,7,"getCanonicalHostName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::InetAddress,8,"getLocalHost","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(java::net::InetAddress,9,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::net::InetAddress,10,"isMulticastAddress","()Z")
J2CPP_DEFINE_METHOD(java::net::InetAddress,11,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::InetAddress,12,"isLoopbackAddress","()Z")
J2CPP_DEFINE_METHOD(java::net::InetAddress,13,"isLinkLocalAddress","()Z")
J2CPP_DEFINE_METHOD(java::net::InetAddress,14,"isSiteLocalAddress","()Z")
J2CPP_DEFINE_METHOD(java::net::InetAddress,15,"isMCGlobal","()Z")
J2CPP_DEFINE_METHOD(java::net::InetAddress,16,"isMCNodeLocal","()Z")
J2CPP_DEFINE_METHOD(java::net::InetAddress,17,"isMCLinkLocal","()Z")
J2CPP_DEFINE_METHOD(java::net::InetAddress,18,"isMCSiteLocal","()Z")
J2CPP_DEFINE_METHOD(java::net::InetAddress,19,"isMCOrgLocal","()Z")
J2CPP_DEFINE_METHOD(java::net::InetAddress,20,"isAnyLocalAddress","()Z")
J2CPP_DEFINE_METHOD(java::net::InetAddress,21,"isReachable","(I)Z")
J2CPP_DEFINE_METHOD(java::net::InetAddress,22,"isReachable","(Ljava/net/NetworkInterface;II)Z")
J2CPP_DEFINE_METHOD(java::net::InetAddress,23,"getByAddress","([B)Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(java::net::InetAddress,24,"getByAddress","(Ljava/lang/String;[B)Ljava/net/InetAddress;")

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_INETADDRESS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

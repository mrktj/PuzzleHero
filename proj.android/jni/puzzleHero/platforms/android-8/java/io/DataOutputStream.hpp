/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.io.DataOutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_DATAOUTPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_IO_DATAOUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class FilterOutputStream; } } }
namespace j2cpp { namespace java { namespace io { class DataOutput; } } }
namespace j2cpp { namespace java { namespace io { class Closeable; } } }
namespace j2cpp { namespace java { namespace io { class Flushable; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/Closeable.hpp>
#include <java/io/DataOutput.hpp>
#include <java/io/FilterOutputStream.hpp>
#include <java/io/Flushable.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace io {

	class DataOutputStream;
	class DataOutputStream
		: public object<DataOutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_FIELD(0)

		explicit DataOutputStream(jobject jobj)
		: object<DataOutputStream>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::FilterOutputStream>() const;
		operator local_ref<java::io::DataOutput>() const;
		operator local_ref<java::io::Closeable>() const;
		operator local_ref<java::io::Flushable>() const;
		operator local_ref<java::io::OutputStream>() const;


		DataOutputStream(local_ref< java::io::OutputStream > const&);
		void flush();
		jint size();
		void write(local_ref< array<jbyte,1> >  const&, jint, jint);
		void write(jint);
		void writeBoolean(jboolean);
		void writeByte(jint);
		void writeBytes(local_ref< java::lang::String >  const&);
		void writeChar(jint);
		void writeChars(local_ref< java::lang::String >  const&);
		void writeDouble(jdouble);
		void writeFloat(jfloat);
		void writeInt(jint);
		void writeLong(jlong);
		void writeShort(jint);
		void writeUTF(local_ref< java::lang::String >  const&);

	}; //class DataOutputStream

} //namespace io
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_DATAOUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_DATAOUTPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_IO_DATAOUTPUTSTREAM_HPP_IMPL

namespace j2cpp {



java::io::DataOutputStream::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::io::DataOutputStream::operator local_ref<java::io::FilterOutputStream>() const
{
	return local_ref<java::io::FilterOutputStream>(get_jobject());
}

java::io::DataOutputStream::operator local_ref<java::io::DataOutput>() const
{
	return local_ref<java::io::DataOutput>(get_jobject());
}

java::io::DataOutputStream::operator local_ref<java::io::Closeable>() const
{
	return local_ref<java::io::Closeable>(get_jobject());
}

java::io::DataOutputStream::operator local_ref<java::io::Flushable>() const
{
	return local_ref<java::io::Flushable>(get_jobject());
}

java::io::DataOutputStream::operator local_ref<java::io::OutputStream>() const
{
	return local_ref<java::io::OutputStream>(get_jobject());
}


java::io::DataOutputStream::DataOutputStream(local_ref< java::io::OutputStream > const &a0)
: object<java::io::DataOutputStream>(
	call_new_object<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(0),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}


void java::io::DataOutputStream::flush()
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(1),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject());
}

jint java::io::DataOutputStream::size()
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(2),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(get_jobject());
}

void java::io::DataOutputStream::write(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(3),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0, a1, a2);
}

void java::io::DataOutputStream::write(jint a0)
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(4),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutputStream::writeBoolean(jboolean a0)
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(5),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutputStream::writeByte(jint a0)
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(6),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutputStream::writeBytes(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(7),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutputStream::writeChar(jint a0)
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(8),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutputStream::writeChars(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(9),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(9), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutputStream::writeDouble(jdouble a0)
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(10),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutputStream::writeFloat(jfloat a0)
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(11),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutputStream::writeInt(jint a0)
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(12),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(12), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutputStream::writeLong(jlong a0)
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(13),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutputStream::writeShort(jint a0)
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(14),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(14), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutputStream::writeUTF(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::io::DataOutputStream::J2CPP_CLASS_NAME,
		java::io::DataOutputStream::J2CPP_METHOD_NAME(15),
		java::io::DataOutputStream::J2CPP_METHOD_SIGNATURE(15), 
		void
	>(get_jobject(), a0);
}



J2CPP_DEFINE_CLASS(java::io::DataOutputStream,"java/io/DataOutputStream")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,0,"<init>","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,1,"flush","()V")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,2,"size","()I")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,3,"write","([BII)V")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,4,"write","(I)V")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,5,"writeBoolean","(Z)V")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,6,"writeByte","(I)V")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,7,"writeBytes","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,8,"writeChar","(I)V")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,9,"writeChars","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,10,"writeDouble","(D)V")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,11,"writeFloat","(F)V")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,12,"writeInt","(I)V")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,13,"writeLong","(J)V")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,14,"writeShort","(I)V")
J2CPP_DEFINE_METHOD(java::io::DataOutputStream,15,"writeUTF","(Ljava/lang/String;)V")
J2CPP_DEFINE_FIELD(java::io::DataOutputStream,0,"written","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_DATAOUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

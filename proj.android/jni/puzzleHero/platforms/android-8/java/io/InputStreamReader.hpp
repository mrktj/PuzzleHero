/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.io.InputStreamReader
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_INPUTSTREAMREADER_HPP_DECL
#define J2CPP_JAVA_IO_INPUTSTREAMREADER_HPP_DECL


namespace j2cpp { namespace java { namespace nio { namespace charset { class Charset; } } } }
namespace j2cpp { namespace java { namespace nio { namespace charset { class CharsetDecoder; } } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Readable; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class Closeable; } } }
namespace j2cpp { namespace java { namespace io { class Reader; } } }


#include <java/io/Closeable.hpp>
#include <java/io/InputStream.hpp>
#include <java/io/Reader.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/Readable.hpp>
#include <java/lang/String.hpp>
#include <java/nio/charset/Charset.hpp>
#include <java/nio/charset/CharsetDecoder.hpp>


namespace j2cpp {

namespace java { namespace io {

	class InputStreamReader;
	class InputStreamReader
		: public object<InputStreamReader>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit InputStreamReader(jobject jobj)
		: object<InputStreamReader>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Readable>() const;
		operator local_ref<java::io::Closeable>() const;
		operator local_ref<java::io::Reader>() const;


		InputStreamReader(local_ref< java::io::InputStream > const&);
		InputStreamReader(local_ref< java::io::InputStream > const&, local_ref< java::lang::String > const&);
		InputStreamReader(local_ref< java::io::InputStream > const&, local_ref< java::nio::charset::CharsetDecoder > const&);
		InputStreamReader(local_ref< java::io::InputStream > const&, local_ref< java::nio::charset::Charset > const&);
		void close();
		local_ref< java::lang::String > getEncoding();
		jint read();
		jint read(local_ref< array<jchar,1> >  const&, jint, jint);
		jboolean ready();
	}; //class InputStreamReader

} //namespace io
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_INPUTSTREAMREADER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_INPUTSTREAMREADER_HPP_IMPL
#define J2CPP_JAVA_IO_INPUTSTREAMREADER_HPP_IMPL

namespace j2cpp {



java::io::InputStreamReader::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::io::InputStreamReader::operator local_ref<java::lang::Readable>() const
{
	return local_ref<java::lang::Readable>(get_jobject());
}

java::io::InputStreamReader::operator local_ref<java::io::Closeable>() const
{
	return local_ref<java::io::Closeable>(get_jobject());
}

java::io::InputStreamReader::operator local_ref<java::io::Reader>() const
{
	return local_ref<java::io::Reader>(get_jobject());
}


java::io::InputStreamReader::InputStreamReader(local_ref< java::io::InputStream > const &a0)
: object<java::io::InputStreamReader>(
	call_new_object<
		java::io::InputStreamReader::J2CPP_CLASS_NAME,
		java::io::InputStreamReader::J2CPP_METHOD_NAME(0),
		java::io::InputStreamReader::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}



java::io::InputStreamReader::InputStreamReader(local_ref< java::io::InputStream > const &a0, local_ref< java::lang::String > const &a1)
: object<java::io::InputStreamReader>(
	call_new_object<
		java::io::InputStreamReader::J2CPP_CLASS_NAME,
		java::io::InputStreamReader::J2CPP_METHOD_NAME(1),
		java::io::InputStreamReader::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1)
)
{
}



java::io::InputStreamReader::InputStreamReader(local_ref< java::io::InputStream > const &a0, local_ref< java::nio::charset::CharsetDecoder > const &a1)
: object<java::io::InputStreamReader>(
	call_new_object<
		java::io::InputStreamReader::J2CPP_CLASS_NAME,
		java::io::InputStreamReader::J2CPP_METHOD_NAME(2),
		java::io::InputStreamReader::J2CPP_METHOD_SIGNATURE(2)
	>(a0, a1)
)
{
}



java::io::InputStreamReader::InputStreamReader(local_ref< java::io::InputStream > const &a0, local_ref< java::nio::charset::Charset > const &a1)
: object<java::io::InputStreamReader>(
	call_new_object<
		java::io::InputStreamReader::J2CPP_CLASS_NAME,
		java::io::InputStreamReader::J2CPP_METHOD_NAME(3),
		java::io::InputStreamReader::J2CPP_METHOD_SIGNATURE(3)
	>(a0, a1)
)
{
}


void java::io::InputStreamReader::close()
{
	return call_method<
		java::io::InputStreamReader::J2CPP_CLASS_NAME,
		java::io::InputStreamReader::J2CPP_METHOD_NAME(4),
		java::io::InputStreamReader::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject());
}

local_ref< java::lang::String > java::io::InputStreamReader::getEncoding()
{
	return call_method<
		java::io::InputStreamReader::J2CPP_CLASS_NAME,
		java::io::InputStreamReader::J2CPP_METHOD_NAME(5),
		java::io::InputStreamReader::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint java::io::InputStreamReader::read()
{
	return call_method<
		java::io::InputStreamReader::J2CPP_CLASS_NAME,
		java::io::InputStreamReader::J2CPP_METHOD_NAME(6),
		java::io::InputStreamReader::J2CPP_METHOD_SIGNATURE(6), 
		jint
	>(get_jobject());
}

jint java::io::InputStreamReader::read(local_ref< array<jchar,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::io::InputStreamReader::J2CPP_CLASS_NAME,
		java::io::InputStreamReader::J2CPP_METHOD_NAME(7),
		java::io::InputStreamReader::J2CPP_METHOD_SIGNATURE(7), 
		jint
	>(get_jobject(), a0, a1, a2);
}

jboolean java::io::InputStreamReader::ready()
{
	return call_method<
		java::io::InputStreamReader::J2CPP_CLASS_NAME,
		java::io::InputStreamReader::J2CPP_METHOD_NAME(8),
		java::io::InputStreamReader::J2CPP_METHOD_SIGNATURE(8), 
		jboolean
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::io::InputStreamReader,"java/io/InputStreamReader")
J2CPP_DEFINE_METHOD(java::io::InputStreamReader,0,"<init>","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::io::InputStreamReader,1,"<init>","(Ljava/io/InputStream;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::io::InputStreamReader,2,"<init>","(Ljava/io/InputStream;Ljava/nio/charset/CharsetDecoder;)V")
J2CPP_DEFINE_METHOD(java::io::InputStreamReader,3,"<init>","(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V")
J2CPP_DEFINE_METHOD(java::io::InputStreamReader,4,"close","()V")
J2CPP_DEFINE_METHOD(java::io::InputStreamReader,5,"getEncoding","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::InputStreamReader,6,"read","()I")
J2CPP_DEFINE_METHOD(java::io::InputStreamReader,7,"read","([CII)I")
J2CPP_DEFINE_METHOD(java::io::InputStreamReader,8,"ready","()Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_INPUTSTREAMREADER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

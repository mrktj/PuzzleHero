/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.io.FileFilter
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_FILEFILTER_HPP_DECL
#define J2CPP_JAVA_IO_FILEFILTER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class File; } } }


#include <java/io/File.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace io {

	class FileFilter;
	class FileFilter
		: public object<FileFilter>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)

		explicit FileFilter(jobject jobj)
		: object<FileFilter>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		jboolean accept(local_ref< java::io::File >  const&);
	}; //class FileFilter

} //namespace io
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_FILEFILTER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_FILEFILTER_HPP_IMPL
#define J2CPP_JAVA_IO_FILEFILTER_HPP_IMPL

namespace j2cpp {



java::io::FileFilter::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

jboolean java::io::FileFilter::accept(local_ref< java::io::File > const &a0)
{
	return call_method<
		java::io::FileFilter::J2CPP_CLASS_NAME,
		java::io::FileFilter::J2CPP_METHOD_NAME(0),
		java::io::FileFilter::J2CPP_METHOD_SIGNATURE(0), 
		jboolean
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::io::FileFilter,"java/io/FileFilter")
J2CPP_DEFINE_METHOD(java::io::FileFilter,0,"accept","(Ljava/io/File;)Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_FILEFILTER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

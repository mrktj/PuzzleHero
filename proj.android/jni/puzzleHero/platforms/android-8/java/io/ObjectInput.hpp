/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.io.ObjectInput
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_OBJECTINPUT_HPP_DECL
#define J2CPP_JAVA_IO_OBJECTINPUT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class DataInput; } } }


#include <java/io/DataInput.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace io {

	class ObjectInput;
	class ObjectInput
		: public object<ObjectInput>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		explicit ObjectInput(jobject jobj)
		: object<ObjectInput>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::DataInput>() const;


		jint available();
		void close();
		jint read();
		jint read(local_ref< array<jbyte,1> >  const&);
		jint read(local_ref< array<jbyte,1> >  const&, jint, jint);
		local_ref< java::lang::Object > readObject();
		jlong skip(jlong);
	}; //class ObjectInput

} //namespace io
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_OBJECTINPUT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_OBJECTINPUT_HPP_IMPL
#define J2CPP_JAVA_IO_OBJECTINPUT_HPP_IMPL

namespace j2cpp {



java::io::ObjectInput::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::io::ObjectInput::operator local_ref<java::io::DataInput>() const
{
	return local_ref<java::io::DataInput>(get_jobject());
}

jint java::io::ObjectInput::available()
{
	return call_method<
		java::io::ObjectInput::J2CPP_CLASS_NAME,
		java::io::ObjectInput::J2CPP_METHOD_NAME(0),
		java::io::ObjectInput::J2CPP_METHOD_SIGNATURE(0), 
		jint
	>(get_jobject());
}

void java::io::ObjectInput::close()
{
	return call_method<
		java::io::ObjectInput::J2CPP_CLASS_NAME,
		java::io::ObjectInput::J2CPP_METHOD_NAME(1),
		java::io::ObjectInput::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject());
}

jint java::io::ObjectInput::read()
{
	return call_method<
		java::io::ObjectInput::J2CPP_CLASS_NAME,
		java::io::ObjectInput::J2CPP_METHOD_NAME(2),
		java::io::ObjectInput::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(get_jobject());
}

jint java::io::ObjectInput::read(local_ref< array<jbyte,1> > const &a0)
{
	return call_method<
		java::io::ObjectInput::J2CPP_CLASS_NAME,
		java::io::ObjectInput::J2CPP_METHOD_NAME(3),
		java::io::ObjectInput::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(get_jobject(), a0);
}

jint java::io::ObjectInput::read(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::io::ObjectInput::J2CPP_CLASS_NAME,
		java::io::ObjectInput::J2CPP_METHOD_NAME(4),
		java::io::ObjectInput::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject(), a0, a1, a2);
}

local_ref< java::lang::Object > java::io::ObjectInput::readObject()
{
	return call_method<
		java::io::ObjectInput::J2CPP_CLASS_NAME,
		java::io::ObjectInput::J2CPP_METHOD_NAME(5),
		java::io::ObjectInput::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jlong java::io::ObjectInput::skip(jlong a0)
{
	return call_method<
		java::io::ObjectInput::J2CPP_CLASS_NAME,
		java::io::ObjectInput::J2CPP_METHOD_NAME(6),
		java::io::ObjectInput::J2CPP_METHOD_SIGNATURE(6), 
		jlong
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::io::ObjectInput,"java/io/ObjectInput")
J2CPP_DEFINE_METHOD(java::io::ObjectInput,0,"available","()I")
J2CPP_DEFINE_METHOD(java::io::ObjectInput,1,"close","()V")
J2CPP_DEFINE_METHOD(java::io::ObjectInput,2,"read","()I")
J2CPP_DEFINE_METHOD(java::io::ObjectInput,3,"read","([B)I")
J2CPP_DEFINE_METHOD(java::io::ObjectInput,4,"read","([BII)I")
J2CPP_DEFINE_METHOD(java::io::ObjectInput,5,"readObject","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::io::ObjectInput,6,"skip","(J)J")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_OBJECTINPUT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.io.ByteArrayOutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_BYTEARRAYOUTPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_IO_BYTEARRAYOUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class Closeable; } } }
namespace j2cpp { namespace java { namespace io { class Flushable; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/Closeable.hpp>
#include <java/io/Flushable.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace io {

	class ByteArrayOutputStream;
	class ByteArrayOutputStream
		: public object<ByteArrayOutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		explicit ByteArrayOutputStream(jobject jobj)
		: object<ByteArrayOutputStream>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Closeable>() const;
		operator local_ref<java::io::Flushable>() const;
		operator local_ref<java::io::OutputStream>() const;


		ByteArrayOutputStream();
		ByteArrayOutputStream(jint);
		void close();
		void reset();
		jint size();
		local_ref< array<jbyte,1> > toByteArray();
		local_ref< java::lang::String > toString();
		local_ref< java::lang::String > toString(jint);
		local_ref< java::lang::String > toString(local_ref< java::lang::String >  const&);
		void write(local_ref< array<jbyte,1> >  const&, jint, jint);
		void write(jint);
		void writeTo(local_ref< java::io::OutputStream >  const&);

	}; //class ByteArrayOutputStream

} //namespace io
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_BYTEARRAYOUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_BYTEARRAYOUTPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_IO_BYTEARRAYOUTPUTSTREAM_HPP_IMPL

namespace j2cpp {



java::io::ByteArrayOutputStream::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::io::ByteArrayOutputStream::operator local_ref<java::io::Closeable>() const
{
	return local_ref<java::io::Closeable>(get_jobject());
}

java::io::ByteArrayOutputStream::operator local_ref<java::io::Flushable>() const
{
	return local_ref<java::io::Flushable>(get_jobject());
}

java::io::ByteArrayOutputStream::operator local_ref<java::io::OutputStream>() const
{
	return local_ref<java::io::OutputStream>(get_jobject());
}


java::io::ByteArrayOutputStream::ByteArrayOutputStream()
: object<java::io::ByteArrayOutputStream>(
	call_new_object<
		java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME,
		java::io::ByteArrayOutputStream::J2CPP_METHOD_NAME(0),
		java::io::ByteArrayOutputStream::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}



java::io::ByteArrayOutputStream::ByteArrayOutputStream(jint a0)
: object<java::io::ByteArrayOutputStream>(
	call_new_object<
		java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME,
		java::io::ByteArrayOutputStream::J2CPP_METHOD_NAME(1),
		java::io::ByteArrayOutputStream::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}


void java::io::ByteArrayOutputStream::close()
{
	return call_method<
		java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME,
		java::io::ByteArrayOutputStream::J2CPP_METHOD_NAME(2),
		java::io::ByteArrayOutputStream::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject());
}

void java::io::ByteArrayOutputStream::reset()
{
	return call_method<
		java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME,
		java::io::ByteArrayOutputStream::J2CPP_METHOD_NAME(3),
		java::io::ByteArrayOutputStream::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject());
}

jint java::io::ByteArrayOutputStream::size()
{
	return call_method<
		java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME,
		java::io::ByteArrayOutputStream::J2CPP_METHOD_NAME(4),
		java::io::ByteArrayOutputStream::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject());
}

local_ref< array<jbyte,1> > java::io::ByteArrayOutputStream::toByteArray()
{
	return call_method<
		java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME,
		java::io::ByteArrayOutputStream::J2CPP_METHOD_NAME(5),
		java::io::ByteArrayOutputStream::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< array<jbyte,1> >
	>(get_jobject());
}

local_ref< java::lang::String > java::io::ByteArrayOutputStream::toString()
{
	return call_method<
		java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME,
		java::io::ByteArrayOutputStream::J2CPP_METHOD_NAME(6),
		java::io::ByteArrayOutputStream::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::io::ByteArrayOutputStream::toString(jint a0)
{
	return call_method<
		java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME,
		java::io::ByteArrayOutputStream::J2CPP_METHOD_NAME(7),
		java::io::ByteArrayOutputStream::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::lang::String >
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::io::ByteArrayOutputStream::toString(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME,
		java::io::ByteArrayOutputStream::J2CPP_METHOD_NAME(8),
		java::io::ByteArrayOutputStream::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::lang::String >
	>(get_jobject(), a0);
}

void java::io::ByteArrayOutputStream::write(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME,
		java::io::ByteArrayOutputStream::J2CPP_METHOD_NAME(9),
		java::io::ByteArrayOutputStream::J2CPP_METHOD_SIGNATURE(9), 
		void
	>(get_jobject(), a0, a1, a2);
}

void java::io::ByteArrayOutputStream::write(jint a0)
{
	return call_method<
		java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME,
		java::io::ByteArrayOutputStream::J2CPP_METHOD_NAME(10),
		java::io::ByteArrayOutputStream::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject(), a0);
}

void java::io::ByteArrayOutputStream::writeTo(local_ref< java::io::OutputStream > const &a0)
{
	return call_method<
		java::io::ByteArrayOutputStream::J2CPP_CLASS_NAME,
		java::io::ByteArrayOutputStream::J2CPP_METHOD_NAME(11),
		java::io::ByteArrayOutputStream::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject(), a0);
}



J2CPP_DEFINE_CLASS(java::io::ByteArrayOutputStream,"java/io/ByteArrayOutputStream")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,2,"close","()V")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,3,"reset","()V")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,4,"size","()I")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,5,"toByteArray","()[B")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,6,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,7,"toString","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,8,"toString","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,9,"write","([BII)V")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,10,"write","(I)V")
J2CPP_DEFINE_METHOD(java::io::ByteArrayOutputStream,11,"writeTo","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_FIELD(java::io::ByteArrayOutputStream,0,"buf","[B")
J2CPP_DEFINE_FIELD(java::io::ByteArrayOutputStream,1,"count","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_BYTEARRAYOUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

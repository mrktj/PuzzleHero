/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.io.StreamTokenizer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_STREAMTOKENIZER_HPP_DECL
#define J2CPP_JAVA_IO_STREAMTOKENIZER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class Reader; } } }


#include <java/io/InputStream.hpp>
#include <java/io/Reader.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace io {

	class StreamTokenizer;
	class StreamTokenizer
		: public object<StreamTokenizer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)

		explicit StreamTokenizer(jobject jobj)
		: object<StreamTokenizer>(jobj)
		, nval(jobj)
		, sval(jobj)
		, ttype(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		StreamTokenizer(local_ref< java::io::InputStream > const&);
		StreamTokenizer(local_ref< java::io::Reader > const&);
		void commentChar(jint);
		void eolIsSignificant(jboolean);
		jint lineno();
		void lowerCaseMode(jboolean);
		jint nextToken();
		void ordinaryChar(jint);
		void ordinaryChars(jint, jint);
		void parseNumbers();
		void pushBack();
		void quoteChar(jint);
		void resetSyntax();
		void slashSlashComments(jboolean);
		void slashStarComments(jboolean);
		local_ref< java::lang::String > toString();
		void whitespaceChars(jint, jint);
		void wordChars(jint, jint);

		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jdouble > nval;
		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::lang::String > > sval;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > TT_EOF;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > TT_EOL;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), jint > TT_NUMBER;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), jint > TT_WORD;
		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), jint > ttype;
	}; //class StreamTokenizer

} //namespace io
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_STREAMTOKENIZER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_STREAMTOKENIZER_HPP_IMPL
#define J2CPP_JAVA_IO_STREAMTOKENIZER_HPP_IMPL

namespace j2cpp {



java::io::StreamTokenizer::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::io::StreamTokenizer::StreamTokenizer(local_ref< java::io::InputStream > const &a0)
: object<java::io::StreamTokenizer>(
	call_new_object<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(0),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
, nval(get_jobject())
, sval(get_jobject())
, ttype(get_jobject())
{
}



java::io::StreamTokenizer::StreamTokenizer(local_ref< java::io::Reader > const &a0)
: object<java::io::StreamTokenizer>(
	call_new_object<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(1),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
, nval(get_jobject())
, sval(get_jobject())
, ttype(get_jobject())
{
}


void java::io::StreamTokenizer::commentChar(jint a0)
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(2),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0);
}

void java::io::StreamTokenizer::eolIsSignificant(jboolean a0)
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(3),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0);
}

jint java::io::StreamTokenizer::lineno()
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(4),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject());
}

void java::io::StreamTokenizer::lowerCaseMode(jboolean a0)
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(5),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject(), a0);
}

jint java::io::StreamTokenizer::nextToken()
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(6),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(6), 
		jint
	>(get_jobject());
}

void java::io::StreamTokenizer::ordinaryChar(jint a0)
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(7),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0);
}

void java::io::StreamTokenizer::ordinaryChars(jint a0, jint a1)
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(8),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0, a1);
}

void java::io::StreamTokenizer::parseNumbers()
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(9),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(9), 
		void
	>(get_jobject());
}

void java::io::StreamTokenizer::pushBack()
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(10),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject());
}

void java::io::StreamTokenizer::quoteChar(jint a0)
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(11),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject(), a0);
}

void java::io::StreamTokenizer::resetSyntax()
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(12),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(12), 
		void
	>(get_jobject());
}

void java::io::StreamTokenizer::slashSlashComments(jboolean a0)
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(13),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject(), a0);
}

void java::io::StreamTokenizer::slashStarComments(jboolean a0)
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(14),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(14), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::io::StreamTokenizer::toString()
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(15),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(15), 
		local_ref< java::lang::String >
	>(get_jobject());
}

void java::io::StreamTokenizer::whitespaceChars(jint a0, jint a1)
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(16),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(16), 
		void
	>(get_jobject(), a0, a1);
}

void java::io::StreamTokenizer::wordChars(jint a0, jint a1)
{
	return call_method<
		java::io::StreamTokenizer::J2CPP_CLASS_NAME,
		java::io::StreamTokenizer::J2CPP_METHOD_NAME(17),
		java::io::StreamTokenizer::J2CPP_METHOD_SIGNATURE(17), 
		void
	>(get_jobject(), a0, a1);
}


static_field<
	java::io::StreamTokenizer::J2CPP_CLASS_NAME,
	java::io::StreamTokenizer::J2CPP_FIELD_NAME(2),
	java::io::StreamTokenizer::J2CPP_FIELD_SIGNATURE(2),
	jint
> java::io::StreamTokenizer::TT_EOF;

static_field<
	java::io::StreamTokenizer::J2CPP_CLASS_NAME,
	java::io::StreamTokenizer::J2CPP_FIELD_NAME(3),
	java::io::StreamTokenizer::J2CPP_FIELD_SIGNATURE(3),
	jint
> java::io::StreamTokenizer::TT_EOL;

static_field<
	java::io::StreamTokenizer::J2CPP_CLASS_NAME,
	java::io::StreamTokenizer::J2CPP_FIELD_NAME(4),
	java::io::StreamTokenizer::J2CPP_FIELD_SIGNATURE(4),
	jint
> java::io::StreamTokenizer::TT_NUMBER;

static_field<
	java::io::StreamTokenizer::J2CPP_CLASS_NAME,
	java::io::StreamTokenizer::J2CPP_FIELD_NAME(5),
	java::io::StreamTokenizer::J2CPP_FIELD_SIGNATURE(5),
	jint
> java::io::StreamTokenizer::TT_WORD;


J2CPP_DEFINE_CLASS(java::io::StreamTokenizer,"java/io/StreamTokenizer")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,0,"<init>","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,1,"<init>","(Ljava/io/Reader;)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,2,"commentChar","(I)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,3,"eolIsSignificant","(Z)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,4,"lineno","()I")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,5,"lowerCaseMode","(Z)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,6,"nextToken","()I")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,7,"ordinaryChar","(I)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,8,"ordinaryChars","(II)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,9,"parseNumbers","()V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,10,"pushBack","()V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,11,"quoteChar","(I)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,12,"resetSyntax","()V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,13,"slashSlashComments","(Z)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,14,"slashStarComments","(Z)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,15,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,16,"whitespaceChars","(II)V")
J2CPP_DEFINE_METHOD(java::io::StreamTokenizer,17,"wordChars","(II)V")
J2CPP_DEFINE_FIELD(java::io::StreamTokenizer,0,"nval","D")
J2CPP_DEFINE_FIELD(java::io::StreamTokenizer,1,"sval","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(java::io::StreamTokenizer,2,"TT_EOF","I")
J2CPP_DEFINE_FIELD(java::io::StreamTokenizer,3,"TT_EOL","I")
J2CPP_DEFINE_FIELD(java::io::StreamTokenizer,4,"TT_NUMBER","I")
J2CPP_DEFINE_FIELD(java::io::StreamTokenizer,5,"TT_WORD","I")
J2CPP_DEFINE_FIELD(java::io::StreamTokenizer,6,"ttype","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_STREAMTOKENIZER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.security.spec.ECFieldF2m
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_SPEC_ECFIELDF2M_HPP_DECL
#define J2CPP_JAVA_SECURITY_SPEC_ECFIELDF2M_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace math { class BigInteger; } } }
namespace j2cpp { namespace java { namespace security { namespace spec { class ECField; } } } }


#include <java/lang/Object.hpp>
#include <java/math/BigInteger.hpp>
#include <java/security/spec/ECField.hpp>


namespace j2cpp {

namespace java { namespace security { namespace spec {

	class ECFieldF2m;
	class ECFieldF2m
		: public object<ECFieldF2m>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit ECFieldF2m(jobject jobj)
		: object<ECFieldF2m>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::security::spec::ECField>() const;


		ECFieldF2m(jint);
		ECFieldF2m(jint, local_ref< java::math::BigInteger > const&);
		ECFieldF2m(jint, local_ref< array<jint,1> > const&);
		jboolean equals(local_ref< java::lang::Object >  const&);
		jint getFieldSize();
		jint getM();
		local_ref< array<jint,1> > getMidTermsOfReductionPolynomial();
		local_ref< java::math::BigInteger > getReductionPolynomial();
		jint hashCode();
	}; //class ECFieldF2m

} //namespace spec
} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_SPEC_ECFIELDF2M_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_SPEC_ECFIELDF2M_HPP_IMPL
#define J2CPP_JAVA_SECURITY_SPEC_ECFIELDF2M_HPP_IMPL

namespace j2cpp {



java::security::spec::ECFieldF2m::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::security::spec::ECFieldF2m::operator local_ref<java::security::spec::ECField>() const
{
	return local_ref<java::security::spec::ECField>(get_jobject());
}


java::security::spec::ECFieldF2m::ECFieldF2m(jint a0)
: object<java::security::spec::ECFieldF2m>(
	call_new_object<
		java::security::spec::ECFieldF2m::J2CPP_CLASS_NAME,
		java::security::spec::ECFieldF2m::J2CPP_METHOD_NAME(0),
		java::security::spec::ECFieldF2m::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}



java::security::spec::ECFieldF2m::ECFieldF2m(jint a0, local_ref< java::math::BigInteger > const &a1)
: object<java::security::spec::ECFieldF2m>(
	call_new_object<
		java::security::spec::ECFieldF2m::J2CPP_CLASS_NAME,
		java::security::spec::ECFieldF2m::J2CPP_METHOD_NAME(1),
		java::security::spec::ECFieldF2m::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1)
)
{
}



java::security::spec::ECFieldF2m::ECFieldF2m(jint a0, local_ref< array<jint,1> > const &a1)
: object<java::security::spec::ECFieldF2m>(
	call_new_object<
		java::security::spec::ECFieldF2m::J2CPP_CLASS_NAME,
		java::security::spec::ECFieldF2m::J2CPP_METHOD_NAME(2),
		java::security::spec::ECFieldF2m::J2CPP_METHOD_SIGNATURE(2)
	>(a0, a1)
)
{
}


jboolean java::security::spec::ECFieldF2m::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::security::spec::ECFieldF2m::J2CPP_CLASS_NAME,
		java::security::spec::ECFieldF2m::J2CPP_METHOD_NAME(3),
		java::security::spec::ECFieldF2m::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(get_jobject(), a0);
}

jint java::security::spec::ECFieldF2m::getFieldSize()
{
	return call_method<
		java::security::spec::ECFieldF2m::J2CPP_CLASS_NAME,
		java::security::spec::ECFieldF2m::J2CPP_METHOD_NAME(4),
		java::security::spec::ECFieldF2m::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject());
}

jint java::security::spec::ECFieldF2m::getM()
{
	return call_method<
		java::security::spec::ECFieldF2m::J2CPP_CLASS_NAME,
		java::security::spec::ECFieldF2m::J2CPP_METHOD_NAME(5),
		java::security::spec::ECFieldF2m::J2CPP_METHOD_SIGNATURE(5), 
		jint
	>(get_jobject());
}

local_ref< array<jint,1> > java::security::spec::ECFieldF2m::getMidTermsOfReductionPolynomial()
{
	return call_method<
		java::security::spec::ECFieldF2m::J2CPP_CLASS_NAME,
		java::security::spec::ECFieldF2m::J2CPP_METHOD_NAME(6),
		java::security::spec::ECFieldF2m::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< array<jint,1> >
	>(get_jobject());
}

local_ref< java::math::BigInteger > java::security::spec::ECFieldF2m::getReductionPolynomial()
{
	return call_method<
		java::security::spec::ECFieldF2m::J2CPP_CLASS_NAME,
		java::security::spec::ECFieldF2m::J2CPP_METHOD_NAME(7),
		java::security::spec::ECFieldF2m::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::math::BigInteger >
	>(get_jobject());
}

jint java::security::spec::ECFieldF2m::hashCode()
{
	return call_method<
		java::security::spec::ECFieldF2m::J2CPP_CLASS_NAME,
		java::security::spec::ECFieldF2m::J2CPP_METHOD_NAME(8),
		java::security::spec::ECFieldF2m::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::security::spec::ECFieldF2m,"java/security/spec/ECFieldF2m")
J2CPP_DEFINE_METHOD(java::security::spec::ECFieldF2m,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::security::spec::ECFieldF2m,1,"<init>","(ILjava/math/BigInteger;)V")
J2CPP_DEFINE_METHOD(java::security::spec::ECFieldF2m,2,"<init>","(I[I)V")
J2CPP_DEFINE_METHOD(java::security::spec::ECFieldF2m,3,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::security::spec::ECFieldF2m,4,"getFieldSize","()I")
J2CPP_DEFINE_METHOD(java::security::spec::ECFieldF2m,5,"getM","()I")
J2CPP_DEFINE_METHOD(java::security::spec::ECFieldF2m,6,"getMidTermsOfReductionPolynomial","()[I")
J2CPP_DEFINE_METHOD(java::security::spec::ECFieldF2m,7,"getReductionPolynomial","()Ljava/math/BigInteger;")
J2CPP_DEFINE_METHOD(java::security::spec::ECFieldF2m,8,"hashCode","()I")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_SPEC_ECFIELDF2M_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

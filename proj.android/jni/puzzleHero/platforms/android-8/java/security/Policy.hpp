/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.security.Policy
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_POLICY_HPP_DECL
#define J2CPP_JAVA_SECURITY_POLICY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { class CodeSource; } } }
namespace j2cpp { namespace java { namespace security { class ProtectionDomain; } } }
namespace j2cpp { namespace java { namespace security { class Permission; } } }
namespace j2cpp { namespace java { namespace security { class PermissionCollection; } } }


#include <java/lang/Object.hpp>
#include <java/security/CodeSource.hpp>
#include <java/security/Permission.hpp>
#include <java/security/PermissionCollection.hpp>
#include <java/security/ProtectionDomain.hpp>


namespace j2cpp {

namespace java { namespace security {

	class Policy;
	class Policy
		: public object<Policy>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		explicit Policy(jobject jobj)
		: object<Policy>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		Policy();
		local_ref< java::security::PermissionCollection > getPermissions(local_ref< java::security::CodeSource >  const&);
		void refresh();
		local_ref< java::security::PermissionCollection > getPermissions(local_ref< java::security::ProtectionDomain >  const&);
		jboolean implies(local_ref< java::security::ProtectionDomain >  const&, local_ref< java::security::Permission >  const&);
		static local_ref< java::security::Policy > getPolicy();
		static void setPolicy(local_ref< java::security::Policy >  const&);
	}; //class Policy

} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_POLICY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_POLICY_HPP_IMPL
#define J2CPP_JAVA_SECURITY_POLICY_HPP_IMPL

namespace j2cpp {



java::security::Policy::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::security::Policy::Policy()
: object<java::security::Policy>(
	call_new_object<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(0),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


local_ref< java::security::PermissionCollection > java::security::Policy::getPermissions(local_ref< java::security::CodeSource > const &a0)
{
	return call_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(1),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::security::PermissionCollection >
	>(get_jobject(), a0);
}

void java::security::Policy::refresh()
{
	return call_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(2),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject());
}

local_ref< java::security::PermissionCollection > java::security::Policy::getPermissions(local_ref< java::security::ProtectionDomain > const &a0)
{
	return call_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(3),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::security::PermissionCollection >
	>(get_jobject(), a0);
}

jboolean java::security::Policy::implies(local_ref< java::security::ProtectionDomain > const &a0, local_ref< java::security::Permission > const &a1)
{
	return call_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(4),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(get_jobject(), a0, a1);
}

local_ref< java::security::Policy > java::security::Policy::getPolicy()
{
	return call_static_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(5),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::security::Policy >
	>();
}

void java::security::Policy::setPolicy(local_ref< java::security::Policy > const &a0)
{
	return call_static_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(6),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(a0);
}


J2CPP_DEFINE_CLASS(java::security::Policy,"java/security/Policy")
J2CPP_DEFINE_METHOD(java::security::Policy,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::security::Policy,1,"getPermissions","(Ljava/security/CodeSource;)Ljava/security/PermissionCollection;")
J2CPP_DEFINE_METHOD(java::security::Policy,2,"refresh","()V")
J2CPP_DEFINE_METHOD(java::security::Policy,3,"getPermissions","(Ljava/security/ProtectionDomain;)Ljava/security/PermissionCollection;")
J2CPP_DEFINE_METHOD(java::security::Policy,4,"implies","(Ljava/security/ProtectionDomain;Ljava/security/Permission;)Z")
J2CPP_DEFINE_METHOD(java::security::Policy,5,"getPolicy","()Ljava/security/Policy;")
J2CPP_DEFINE_METHOD(java::security::Policy,6,"setPolicy","(Ljava/security/Policy;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_POLICY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.security.cert.PKIXParameters
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_PKIXPARAMETERS_HPP_DECL
#define J2CPP_JAVA_SECURITY_CERT_PKIXPARAMETERS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Cloneable; } } }
namespace j2cpp { namespace java { namespace security { class KeyStore; } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class CertSelector; } } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class CertPathParameters; } } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class CertStore; } } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class PKIXCertPathChecker; } } } }
namespace j2cpp { namespace java { namespace util { class List; } } }
namespace j2cpp { namespace java { namespace util { class Set; } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }


#include <java/lang/Cloneable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/security/KeyStore.hpp>
#include <java/security/cert/CertPathParameters.hpp>
#include <java/security/cert/CertSelector.hpp>
#include <java/security/cert/CertStore.hpp>
#include <java/security/cert/PKIXCertPathChecker.hpp>
#include <java/util/Date.hpp>
#include <java/util/List.hpp>
#include <java/util/Set.hpp>


namespace j2cpp {

namespace java { namespace security { namespace cert {

	class PKIXParameters;
	class PKIXParameters
		: public object<PKIXParameters>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)

		explicit PKIXParameters(jobject jobj)
		: object<PKIXParameters>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Cloneable>() const;
		operator local_ref<java::security::cert::CertPathParameters>() const;


		PKIXParameters(local_ref< java::util::Set > const&);
		PKIXParameters(local_ref< java::security::KeyStore > const&);
		local_ref< java::util::Set > getTrustAnchors();
		void setTrustAnchors(local_ref< java::util::Set >  const&);
		jboolean isAnyPolicyInhibited();
		void setAnyPolicyInhibited(jboolean);
		local_ref< java::util::List > getCertPathCheckers();
		void setCertPathCheckers(local_ref< java::util::List >  const&);
		void addCertPathChecker(local_ref< java::security::cert::PKIXCertPathChecker >  const&);
		local_ref< java::util::List > getCertStores();
		void setCertStores(local_ref< java::util::List >  const&);
		void addCertStore(local_ref< java::security::cert::CertStore >  const&);
		local_ref< java::util::Date > getDate();
		void setDate(local_ref< java::util::Date >  const&);
		jboolean isExplicitPolicyRequired();
		void setExplicitPolicyRequired(jboolean);
		local_ref< java::util::Set > getInitialPolicies();
		void setInitialPolicies(local_ref< java::util::Set >  const&);
		jboolean isPolicyMappingInhibited();
		void setPolicyMappingInhibited(jboolean);
		jboolean getPolicyQualifiersRejected();
		void setPolicyQualifiersRejected(jboolean);
		jboolean isRevocationEnabled();
		void setRevocationEnabled(jboolean);
		local_ref< java::lang::String > getSigProvider();
		void setSigProvider(local_ref< java::lang::String >  const&);
		local_ref< java::security::cert::CertSelector > getTargetCertConstraints();
		void setTargetCertConstraints(local_ref< java::security::cert::CertSelector >  const&);
		local_ref< java::lang::Object > clone();
		local_ref< java::lang::String > toString();
	}; //class PKIXParameters

} //namespace cert
} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_PKIXPARAMETERS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_PKIXPARAMETERS_HPP_IMPL
#define J2CPP_JAVA_SECURITY_CERT_PKIXPARAMETERS_HPP_IMPL

namespace j2cpp {



java::security::cert::PKIXParameters::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::security::cert::PKIXParameters::operator local_ref<java::lang::Cloneable>() const
{
	return local_ref<java::lang::Cloneable>(get_jobject());
}

java::security::cert::PKIXParameters::operator local_ref<java::security::cert::CertPathParameters>() const
{
	return local_ref<java::security::cert::CertPathParameters>(get_jobject());
}


java::security::cert::PKIXParameters::PKIXParameters(local_ref< java::util::Set > const &a0)
: object<java::security::cert::PKIXParameters>(
	call_new_object<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(0),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}



java::security::cert::PKIXParameters::PKIXParameters(local_ref< java::security::KeyStore > const &a0)
: object<java::security::cert::PKIXParameters>(
	call_new_object<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(1),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}


local_ref< java::util::Set > java::security::cert::PKIXParameters::getTrustAnchors()
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(2),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::util::Set >
	>(get_jobject());
}

void java::security::cert::PKIXParameters::setTrustAnchors(local_ref< java::util::Set > const &a0)
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(3),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0);
}

jboolean java::security::cert::PKIXParameters::isAnyPolicyInhibited()
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(4),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(get_jobject());
}

void java::security::cert::PKIXParameters::setAnyPolicyInhibited(jboolean a0)
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(5),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject(), a0);
}

local_ref< java::util::List > java::security::cert::PKIXParameters::getCertPathCheckers()
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(6),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::util::List >
	>(get_jobject());
}

void java::security::cert::PKIXParameters::setCertPathCheckers(local_ref< java::util::List > const &a0)
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(7),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0);
}

void java::security::cert::PKIXParameters::addCertPathChecker(local_ref< java::security::cert::PKIXCertPathChecker > const &a0)
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(8),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}

local_ref< java::util::List > java::security::cert::PKIXParameters::getCertStores()
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(9),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::util::List >
	>(get_jobject());
}

void java::security::cert::PKIXParameters::setCertStores(local_ref< java::util::List > const &a0)
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(10),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject(), a0);
}

void java::security::cert::PKIXParameters::addCertStore(local_ref< java::security::cert::CertStore > const &a0)
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(11),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject(), a0);
}

local_ref< java::util::Date > java::security::cert::PKIXParameters::getDate()
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(12),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(12), 
		local_ref< java::util::Date >
	>(get_jobject());
}

void java::security::cert::PKIXParameters::setDate(local_ref< java::util::Date > const &a0)
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(13),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject(), a0);
}

jboolean java::security::cert::PKIXParameters::isExplicitPolicyRequired()
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(14),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(14), 
		jboolean
	>(get_jobject());
}

void java::security::cert::PKIXParameters::setExplicitPolicyRequired(jboolean a0)
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(15),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(15), 
		void
	>(get_jobject(), a0);
}

local_ref< java::util::Set > java::security::cert::PKIXParameters::getInitialPolicies()
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(16),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(16), 
		local_ref< java::util::Set >
	>(get_jobject());
}

void java::security::cert::PKIXParameters::setInitialPolicies(local_ref< java::util::Set > const &a0)
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(17),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(17), 
		void
	>(get_jobject(), a0);
}

jboolean java::security::cert::PKIXParameters::isPolicyMappingInhibited()
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(18),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(18), 
		jboolean
	>(get_jobject());
}

void java::security::cert::PKIXParameters::setPolicyMappingInhibited(jboolean a0)
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(19),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(19), 
		void
	>(get_jobject(), a0);
}

jboolean java::security::cert::PKIXParameters::getPolicyQualifiersRejected()
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(20),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(20), 
		jboolean
	>(get_jobject());
}

void java::security::cert::PKIXParameters::setPolicyQualifiersRejected(jboolean a0)
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(21),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(21), 
		void
	>(get_jobject(), a0);
}

jboolean java::security::cert::PKIXParameters::isRevocationEnabled()
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(22),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(22), 
		jboolean
	>(get_jobject());
}

void java::security::cert::PKIXParameters::setRevocationEnabled(jboolean a0)
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(23),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(23), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::security::cert::PKIXParameters::getSigProvider()
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(24),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(24), 
		local_ref< java::lang::String >
	>(get_jobject());
}

void java::security::cert::PKIXParameters::setSigProvider(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(25),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(25), 
		void
	>(get_jobject(), a0);
}

local_ref< java::security::cert::CertSelector > java::security::cert::PKIXParameters::getTargetCertConstraints()
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(26),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(26), 
		local_ref< java::security::cert::CertSelector >
	>(get_jobject());
}

void java::security::cert::PKIXParameters::setTargetCertConstraints(local_ref< java::security::cert::CertSelector > const &a0)
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(27),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(27), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::Object > java::security::cert::PKIXParameters::clone()
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(28),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(28), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::String > java::security::cert::PKIXParameters::toString()
{
	return call_method<
		java::security::cert::PKIXParameters::J2CPP_CLASS_NAME,
		java::security::cert::PKIXParameters::J2CPP_METHOD_NAME(29),
		java::security::cert::PKIXParameters::J2CPP_METHOD_SIGNATURE(29), 
		local_ref< java::lang::String >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::security::cert::PKIXParameters,"java/security/cert/PKIXParameters")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,0,"<init>","(Ljava/util/Set;)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,1,"<init>","(Ljava/security/KeyStore;)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,2,"getTrustAnchors","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,3,"setTrustAnchors","(Ljava/util/Set;)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,4,"isAnyPolicyInhibited","()Z")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,5,"setAnyPolicyInhibited","(Z)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,6,"getCertPathCheckers","()Ljava/util/List;")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,7,"setCertPathCheckers","(Ljava/util/List;)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,8,"addCertPathChecker","(Ljava/security/cert/PKIXCertPathChecker;)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,9,"getCertStores","()Ljava/util/List;")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,10,"setCertStores","(Ljava/util/List;)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,11,"addCertStore","(Ljava/security/cert/CertStore;)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,12,"getDate","()Ljava/util/Date;")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,13,"setDate","(Ljava/util/Date;)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,14,"isExplicitPolicyRequired","()Z")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,15,"setExplicitPolicyRequired","(Z)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,16,"getInitialPolicies","()Ljava/util/Set;")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,17,"setInitialPolicies","(Ljava/util/Set;)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,18,"isPolicyMappingInhibited","()Z")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,19,"setPolicyMappingInhibited","(Z)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,20,"getPolicyQualifiersRejected","()Z")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,21,"setPolicyQualifiersRejected","(Z)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,22,"isRevocationEnabled","()Z")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,23,"setRevocationEnabled","(Z)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,24,"getSigProvider","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,25,"setSigProvider","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,26,"getTargetCertConstraints","()Ljava/security/cert/CertSelector;")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,27,"setTargetCertConstraints","(Ljava/security/cert/CertSelector;)V")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,28,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::security::cert::PKIXParameters,29,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_PKIXPARAMETERS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

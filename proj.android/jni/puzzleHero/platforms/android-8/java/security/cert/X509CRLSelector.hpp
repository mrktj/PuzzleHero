/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.security.cert.X509CRLSelector
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_X509CRLSELECTOR_HPP_DECL
#define J2CPP_JAVA_SECURITY_CERT_X509CRLSELECTOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Cloneable; } } }
namespace j2cpp { namespace java { namespace math { class BigInteger; } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class CRL; } } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class X509Certificate; } } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class CRLSelector; } } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }
namespace j2cpp { namespace javax { namespace security { namespace auth { namespace x500 { class X500Principal; } } } } }


#include <java/lang/Cloneable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/math/BigInteger.hpp>
#include <java/security/cert/CRL.hpp>
#include <java/security/cert/CRLSelector.hpp>
#include <java/security/cert/X509Certificate.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Date.hpp>
#include <javax/security/auth/x500/X500Principal.hpp>


namespace j2cpp {

namespace java { namespace security { namespace cert {

	class X509CRLSelector;
	class X509CRLSelector
		: public object<X509CRLSelector>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)

		explicit X509CRLSelector(jobject jobj)
		: object<X509CRLSelector>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Cloneable>() const;
		operator local_ref<java::security::cert::CRLSelector>() const;


		X509CRLSelector();
		void setIssuers(local_ref< java::util::Collection >  const&);
		void setIssuerNames(local_ref< java::util::Collection >  const&);
		void addIssuer(local_ref< javax::security::auth::x500::X500Principal >  const&);
		void addIssuerName(local_ref< java::lang::String >  const&);
		void addIssuerName(local_ref< array<jbyte,1> >  const&);
		void setMinCRLNumber(local_ref< java::math::BigInteger >  const&);
		void setMaxCRLNumber(local_ref< java::math::BigInteger >  const&);
		void setDateAndTime(local_ref< java::util::Date >  const&);
		void setCertificateChecking(local_ref< java::security::cert::X509Certificate >  const&);
		local_ref< java::util::Collection > getIssuers();
		local_ref< java::util::Collection > getIssuerNames();
		local_ref< java::math::BigInteger > getMinCRL();
		local_ref< java::math::BigInteger > getMaxCRL();
		local_ref< java::util::Date > getDateAndTime();
		local_ref< java::security::cert::X509Certificate > getCertificateChecking();
		local_ref< java::lang::String > toString();
		jboolean match(local_ref< java::security::cert::CRL >  const&);
		local_ref< java::lang::Object > clone();
	}; //class X509CRLSelector

} //namespace cert
} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_X509CRLSELECTOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_X509CRLSELECTOR_HPP_IMPL
#define J2CPP_JAVA_SECURITY_CERT_X509CRLSELECTOR_HPP_IMPL

namespace j2cpp {



java::security::cert::X509CRLSelector::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::security::cert::X509CRLSelector::operator local_ref<java::lang::Cloneable>() const
{
	return local_ref<java::lang::Cloneable>(get_jobject());
}

java::security::cert::X509CRLSelector::operator local_ref<java::security::cert::CRLSelector>() const
{
	return local_ref<java::security::cert::CRLSelector>(get_jobject());
}


java::security::cert::X509CRLSelector::X509CRLSelector()
: object<java::security::cert::X509CRLSelector>(
	call_new_object<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(0),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


void java::security::cert::X509CRLSelector::setIssuers(local_ref< java::util::Collection > const &a0)
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(1),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0);
}

void java::security::cert::X509CRLSelector::setIssuerNames(local_ref< java::util::Collection > const &a0)
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(2),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0);
}

void java::security::cert::X509CRLSelector::addIssuer(local_ref< javax::security::auth::x500::X500Principal > const &a0)
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(3),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0);
}

void java::security::cert::X509CRLSelector::addIssuerName(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(4),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}

void java::security::cert::X509CRLSelector::addIssuerName(local_ref< array<jbyte,1> > const &a0)
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(5),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject(), a0);
}

void java::security::cert::X509CRLSelector::setMinCRLNumber(local_ref< java::math::BigInteger > const &a0)
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(6),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject(), a0);
}

void java::security::cert::X509CRLSelector::setMaxCRLNumber(local_ref< java::math::BigInteger > const &a0)
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(7),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0);
}

void java::security::cert::X509CRLSelector::setDateAndTime(local_ref< java::util::Date > const &a0)
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(8),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}

void java::security::cert::X509CRLSelector::setCertificateChecking(local_ref< java::security::cert::X509Certificate > const &a0)
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(9),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(9), 
		void
	>(get_jobject(), a0);
}

local_ref< java::util::Collection > java::security::cert::X509CRLSelector::getIssuers()
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(10),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::util::Collection >
	>(get_jobject());
}

local_ref< java::util::Collection > java::security::cert::X509CRLSelector::getIssuerNames()
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(11),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< java::util::Collection >
	>(get_jobject());
}

local_ref< java::math::BigInteger > java::security::cert::X509CRLSelector::getMinCRL()
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(12),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(12), 
		local_ref< java::math::BigInteger >
	>(get_jobject());
}

local_ref< java::math::BigInteger > java::security::cert::X509CRLSelector::getMaxCRL()
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(13),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(13), 
		local_ref< java::math::BigInteger >
	>(get_jobject());
}

local_ref< java::util::Date > java::security::cert::X509CRLSelector::getDateAndTime()
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(14),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(14), 
		local_ref< java::util::Date >
	>(get_jobject());
}

local_ref< java::security::cert::X509Certificate > java::security::cert::X509CRLSelector::getCertificateChecking()
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(15),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(15), 
		local_ref< java::security::cert::X509Certificate >
	>(get_jobject());
}

local_ref< java::lang::String > java::security::cert::X509CRLSelector::toString()
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(16),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(16), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean java::security::cert::X509CRLSelector::match(local_ref< java::security::cert::CRL > const &a0)
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(17),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(17), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< java::lang::Object > java::security::cert::X509CRLSelector::clone()
{
	return call_method<
		java::security::cert::X509CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLSelector::J2CPP_METHOD_NAME(18),
		java::security::cert::X509CRLSelector::J2CPP_METHOD_SIGNATURE(18), 
		local_ref< java::lang::Object >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::security::cert::X509CRLSelector,"java/security/cert/X509CRLSelector")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,1,"setIssuers","(Ljava/util/Collection;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,2,"setIssuerNames","(Ljava/util/Collection;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,3,"addIssuer","(Ljavax/security/auth/x500/X500Principal;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,4,"addIssuerName","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,5,"addIssuerName","([B)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,6,"setMinCRLNumber","(Ljava/math/BigInteger;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,7,"setMaxCRLNumber","(Ljava/math/BigInteger;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,8,"setDateAndTime","(Ljava/util/Date;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,9,"setCertificateChecking","(Ljava/security/cert/X509Certificate;)V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,10,"getIssuers","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,11,"getIssuerNames","()Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,12,"getMinCRL","()Ljava/math/BigInteger;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,13,"getMaxCRL","()Ljava/math/BigInteger;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,14,"getDateAndTime","()Ljava/util/Date;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,15,"getCertificateChecking","()Ljava/security/cert/X509Certificate;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,16,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,17,"match","(Ljava/security/cert/CRL;)Z")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLSelector,18,"clone","()Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_X509CRLSELECTOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

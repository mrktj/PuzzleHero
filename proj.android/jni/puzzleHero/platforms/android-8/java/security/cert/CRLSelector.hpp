/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.security.cert.CRLSelector
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_CRLSELECTOR_HPP_DECL
#define J2CPP_JAVA_SECURITY_CERT_CRLSELECTOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Cloneable; } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class CRL; } } } }


#include <java/lang/Cloneable.hpp>
#include <java/lang/Object.hpp>
#include <java/security/cert/CRL.hpp>


namespace j2cpp {

namespace java { namespace security { namespace cert {

	class CRLSelector;
	class CRLSelector
		: public object<CRLSelector>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		explicit CRLSelector(jobject jobj)
		: object<CRLSelector>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Cloneable>() const;


		local_ref< java::lang::Object > clone();
		jboolean match(local_ref< java::security::cert::CRL >  const&);
	}; //class CRLSelector

} //namespace cert
} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_CRLSELECTOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_CRLSELECTOR_HPP_IMPL
#define J2CPP_JAVA_SECURITY_CERT_CRLSELECTOR_HPP_IMPL

namespace j2cpp {



java::security::cert::CRLSelector::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::security::cert::CRLSelector::operator local_ref<java::lang::Cloneable>() const
{
	return local_ref<java::lang::Cloneable>(get_jobject());
}

local_ref< java::lang::Object > java::security::cert::CRLSelector::clone()
{
	return call_method<
		java::security::cert::CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::CRLSelector::J2CPP_METHOD_NAME(0),
		java::security::cert::CRLSelector::J2CPP_METHOD_SIGNATURE(0), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jboolean java::security::cert::CRLSelector::match(local_ref< java::security::cert::CRL > const &a0)
{
	return call_method<
		java::security::cert::CRLSelector::J2CPP_CLASS_NAME,
		java::security::cert::CRLSelector::J2CPP_METHOD_NAME(1),
		java::security::cert::CRLSelector::J2CPP_METHOD_SIGNATURE(1), 
		jboolean
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::security::cert::CRLSelector,"java/security/cert/CRLSelector")
J2CPP_DEFINE_METHOD(java::security::cert::CRLSelector,0,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::security::cert::CRLSelector,1,"match","(Ljava/security/cert/CRL;)Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_CRLSELECTOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

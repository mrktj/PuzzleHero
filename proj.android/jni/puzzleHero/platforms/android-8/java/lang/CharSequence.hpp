/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.lang.CharSequence
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_CHARSEQUENCE_HPP_DECL
#define J2CPP_JAVA_LANG_CHARSEQUENCE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class CharSequence;
	class CharSequence
		: public object<CharSequence>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		explicit CharSequence(jobject jobj)
		: object<CharSequence>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		jint length();
		jchar charAt(jint);
		local_ref< java::lang::CharSequence > subSequence(jint, jint);
		local_ref< java::lang::String > toString();
	}; //class CharSequence

} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_CHARSEQUENCE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_CHARSEQUENCE_HPP_IMPL
#define J2CPP_JAVA_LANG_CHARSEQUENCE_HPP_IMPL

namespace j2cpp {



java::lang::CharSequence::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

jint java::lang::CharSequence::length()
{
	return call_method<
		java::lang::CharSequence::J2CPP_CLASS_NAME,
		java::lang::CharSequence::J2CPP_METHOD_NAME(0),
		java::lang::CharSequence::J2CPP_METHOD_SIGNATURE(0), 
		jint
	>(get_jobject());
}

jchar java::lang::CharSequence::charAt(jint a0)
{
	return call_method<
		java::lang::CharSequence::J2CPP_CLASS_NAME,
		java::lang::CharSequence::J2CPP_METHOD_NAME(1),
		java::lang::CharSequence::J2CPP_METHOD_SIGNATURE(1), 
		jchar
	>(get_jobject(), a0);
}

local_ref< java::lang::CharSequence > java::lang::CharSequence::subSequence(jint a0, jint a1)
{
	return call_method<
		java::lang::CharSequence::J2CPP_CLASS_NAME,
		java::lang::CharSequence::J2CPP_METHOD_NAME(2),
		java::lang::CharSequence::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::lang::CharSequence >
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::String > java::lang::CharSequence::toString()
{
	return call_method<
		java::lang::CharSequence::J2CPP_CLASS_NAME,
		java::lang::CharSequence::J2CPP_METHOD_NAME(3),
		java::lang::CharSequence::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::String >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::lang::CharSequence,"java/lang/CharSequence")
J2CPP_DEFINE_METHOD(java::lang::CharSequence,0,"length","()I")
J2CPP_DEFINE_METHOD(java::lang::CharSequence,1,"charAt","(I)C")
J2CPP_DEFINE_METHOD(java::lang::CharSequence,2,"subSequence","(II)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(java::lang::CharSequence,3,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_CHARSEQUENCE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

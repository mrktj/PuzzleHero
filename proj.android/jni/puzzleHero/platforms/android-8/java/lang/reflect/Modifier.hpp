/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.lang.reflect.Modifier
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_MODIFIER_HPP_DECL
#define J2CPP_JAVA_LANG_REFLECT_MODIFIER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace lang { namespace reflect {

	class Modifier;
	class Modifier
		: public object<Modifier>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)
		J2CPP_DECLARE_FIELD(10)
		J2CPP_DECLARE_FIELD(11)

		explicit Modifier(jobject jobj)
		: object<Modifier>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		Modifier();
		static jboolean isAbstract(jint);
		static jboolean isFinal(jint);
		static jboolean isInterface(jint);
		static jboolean isNative(jint);
		static jboolean isPrivate(jint);
		static jboolean isProtected(jint);
		static jboolean isPublic(jint);
		static jboolean isStatic(jint);
		static jboolean isStrict(jint);
		static jboolean isSynchronized(jint);
		static jboolean isTransient(jint);
		static jboolean isVolatile(jint);
		static local_ref< java::lang::String > toString(jint);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > PUBLIC;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > PRIVATE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > PROTECTED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > STATIC;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), jint > FINAL;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), jint > SYNCHRONIZED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), jint > VOLATILE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), jint > TRANSIENT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), jint > NATIVE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), jint > INTERFACE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), jint > ABSTRACT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(11), J2CPP_FIELD_SIGNATURE(11), jint > STRICT;
	}; //class Modifier

} //namespace reflect
} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_MODIFIER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_MODIFIER_HPP_IMPL
#define J2CPP_JAVA_LANG_REFLECT_MODIFIER_HPP_IMPL

namespace j2cpp {



java::lang::reflect::Modifier::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::lang::reflect::Modifier::Modifier()
: object<java::lang::reflect::Modifier>(
	call_new_object<
		java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
		java::lang::reflect::Modifier::J2CPP_METHOD_NAME(0),
		java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


jboolean java::lang::reflect::Modifier::isAbstract(jint a0)
{
	return call_static_method<
		java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
		java::lang::reflect::Modifier::J2CPP_METHOD_NAME(1),
		java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(1), 
		jboolean
	>(a0);
}

jboolean java::lang::reflect::Modifier::isFinal(jint a0)
{
	return call_static_method<
		java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
		java::lang::reflect::Modifier::J2CPP_METHOD_NAME(2),
		java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(a0);
}

jboolean java::lang::reflect::Modifier::isInterface(jint a0)
{
	return call_static_method<
		java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
		java::lang::reflect::Modifier::J2CPP_METHOD_NAME(3),
		java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(a0);
}

jboolean java::lang::reflect::Modifier::isNative(jint a0)
{
	return call_static_method<
		java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
		java::lang::reflect::Modifier::J2CPP_METHOD_NAME(4),
		java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(a0);
}

jboolean java::lang::reflect::Modifier::isPrivate(jint a0)
{
	return call_static_method<
		java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
		java::lang::reflect::Modifier::J2CPP_METHOD_NAME(5),
		java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(5), 
		jboolean
	>(a0);
}

jboolean java::lang::reflect::Modifier::isProtected(jint a0)
{
	return call_static_method<
		java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
		java::lang::reflect::Modifier::J2CPP_METHOD_NAME(6),
		java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(6), 
		jboolean
	>(a0);
}

jboolean java::lang::reflect::Modifier::isPublic(jint a0)
{
	return call_static_method<
		java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
		java::lang::reflect::Modifier::J2CPP_METHOD_NAME(7),
		java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(a0);
}

jboolean java::lang::reflect::Modifier::isStatic(jint a0)
{
	return call_static_method<
		java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
		java::lang::reflect::Modifier::J2CPP_METHOD_NAME(8),
		java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(8), 
		jboolean
	>(a0);
}

jboolean java::lang::reflect::Modifier::isStrict(jint a0)
{
	return call_static_method<
		java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
		java::lang::reflect::Modifier::J2CPP_METHOD_NAME(9),
		java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(9), 
		jboolean
	>(a0);
}

jboolean java::lang::reflect::Modifier::isSynchronized(jint a0)
{
	return call_static_method<
		java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
		java::lang::reflect::Modifier::J2CPP_METHOD_NAME(10),
		java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(10), 
		jboolean
	>(a0);
}

jboolean java::lang::reflect::Modifier::isTransient(jint a0)
{
	return call_static_method<
		java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
		java::lang::reflect::Modifier::J2CPP_METHOD_NAME(11),
		java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(11), 
		jboolean
	>(a0);
}

jboolean java::lang::reflect::Modifier::isVolatile(jint a0)
{
	return call_static_method<
		java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
		java::lang::reflect::Modifier::J2CPP_METHOD_NAME(12),
		java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(12), 
		jboolean
	>(a0);
}

local_ref< java::lang::String > java::lang::reflect::Modifier::toString(jint a0)
{
	return call_static_method<
		java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
		java::lang::reflect::Modifier::J2CPP_METHOD_NAME(13),
		java::lang::reflect::Modifier::J2CPP_METHOD_SIGNATURE(13), 
		local_ref< java::lang::String >
	>(a0);
}


static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(0),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(0),
	jint
> java::lang::reflect::Modifier::PUBLIC;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(1),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(1),
	jint
> java::lang::reflect::Modifier::PRIVATE;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(2),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(2),
	jint
> java::lang::reflect::Modifier::PROTECTED;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(3),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(3),
	jint
> java::lang::reflect::Modifier::STATIC;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(4),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(4),
	jint
> java::lang::reflect::Modifier::FINAL;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(5),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(5),
	jint
> java::lang::reflect::Modifier::SYNCHRONIZED;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(6),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(6),
	jint
> java::lang::reflect::Modifier::VOLATILE;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(7),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(7),
	jint
> java::lang::reflect::Modifier::TRANSIENT;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(8),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(8),
	jint
> java::lang::reflect::Modifier::NATIVE;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(9),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(9),
	jint
> java::lang::reflect::Modifier::INTERFACE;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(10),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(10),
	jint
> java::lang::reflect::Modifier::ABSTRACT;

static_field<
	java::lang::reflect::Modifier::J2CPP_CLASS_NAME,
	java::lang::reflect::Modifier::J2CPP_FIELD_NAME(11),
	java::lang::reflect::Modifier::J2CPP_FIELD_SIGNATURE(11),
	jint
> java::lang::reflect::Modifier::STRICT;


J2CPP_DEFINE_CLASS(java::lang::reflect::Modifier,"java/lang/reflect/Modifier")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,1,"isAbstract","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,2,"isFinal","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,3,"isInterface","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,4,"isNative","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,5,"isPrivate","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,6,"isProtected","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,7,"isPublic","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,8,"isStatic","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,9,"isStrict","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,10,"isSynchronized","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,11,"isTransient","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,12,"isVolatile","(I)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Modifier,13,"toString","(I)Ljava/lang/String;")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,0,"PUBLIC","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,1,"PRIVATE","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,2,"PROTECTED","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,3,"STATIC","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,4,"FINAL","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,5,"SYNCHRONIZED","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,6,"VOLATILE","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,7,"TRANSIENT","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,8,"NATIVE","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,9,"INTERFACE","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,10,"ABSTRACT","I")
J2CPP_DEFINE_FIELD(java::lang::reflect::Modifier,11,"STRICT","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_MODIFIER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

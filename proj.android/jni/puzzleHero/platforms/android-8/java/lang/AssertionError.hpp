/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.lang.AssertionError
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_ASSERTIONERROR_HPP_DECL
#define J2CPP_JAVA_LANG_ASSERTIONERROR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Error; } } }
namespace j2cpp { namespace java { namespace lang { class Throwable; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Error.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/Throwable.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class AssertionError;
	class AssertionError
		: public object<AssertionError>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)

		explicit AssertionError(jobject jobj)
		: object<AssertionError>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Error>() const;
		operator local_ref<java::lang::Throwable>() const;
		operator local_ref<java::io::Serializable>() const;


		AssertionError();
		AssertionError(local_ref< java::lang::Object > const&);
		AssertionError(jboolean);
		AssertionError(jchar);
		AssertionError(jint);
		AssertionError(jlong);
		AssertionError(jfloat);
		AssertionError(jdouble);
	}; //class AssertionError

} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_ASSERTIONERROR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_ASSERTIONERROR_HPP_IMPL
#define J2CPP_JAVA_LANG_ASSERTIONERROR_HPP_IMPL

namespace j2cpp {



java::lang::AssertionError::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::lang::AssertionError::operator local_ref<java::lang::Error>() const
{
	return local_ref<java::lang::Error>(get_jobject());
}

java::lang::AssertionError::operator local_ref<java::lang::Throwable>() const
{
	return local_ref<java::lang::Throwable>(get_jobject());
}

java::lang::AssertionError::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


java::lang::AssertionError::AssertionError()
: object<java::lang::AssertionError>(
	call_new_object<
		java::lang::AssertionError::J2CPP_CLASS_NAME,
		java::lang::AssertionError::J2CPP_METHOD_NAME(0),
		java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}



java::lang::AssertionError::AssertionError(local_ref< java::lang::Object > const &a0)
: object<java::lang::AssertionError>(
	call_new_object<
		java::lang::AssertionError::J2CPP_CLASS_NAME,
		java::lang::AssertionError::J2CPP_METHOD_NAME(1),
		java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}



java::lang::AssertionError::AssertionError(jboolean a0)
: object<java::lang::AssertionError>(
	call_new_object<
		java::lang::AssertionError::J2CPP_CLASS_NAME,
		java::lang::AssertionError::J2CPP_METHOD_NAME(2),
		java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(2)
	>(a0)
)
{
}



java::lang::AssertionError::AssertionError(jchar a0)
: object<java::lang::AssertionError>(
	call_new_object<
		java::lang::AssertionError::J2CPP_CLASS_NAME,
		java::lang::AssertionError::J2CPP_METHOD_NAME(3),
		java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(3)
	>(a0)
)
{
}



java::lang::AssertionError::AssertionError(jint a0)
: object<java::lang::AssertionError>(
	call_new_object<
		java::lang::AssertionError::J2CPP_CLASS_NAME,
		java::lang::AssertionError::J2CPP_METHOD_NAME(4),
		java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(4)
	>(a0)
)
{
}



java::lang::AssertionError::AssertionError(jlong a0)
: object<java::lang::AssertionError>(
	call_new_object<
		java::lang::AssertionError::J2CPP_CLASS_NAME,
		java::lang::AssertionError::J2CPP_METHOD_NAME(5),
		java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(5)
	>(a0)
)
{
}



java::lang::AssertionError::AssertionError(jfloat a0)
: object<java::lang::AssertionError>(
	call_new_object<
		java::lang::AssertionError::J2CPP_CLASS_NAME,
		java::lang::AssertionError::J2CPP_METHOD_NAME(6),
		java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(6)
	>(a0)
)
{
}



java::lang::AssertionError::AssertionError(jdouble a0)
: object<java::lang::AssertionError>(
	call_new_object<
		java::lang::AssertionError::J2CPP_CLASS_NAME,
		java::lang::AssertionError::J2CPP_METHOD_NAME(7),
		java::lang::AssertionError::J2CPP_METHOD_SIGNATURE(7)
	>(a0)
)
{
}



J2CPP_DEFINE_CLASS(java::lang::AssertionError,"java/lang/AssertionError")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,1,"<init>","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,2,"<init>","(Z)V")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,3,"<init>","(C)V")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,4,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,5,"<init>","(J)V")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,6,"<init>","(F)V")
J2CPP_DEFINE_METHOD(java::lang::AssertionError,7,"<init>","(D)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_ASSERTIONERROR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.lang.StackTraceElement
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_STACKTRACEELEMENT_HPP_DECL
#define J2CPP_JAVA_LANG_STACKTRACEELEMENT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class StackTraceElement;
	class StackTraceElement
		: public object<StackTraceElement>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit StackTraceElement(jobject jobj)
		: object<StackTraceElement>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		StackTraceElement(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, jint);
		jboolean equals(local_ref< java::lang::Object >  const&);
		local_ref< java::lang::String > getClassName();
		local_ref< java::lang::String > getFileName();
		jint getLineNumber();
		local_ref< java::lang::String > getMethodName();
		jint hashCode();
		jboolean isNativeMethod();
		local_ref< java::lang::String > toString();
	}; //class StackTraceElement

} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_STACKTRACEELEMENT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_STACKTRACEELEMENT_HPP_IMPL
#define J2CPP_JAVA_LANG_STACKTRACEELEMENT_HPP_IMPL

namespace j2cpp {



java::lang::StackTraceElement::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::lang::StackTraceElement::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


java::lang::StackTraceElement::StackTraceElement(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, jint a3)
: object<java::lang::StackTraceElement>(
	call_new_object<
		java::lang::StackTraceElement::J2CPP_CLASS_NAME,
		java::lang::StackTraceElement::J2CPP_METHOD_NAME(0),
		java::lang::StackTraceElement::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1, a2, a3)
)
{
}


jboolean java::lang::StackTraceElement::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::lang::StackTraceElement::J2CPP_CLASS_NAME,
		java::lang::StackTraceElement::J2CPP_METHOD_NAME(1),
		java::lang::StackTraceElement::J2CPP_METHOD_SIGNATURE(1), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::lang::StackTraceElement::getClassName()
{
	return call_method<
		java::lang::StackTraceElement::J2CPP_CLASS_NAME,
		java::lang::StackTraceElement::J2CPP_METHOD_NAME(2),
		java::lang::StackTraceElement::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::lang::StackTraceElement::getFileName()
{
	return call_method<
		java::lang::StackTraceElement::J2CPP_CLASS_NAME,
		java::lang::StackTraceElement::J2CPP_METHOD_NAME(3),
		java::lang::StackTraceElement::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint java::lang::StackTraceElement::getLineNumber()
{
	return call_method<
		java::lang::StackTraceElement::J2CPP_CLASS_NAME,
		java::lang::StackTraceElement::J2CPP_METHOD_NAME(4),
		java::lang::StackTraceElement::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject());
}

local_ref< java::lang::String > java::lang::StackTraceElement::getMethodName()
{
	return call_method<
		java::lang::StackTraceElement::J2CPP_CLASS_NAME,
		java::lang::StackTraceElement::J2CPP_METHOD_NAME(5),
		java::lang::StackTraceElement::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint java::lang::StackTraceElement::hashCode()
{
	return call_method<
		java::lang::StackTraceElement::J2CPP_CLASS_NAME,
		java::lang::StackTraceElement::J2CPP_METHOD_NAME(6),
		java::lang::StackTraceElement::J2CPP_METHOD_SIGNATURE(6), 
		jint
	>(get_jobject());
}

jboolean java::lang::StackTraceElement::isNativeMethod()
{
	return call_method<
		java::lang::StackTraceElement::J2CPP_CLASS_NAME,
		java::lang::StackTraceElement::J2CPP_METHOD_NAME(7),
		java::lang::StackTraceElement::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject());
}

local_ref< java::lang::String > java::lang::StackTraceElement::toString()
{
	return call_method<
		java::lang::StackTraceElement::J2CPP_CLASS_NAME,
		java::lang::StackTraceElement::J2CPP_METHOD_NAME(8),
		java::lang::StackTraceElement::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::lang::String >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::lang::StackTraceElement,"java/lang/StackTraceElement")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,0,"<init>","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,1,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,2,"getClassName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,3,"getFileName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,4,"getLineNumber","()I")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,5,"getMethodName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,6,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,7,"isNativeMethod","()Z")
J2CPP_DEFINE_METHOD(java::lang::StackTraceElement,8,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_STACKTRACEELEMENT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.lang.AbstractStringBuilder
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_ABSTRACTSTRINGBUILDER_HPP_DECL
#define J2CPP_JAVA_LANG_ABSTRACTSTRINGBUILDER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/CharSequence.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class AbstractStringBuilder;
	class AbstractStringBuilder
		: public object<AbstractStringBuilder>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)

		explicit AbstractStringBuilder(jobject jobj)
		: object<AbstractStringBuilder>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		jint capacity();
		jchar charAt(jint);
		void ensureCapacity(jint);
		void getChars(jint, jint, local_ref< array<jchar,1> >  const&, jint);
		jint length();
		void setCharAt(jint, jchar);
		void setLength(jint);
		local_ref< java::lang::String > substring(jint);
		local_ref< java::lang::String > substring(jint, jint);
		local_ref< java::lang::String > toString();
		local_ref< java::lang::CharSequence > subSequence(jint, jint);
		jint indexOf(local_ref< java::lang::String >  const&);
		jint indexOf(local_ref< java::lang::String >  const&, jint);
		jint lastIndexOf(local_ref< java::lang::String >  const&);
		jint lastIndexOf(local_ref< java::lang::String >  const&, jint);
		void trimToSize();
		jint codePointAt(jint);
		jint codePointBefore(jint);
		jint codePointCount(jint, jint);
		jint offsetByCodePoints(jint, jint);
	}; //class AbstractStringBuilder

} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_ABSTRACTSTRINGBUILDER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_ABSTRACTSTRINGBUILDER_HPP_IMPL
#define J2CPP_JAVA_LANG_ABSTRACTSTRINGBUILDER_HPP_IMPL

namespace j2cpp {



java::lang::AbstractStringBuilder::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


jint java::lang::AbstractStringBuilder::capacity()
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(1),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(1), 
		jint
	>(get_jobject());
}

jchar java::lang::AbstractStringBuilder::charAt(jint a0)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(2),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(2), 
		jchar
	>(get_jobject(), a0);
}

void java::lang::AbstractStringBuilder::ensureCapacity(jint a0)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(3),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0);
}

void java::lang::AbstractStringBuilder::getChars(jint a0, jint a1, local_ref< array<jchar,1> > const &a2, jint a3)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(4),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0, a1, a2, a3);
}

jint java::lang::AbstractStringBuilder::length()
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(5),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(5), 
		jint
	>(get_jobject());
}

void java::lang::AbstractStringBuilder::setCharAt(jint a0, jchar a1)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(6),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject(), a0, a1);
}

void java::lang::AbstractStringBuilder::setLength(jint a0)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(7),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::lang::AbstractStringBuilder::substring(jint a0)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(8),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::lang::String >
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::lang::AbstractStringBuilder::substring(jint a0, jint a1)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(9),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::lang::String >
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::String > java::lang::AbstractStringBuilder::toString()
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(10),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::CharSequence > java::lang::AbstractStringBuilder::subSequence(jint a0, jint a1)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(11),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< java::lang::CharSequence >
	>(get_jobject(), a0, a1);
}

jint java::lang::AbstractStringBuilder::indexOf(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(12),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(12), 
		jint
	>(get_jobject(), a0);
}

jint java::lang::AbstractStringBuilder::indexOf(local_ref< java::lang::String > const &a0, jint a1)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(13),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(13), 
		jint
	>(get_jobject(), a0, a1);
}

jint java::lang::AbstractStringBuilder::lastIndexOf(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(14),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(14), 
		jint
	>(get_jobject(), a0);
}

jint java::lang::AbstractStringBuilder::lastIndexOf(local_ref< java::lang::String > const &a0, jint a1)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(15),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(15), 
		jint
	>(get_jobject(), a0, a1);
}

void java::lang::AbstractStringBuilder::trimToSize()
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(16),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(16), 
		void
	>(get_jobject());
}

jint java::lang::AbstractStringBuilder::codePointAt(jint a0)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(17),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(17), 
		jint
	>(get_jobject(), a0);
}

jint java::lang::AbstractStringBuilder::codePointBefore(jint a0)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(18),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(18), 
		jint
	>(get_jobject(), a0);
}

jint java::lang::AbstractStringBuilder::codePointCount(jint a0, jint a1)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(19),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(19), 
		jint
	>(get_jobject(), a0, a1);
}

jint java::lang::AbstractStringBuilder::offsetByCodePoints(jint a0, jint a1)
{
	return call_method<
		java::lang::AbstractStringBuilder::J2CPP_CLASS_NAME,
		java::lang::AbstractStringBuilder::J2CPP_METHOD_NAME(20),
		java::lang::AbstractStringBuilder::J2CPP_METHOD_SIGNATURE(20), 
		jint
	>(get_jobject(), a0, a1);
}


J2CPP_DEFINE_CLASS(java::lang::AbstractStringBuilder,"java/lang/AbstractStringBuilder")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,1,"capacity","()I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,2,"charAt","(I)C")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,3,"ensureCapacity","(I)V")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,4,"getChars","(II[CI)V")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,5,"length","()I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,6,"setCharAt","(IC)V")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,7,"setLength","(I)V")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,8,"substring","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,9,"substring","(II)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,10,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,11,"subSequence","(II)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,12,"indexOf","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,13,"indexOf","(Ljava/lang/String;I)I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,14,"lastIndexOf","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,15,"lastIndexOf","(Ljava/lang/String;I)I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,16,"trimToSize","()V")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,17,"codePointAt","(I)I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,18,"codePointBefore","(I)I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,19,"codePointCount","(II)I")
J2CPP_DEFINE_METHOD(java::lang::AbstractStringBuilder,20,"offsetByCodePoints","(II)I")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_ABSTRACTSTRINGBUILDER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.lang.ref.SoftReference
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REF_SOFTREFERENCE_HPP_DECL
#define J2CPP_JAVA_LANG_REF_SOFTREFERENCE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { namespace ref { class Reference; } } } }
namespace j2cpp { namespace java { namespace lang { namespace ref { class ReferenceQueue; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/ref/Reference.hpp>
#include <java/lang/ref/ReferenceQueue.hpp>


namespace j2cpp {

namespace java { namespace lang { namespace ref {

	class SoftReference;
	class SoftReference
		: public object<SoftReference>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		explicit SoftReference(jobject jobj)
		: object<SoftReference>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::ref::Reference>() const;


		SoftReference(local_ref< java::lang::Object > const&);
		SoftReference(local_ref< java::lang::Object > const&, local_ref< java::lang::ref::ReferenceQueue > const&);
	}; //class SoftReference

} //namespace ref
} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REF_SOFTREFERENCE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REF_SOFTREFERENCE_HPP_IMPL
#define J2CPP_JAVA_LANG_REF_SOFTREFERENCE_HPP_IMPL

namespace j2cpp {



java::lang::ref::SoftReference::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::lang::ref::SoftReference::operator local_ref<java::lang::ref::Reference>() const
{
	return local_ref<java::lang::ref::Reference>(get_jobject());
}


java::lang::ref::SoftReference::SoftReference(local_ref< java::lang::Object > const &a0)
: object<java::lang::ref::SoftReference>(
	call_new_object<
		java::lang::ref::SoftReference::J2CPP_CLASS_NAME,
		java::lang::ref::SoftReference::J2CPP_METHOD_NAME(0),
		java::lang::ref::SoftReference::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}



java::lang::ref::SoftReference::SoftReference(local_ref< java::lang::Object > const &a0, local_ref< java::lang::ref::ReferenceQueue > const &a1)
: object<java::lang::ref::SoftReference>(
	call_new_object<
		java::lang::ref::SoftReference::J2CPP_CLASS_NAME,
		java::lang::ref::SoftReference::J2CPP_METHOD_NAME(1),
		java::lang::ref::SoftReference::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1)
)
{
}



J2CPP_DEFINE_CLASS(java::lang::ref::SoftReference,"java/lang/ref/SoftReference")
J2CPP_DEFINE_METHOD(java::lang::ref::SoftReference,0,"<init>","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::lang::ref::SoftReference,1,"<init>","(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REF_SOFTREFERENCE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

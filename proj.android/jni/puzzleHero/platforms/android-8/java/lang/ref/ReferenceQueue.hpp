/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.lang.ref.ReferenceQueue
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REF_REFERENCEQUEUE_HPP_DECL
#define J2CPP_JAVA_LANG_REF_REFERENCEQUEUE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { namespace ref { class Reference; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/ref/Reference.hpp>


namespace j2cpp {

namespace java { namespace lang { namespace ref {

	class ReferenceQueue;
	class ReferenceQueue
		: public object<ReferenceQueue>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		explicit ReferenceQueue(jobject jobj)
		: object<ReferenceQueue>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		ReferenceQueue();
		local_ref< java::lang::ref::Reference > poll();
		local_ref< java::lang::ref::Reference > remove();
		local_ref< java::lang::ref::Reference > remove(jlong);
	}; //class ReferenceQueue

} //namespace ref
} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REF_REFERENCEQUEUE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REF_REFERENCEQUEUE_HPP_IMPL
#define J2CPP_JAVA_LANG_REF_REFERENCEQUEUE_HPP_IMPL

namespace j2cpp {



java::lang::ref::ReferenceQueue::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::lang::ref::ReferenceQueue::ReferenceQueue()
: object<java::lang::ref::ReferenceQueue>(
	call_new_object<
		java::lang::ref::ReferenceQueue::J2CPP_CLASS_NAME,
		java::lang::ref::ReferenceQueue::J2CPP_METHOD_NAME(0),
		java::lang::ref::ReferenceQueue::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


local_ref< java::lang::ref::Reference > java::lang::ref::ReferenceQueue::poll()
{
	return call_method<
		java::lang::ref::ReferenceQueue::J2CPP_CLASS_NAME,
		java::lang::ref::ReferenceQueue::J2CPP_METHOD_NAME(1),
		java::lang::ref::ReferenceQueue::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::ref::Reference >
	>(get_jobject());
}

local_ref< java::lang::ref::Reference > java::lang::ref::ReferenceQueue::remove()
{
	return call_method<
		java::lang::ref::ReferenceQueue::J2CPP_CLASS_NAME,
		java::lang::ref::ReferenceQueue::J2CPP_METHOD_NAME(2),
		java::lang::ref::ReferenceQueue::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::lang::ref::Reference >
	>(get_jobject());
}

local_ref< java::lang::ref::Reference > java::lang::ref::ReferenceQueue::remove(jlong a0)
{
	return call_method<
		java::lang::ref::ReferenceQueue::J2CPP_CLASS_NAME,
		java::lang::ref::ReferenceQueue::J2CPP_METHOD_NAME(3),
		java::lang::ref::ReferenceQueue::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::ref::Reference >
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::lang::ref::ReferenceQueue,"java/lang/ref/ReferenceQueue")
J2CPP_DEFINE_METHOD(java::lang::ref::ReferenceQueue,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::ref::ReferenceQueue,1,"poll","()Ljava/lang/ref/Reference;")
J2CPP_DEFINE_METHOD(java::lang::ref::ReferenceQueue,2,"remove","()Ljava/lang/ref/Reference;")
J2CPP_DEFINE_METHOD(java::lang::ref::ReferenceQueue,3,"remove","(J)Ljava/lang/ref/Reference;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REF_REFERENCEQUEUE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

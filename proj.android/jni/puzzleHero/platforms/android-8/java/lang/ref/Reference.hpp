/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.lang.ref.Reference
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REF_REFERENCE_HPP_DECL
#define J2CPP_JAVA_LANG_REF_REFERENCE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace lang { namespace ref {

	class Reference;
	class Reference
		: public object<Reference>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		explicit Reference(jobject jobj)
		: object<Reference>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		void clear();
		jboolean enqueue();
		local_ref< java::lang::Object > get();
		jboolean isEnqueued();
	}; //class Reference

} //namespace ref
} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REF_REFERENCE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REF_REFERENCE_HPP_IMPL
#define J2CPP_JAVA_LANG_REF_REFERENCE_HPP_IMPL

namespace j2cpp {



java::lang::ref::Reference::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


void java::lang::ref::Reference::clear()
{
	return call_method<
		java::lang::ref::Reference::J2CPP_CLASS_NAME,
		java::lang::ref::Reference::J2CPP_METHOD_NAME(1),
		java::lang::ref::Reference::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject());
}

jboolean java::lang::ref::Reference::enqueue()
{
	return call_method<
		java::lang::ref::Reference::J2CPP_CLASS_NAME,
		java::lang::ref::Reference::J2CPP_METHOD_NAME(2),
		java::lang::ref::Reference::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(get_jobject());
}

local_ref< java::lang::Object > java::lang::ref::Reference::get()
{
	return call_method<
		java::lang::ref::Reference::J2CPP_CLASS_NAME,
		java::lang::ref::Reference::J2CPP_METHOD_NAME(3),
		java::lang::ref::Reference::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jboolean java::lang::ref::Reference::isEnqueued()
{
	return call_method<
		java::lang::ref::Reference::J2CPP_CLASS_NAME,
		java::lang::ref::Reference::J2CPP_METHOD_NAME(4),
		java::lang::ref::Reference::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::lang::ref::Reference,"java/lang/ref/Reference")
J2CPP_DEFINE_METHOD(java::lang::ref::Reference,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::ref::Reference,1,"clear","()V")
J2CPP_DEFINE_METHOD(java::lang::ref::Reference,2,"enqueue","()Z")
J2CPP_DEFINE_METHOD(java::lang::ref::Reference,3,"get","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::lang::ref::Reference,4,"isEnqueued","()Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REF_REFERENCE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

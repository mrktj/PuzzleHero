/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.text.DateFormatSymbols
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_DATEFORMATSYMBOLS_HPP_DECL
#define J2CPP_JAVA_TEXT_DATEFORMATSYMBOLS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Cloneable; } } }
namespace j2cpp { namespace java { namespace util { class Locale; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Cloneable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Locale.hpp>


namespace j2cpp {

namespace java { namespace text {

	class DateFormatSymbols;
	class DateFormatSymbols
		: public object<DateFormatSymbols>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)

		explicit DateFormatSymbols(jobject jobj)
		: object<DateFormatSymbols>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Cloneable>() const;
		operator local_ref<java::io::Serializable>() const;


		DateFormatSymbols();
		DateFormatSymbols(local_ref< java::util::Locale > const&);
		local_ref< java::lang::Object > clone();
		jboolean equals(local_ref< java::lang::Object >  const&);
		local_ref< array< local_ref< java::lang::String >, 1> > getAmPmStrings();
		local_ref< array< local_ref< java::lang::String >, 1> > getEras();
		local_ref< java::lang::String > getLocalPatternChars();
		local_ref< array< local_ref< java::lang::String >, 1> > getMonths();
		local_ref< array< local_ref< java::lang::String >, 1> > getShortMonths();
		local_ref< array< local_ref< java::lang::String >, 1> > getShortWeekdays();
		local_ref< array< local_ref< java::lang::String >, 1> > getWeekdays();
		local_ref< array< local_ref< java::lang::String >, 2> > getZoneStrings();
		jint hashCode();
		void setAmPmStrings(local_ref< array< local_ref< java::lang::String >, 1> >  const&);
		void setEras(local_ref< array< local_ref< java::lang::String >, 1> >  const&);
		void setLocalPatternChars(local_ref< java::lang::String >  const&);
		void setMonths(local_ref< array< local_ref< java::lang::String >, 1> >  const&);
		void setShortMonths(local_ref< array< local_ref< java::lang::String >, 1> >  const&);
		void setShortWeekdays(local_ref< array< local_ref< java::lang::String >, 1> >  const&);
		void setWeekdays(local_ref< array< local_ref< java::lang::String >, 1> >  const&);
		void setZoneStrings(local_ref< array< local_ref< java::lang::String >, 2> >  const&);
	}; //class DateFormatSymbols

} //namespace text
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_DATEFORMATSYMBOLS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_DATEFORMATSYMBOLS_HPP_IMPL
#define J2CPP_JAVA_TEXT_DATEFORMATSYMBOLS_HPP_IMPL

namespace j2cpp {



java::text::DateFormatSymbols::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::text::DateFormatSymbols::operator local_ref<java::lang::Cloneable>() const
{
	return local_ref<java::lang::Cloneable>(get_jobject());
}

java::text::DateFormatSymbols::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


java::text::DateFormatSymbols::DateFormatSymbols()
: object<java::text::DateFormatSymbols>(
	call_new_object<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(0),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}



java::text::DateFormatSymbols::DateFormatSymbols(local_ref< java::util::Locale > const &a0)
: object<java::text::DateFormatSymbols>(
	call_new_object<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(1),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}


local_ref< java::lang::Object > java::text::DateFormatSymbols::clone()
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(2),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jboolean java::text::DateFormatSymbols::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(3),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< array< local_ref< java::lang::String >, 1> > java::text::DateFormatSymbols::getAmPmStrings()
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(4),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::String >, 1> > java::text::DateFormatSymbols::getEras()
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(5),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(get_jobject());
}

local_ref< java::lang::String > java::text::DateFormatSymbols::getLocalPatternChars()
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(6),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::String >, 1> > java::text::DateFormatSymbols::getMonths()
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(7),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::String >, 1> > java::text::DateFormatSymbols::getShortMonths()
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(8),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::String >, 1> > java::text::DateFormatSymbols::getShortWeekdays()
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(9),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::String >, 1> > java::text::DateFormatSymbols::getWeekdays()
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(10),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::String >, 2> > java::text::DateFormatSymbols::getZoneStrings()
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(11),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< array< local_ref< java::lang::String >, 2> >
	>(get_jobject());
}

jint java::text::DateFormatSymbols::hashCode()
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(12),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(12), 
		jint
	>(get_jobject());
}

void java::text::DateFormatSymbols::setAmPmStrings(local_ref< array< local_ref< java::lang::String >, 1> > const &a0)
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(13),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject(), a0);
}

void java::text::DateFormatSymbols::setEras(local_ref< array< local_ref< java::lang::String >, 1> > const &a0)
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(14),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(14), 
		void
	>(get_jobject(), a0);
}

void java::text::DateFormatSymbols::setLocalPatternChars(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(15),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(15), 
		void
	>(get_jobject(), a0);
}

void java::text::DateFormatSymbols::setMonths(local_ref< array< local_ref< java::lang::String >, 1> > const &a0)
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(16),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(16), 
		void
	>(get_jobject(), a0);
}

void java::text::DateFormatSymbols::setShortMonths(local_ref< array< local_ref< java::lang::String >, 1> > const &a0)
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(17),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(17), 
		void
	>(get_jobject(), a0);
}

void java::text::DateFormatSymbols::setShortWeekdays(local_ref< array< local_ref< java::lang::String >, 1> > const &a0)
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(18),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(18), 
		void
	>(get_jobject(), a0);
}

void java::text::DateFormatSymbols::setWeekdays(local_ref< array< local_ref< java::lang::String >, 1> > const &a0)
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(19),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(19), 
		void
	>(get_jobject(), a0);
}

void java::text::DateFormatSymbols::setZoneStrings(local_ref< array< local_ref< java::lang::String >, 2> > const &a0)
{
	return call_method<
		java::text::DateFormatSymbols::J2CPP_CLASS_NAME,
		java::text::DateFormatSymbols::J2CPP_METHOD_NAME(20),
		java::text::DateFormatSymbols::J2CPP_METHOD_SIGNATURE(20), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::text::DateFormatSymbols,"java/text/DateFormatSymbols")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,1,"<init>","(Ljava/util/Locale;)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,2,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,3,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,4,"getAmPmStrings","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,5,"getEras","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,6,"getLocalPatternChars","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,7,"getMonths","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,8,"getShortMonths","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,9,"getShortWeekdays","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,10,"getWeekdays","()[java.lang.String")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,11,"getZoneStrings","()[[java.lang.String")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,12,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,13,"setAmPmStrings","([java.lang.String)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,14,"setEras","([java.lang.String)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,15,"setLocalPatternChars","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,16,"setMonths","([java.lang.String)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,17,"setShortMonths","([java.lang.String)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,18,"setShortWeekdays","([java.lang.String)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,19,"setWeekdays","([java.lang.String)V")
J2CPP_DEFINE_METHOD(java::text::DateFormatSymbols,20,"setZoneStrings","([[java.lang.String)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_DATEFORMATSYMBOLS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.text.BreakIterator
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_BREAKITERATOR_HPP_DECL
#define J2CPP_JAVA_TEXT_BREAKITERATOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Cloneable; } } }
namespace j2cpp { namespace java { namespace text { class CharacterIterator; } } }
namespace j2cpp { namespace java { namespace util { class Locale; } } }


#include <java/lang/Cloneable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/text/CharacterIterator.hpp>
#include <java/util/Locale.hpp>


namespace j2cpp {

namespace java { namespace text {

	class BreakIterator;
	class BreakIterator
		: public object<BreakIterator>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_FIELD(0)

		explicit BreakIterator(jobject jobj)
		: object<BreakIterator>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Cloneable>() const;


		static local_ref< array< local_ref< java::util::Locale >, 1> > getAvailableLocales();
		static local_ref< java::text::BreakIterator > getCharacterInstance();
		static local_ref< java::text::BreakIterator > getCharacterInstance(local_ref< java::util::Locale >  const&);
		static local_ref< java::text::BreakIterator > getLineInstance();
		static local_ref< java::text::BreakIterator > getLineInstance(local_ref< java::util::Locale >  const&);
		static local_ref< java::text::BreakIterator > getSentenceInstance();
		static local_ref< java::text::BreakIterator > getSentenceInstance(local_ref< java::util::Locale >  const&);
		static local_ref< java::text::BreakIterator > getWordInstance();
		static local_ref< java::text::BreakIterator > getWordInstance(local_ref< java::util::Locale >  const&);
		jboolean isBoundary(jint);
		jint preceding(jint);
		void setText(local_ref< java::lang::String >  const&);
		jint current();
		jint first();
		jint following(jint);
		local_ref< java::text::CharacterIterator > getText();
		jint last();
		jint next();
		jint next(jint);
		jint previous();
		void setText(local_ref< java::text::CharacterIterator >  const&);
		local_ref< java::lang::Object > clone();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > DONE;
	}; //class BreakIterator

} //namespace text
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_BREAKITERATOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_BREAKITERATOR_HPP_IMPL
#define J2CPP_JAVA_TEXT_BREAKITERATOR_HPP_IMPL

namespace j2cpp {



java::text::BreakIterator::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::text::BreakIterator::operator local_ref<java::lang::Cloneable>() const
{
	return local_ref<java::lang::Cloneable>(get_jobject());
}


local_ref< array< local_ref< java::util::Locale >, 1> > java::text::BreakIterator::getAvailableLocales()
{
	return call_static_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(1),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< array< local_ref< java::util::Locale >, 1> >
	>();
}

local_ref< java::text::BreakIterator > java::text::BreakIterator::getCharacterInstance()
{
	return call_static_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(2),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::text::BreakIterator >
	>();
}

local_ref< java::text::BreakIterator > java::text::BreakIterator::getCharacterInstance(local_ref< java::util::Locale > const &a0)
{
	return call_static_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(3),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::text::BreakIterator >
	>(a0);
}

local_ref< java::text::BreakIterator > java::text::BreakIterator::getLineInstance()
{
	return call_static_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(4),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::text::BreakIterator >
	>();
}

local_ref< java::text::BreakIterator > java::text::BreakIterator::getLineInstance(local_ref< java::util::Locale > const &a0)
{
	return call_static_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(5),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::text::BreakIterator >
	>(a0);
}

local_ref< java::text::BreakIterator > java::text::BreakIterator::getSentenceInstance()
{
	return call_static_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(6),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::text::BreakIterator >
	>();
}

local_ref< java::text::BreakIterator > java::text::BreakIterator::getSentenceInstance(local_ref< java::util::Locale > const &a0)
{
	return call_static_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(7),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::text::BreakIterator >
	>(a0);
}

local_ref< java::text::BreakIterator > java::text::BreakIterator::getWordInstance()
{
	return call_static_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(8),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::text::BreakIterator >
	>();
}

local_ref< java::text::BreakIterator > java::text::BreakIterator::getWordInstance(local_ref< java::util::Locale > const &a0)
{
	return call_static_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(9),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::text::BreakIterator >
	>(a0);
}

jboolean java::text::BreakIterator::isBoundary(jint a0)
{
	return call_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(10),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(10), 
		jboolean
	>(get_jobject(), a0);
}

jint java::text::BreakIterator::preceding(jint a0)
{
	return call_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(11),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(11), 
		jint
	>(get_jobject(), a0);
}

void java::text::BreakIterator::setText(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(12),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(12), 
		void
	>(get_jobject(), a0);
}

jint java::text::BreakIterator::current()
{
	return call_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(13),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(13), 
		jint
	>(get_jobject());
}

jint java::text::BreakIterator::first()
{
	return call_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(14),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(14), 
		jint
	>(get_jobject());
}

jint java::text::BreakIterator::following(jint a0)
{
	return call_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(15),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(15), 
		jint
	>(get_jobject(), a0);
}

local_ref< java::text::CharacterIterator > java::text::BreakIterator::getText()
{
	return call_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(16),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(16), 
		local_ref< java::text::CharacterIterator >
	>(get_jobject());
}

jint java::text::BreakIterator::last()
{
	return call_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(17),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(17), 
		jint
	>(get_jobject());
}

jint java::text::BreakIterator::next()
{
	return call_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(18),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(18), 
		jint
	>(get_jobject());
}

jint java::text::BreakIterator::next(jint a0)
{
	return call_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(19),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(19), 
		jint
	>(get_jobject(), a0);
}

jint java::text::BreakIterator::previous()
{
	return call_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(20),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(20), 
		jint
	>(get_jobject());
}

void java::text::BreakIterator::setText(local_ref< java::text::CharacterIterator > const &a0)
{
	return call_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(21),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(21), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::Object > java::text::BreakIterator::clone()
{
	return call_method<
		java::text::BreakIterator::J2CPP_CLASS_NAME,
		java::text::BreakIterator::J2CPP_METHOD_NAME(22),
		java::text::BreakIterator::J2CPP_METHOD_SIGNATURE(22), 
		local_ref< java::lang::Object >
	>(get_jobject());
}





static_field<
	java::text::BreakIterator::J2CPP_CLASS_NAME,
	java::text::BreakIterator::J2CPP_FIELD_NAME(0),
	java::text::BreakIterator::J2CPP_FIELD_SIGNATURE(0),
	jint
> java::text::BreakIterator::DONE;


J2CPP_DEFINE_CLASS(java::text::BreakIterator,"java/text/BreakIterator")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,1,"getAvailableLocales","()[java.util.Locale")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,2,"getCharacterInstance","()Ljava/text/BreakIterator;")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,3,"getCharacterInstance","(Ljava/util/Locale;)Ljava/text/BreakIterator;")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,4,"getLineInstance","()Ljava/text/BreakIterator;")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,5,"getLineInstance","(Ljava/util/Locale;)Ljava/text/BreakIterator;")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,6,"getSentenceInstance","()Ljava/text/BreakIterator;")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,7,"getSentenceInstance","(Ljava/util/Locale;)Ljava/text/BreakIterator;")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,8,"getWordInstance","()Ljava/text/BreakIterator;")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,9,"getWordInstance","(Ljava/util/Locale;)Ljava/text/BreakIterator;")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,10,"isBoundary","(I)Z")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,11,"preceding","(I)I")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,12,"setText","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,13,"current","()I")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,14,"first","()I")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,15,"following","(I)I")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,16,"getText","()Ljava/text/CharacterIterator;")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,17,"last","()I")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,18,"next","()I")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,19,"next","(I)I")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,20,"previous","()I")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,21,"setText","(Ljava/text/CharacterIterator;)V")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,22,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,23,"getLong","([BI)J")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,24,"getInt","([BI)I")
J2CPP_DEFINE_METHOD(java::text::BreakIterator,25,"getShort","([BI)S")
J2CPP_DEFINE_FIELD(java::text::BreakIterator,0,"DONE","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_BREAKITERATOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.text.DateFormat
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_DATEFORMAT_HPP_DECL
#define J2CPP_JAVA_TEXT_DATEFORMAT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class StringBuffer; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Cloneable; } } }
namespace j2cpp { namespace java { namespace text { namespace AttributedCharacterIterator_ { class Attribute; } } } }
namespace j2cpp { namespace java { namespace text { class FieldPosition; } } }
namespace j2cpp { namespace java { namespace text { class NumberFormat; } } }
namespace j2cpp { namespace java { namespace text { class Format; } } }
namespace j2cpp { namespace java { namespace text { namespace Format_ { class Field; } } } }
namespace j2cpp { namespace java { namespace text { class ParsePosition; } } }
namespace j2cpp { namespace java { namespace text { namespace DateFormat_ { class Field; } } } }
namespace j2cpp { namespace java { namespace util { class TimeZone; } } }
namespace j2cpp { namespace java { namespace util { class Calendar; } } }
namespace j2cpp { namespace java { namespace util { class Locale; } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Cloneable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/StringBuffer.hpp>
#include <java/text/AttributedCharacterIterator.hpp>
#include <java/text/DateFormat.hpp>
#include <java/text/FieldPosition.hpp>
#include <java/text/Format.hpp>
#include <java/text/NumberFormat.hpp>
#include <java/text/ParsePosition.hpp>
#include <java/util/Calendar.hpp>
#include <java/util/Date.hpp>
#include <java/util/Locale.hpp>
#include <java/util/TimeZone.hpp>


namespace j2cpp {

namespace java { namespace text {

	class DateFormat;
	namespace DateFormat_ {

		class Field;
		class Field
			: public object<Field>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)
			J2CPP_DECLARE_FIELD(4)
			J2CPP_DECLARE_FIELD(5)
			J2CPP_DECLARE_FIELD(6)
			J2CPP_DECLARE_FIELD(7)
			J2CPP_DECLARE_FIELD(8)
			J2CPP_DECLARE_FIELD(9)
			J2CPP_DECLARE_FIELD(10)
			J2CPP_DECLARE_FIELD(11)
			J2CPP_DECLARE_FIELD(12)
			J2CPP_DECLARE_FIELD(13)
			J2CPP_DECLARE_FIELD(14)
			J2CPP_DECLARE_FIELD(15)
			J2CPP_DECLARE_FIELD(16)
			J2CPP_DECLARE_FIELD(17)

			explicit Field(jobject jobj)
			: object<Field>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::text::AttributedCharacterIterator_::Attribute>() const;
			operator local_ref<java::text::Format_::Field>() const;
			operator local_ref<java::io::Serializable>() const;


			jint getCalendarField();
			static local_ref< java::text::DateFormat_::Field > ofCalendarField(jint);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::text::DateFormat_::Field > > ERA;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::text::DateFormat_::Field > > YEAR;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< java::text::DateFormat_::Field > > MONTH;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), local_ref< java::text::DateFormat_::Field > > HOUR_OF_DAY0;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), local_ref< java::text::DateFormat_::Field > > HOUR_OF_DAY1;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), local_ref< java::text::DateFormat_::Field > > MINUTE;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), local_ref< java::text::DateFormat_::Field > > SECOND;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), local_ref< java::text::DateFormat_::Field > > MILLISECOND;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), local_ref< java::text::DateFormat_::Field > > DAY_OF_WEEK;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), local_ref< java::text::DateFormat_::Field > > DAY_OF_MONTH;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), local_ref< java::text::DateFormat_::Field > > DAY_OF_YEAR;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(11), J2CPP_FIELD_SIGNATURE(11), local_ref< java::text::DateFormat_::Field > > DAY_OF_WEEK_IN_MONTH;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(12), J2CPP_FIELD_SIGNATURE(12), local_ref< java::text::DateFormat_::Field > > WEEK_OF_YEAR;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(13), J2CPP_FIELD_SIGNATURE(13), local_ref< java::text::DateFormat_::Field > > WEEK_OF_MONTH;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(14), J2CPP_FIELD_SIGNATURE(14), local_ref< java::text::DateFormat_::Field > > AM_PM;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(15), J2CPP_FIELD_SIGNATURE(15), local_ref< java::text::DateFormat_::Field > > HOUR0;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(16), J2CPP_FIELD_SIGNATURE(16), local_ref< java::text::DateFormat_::Field > > HOUR1;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(17), J2CPP_FIELD_SIGNATURE(17), local_ref< java::text::DateFormat_::Field > > TIME_ZONE;
		}; //class Field

	} //namespace DateFormat_

	class DateFormat
		: public object<DateFormat>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)
		J2CPP_DECLARE_FIELD(10)
		J2CPP_DECLARE_FIELD(11)
		J2CPP_DECLARE_FIELD(12)
		J2CPP_DECLARE_FIELD(13)
		J2CPP_DECLARE_FIELD(14)
		J2CPP_DECLARE_FIELD(15)
		J2CPP_DECLARE_FIELD(16)
		J2CPP_DECLARE_FIELD(17)
		J2CPP_DECLARE_FIELD(18)
		J2CPP_DECLARE_FIELD(19)
		J2CPP_DECLARE_FIELD(20)
		J2CPP_DECLARE_FIELD(21)
		J2CPP_DECLARE_FIELD(22)
		J2CPP_DECLARE_FIELD(23)
		J2CPP_DECLARE_FIELD(24)

		typedef DateFormat_::Field Field;

		explicit DateFormat(jobject jobj)
		: object<DateFormat>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Cloneable>() const;
		operator local_ref<java::text::Format>() const;
		operator local_ref<java::io::Serializable>() const;


		local_ref< java::lang::Object > clone();
		jboolean equals(local_ref< java::lang::Object >  const&);
		local_ref< java::lang::StringBuffer > format(local_ref< java::lang::Object >  const&, local_ref< java::lang::StringBuffer >  const&, local_ref< java::text::FieldPosition >  const&);
		local_ref< java::lang::String > format(local_ref< java::util::Date >  const&);
		local_ref< java::lang::StringBuffer > format(local_ref< java::util::Date >  const&, local_ref< java::lang::StringBuffer >  const&, local_ref< java::text::FieldPosition >  const&);
		static local_ref< array< local_ref< java::util::Locale >, 1> > getAvailableLocales();
		local_ref< java::util::Calendar > getCalendar();
		static local_ref< java::text::DateFormat > getDateInstance();
		static local_ref< java::text::DateFormat > getDateInstance(jint);
		static local_ref< java::text::DateFormat > getDateInstance(jint, local_ref< java::util::Locale >  const&);
		static local_ref< java::text::DateFormat > getDateTimeInstance();
		static local_ref< java::text::DateFormat > getDateTimeInstance(jint, jint);
		static local_ref< java::text::DateFormat > getDateTimeInstance(jint, jint, local_ref< java::util::Locale >  const&);
		static local_ref< java::text::DateFormat > getInstance();
		local_ref< java::text::NumberFormat > getNumberFormat();
		static local_ref< java::text::DateFormat > getTimeInstance();
		static local_ref< java::text::DateFormat > getTimeInstance(jint);
		static local_ref< java::text::DateFormat > getTimeInstance(jint, local_ref< java::util::Locale >  const&);
		local_ref< java::util::TimeZone > getTimeZone();
		jint hashCode();
		jboolean isLenient();
		local_ref< java::util::Date > parse(local_ref< java::lang::String >  const&);
		local_ref< java::util::Date > parse(local_ref< java::lang::String >  const&, local_ref< java::text::ParsePosition >  const&);
		local_ref< java::lang::Object > parseObject(local_ref< java::lang::String >  const&, local_ref< java::text::ParsePosition >  const&);
		void setCalendar(local_ref< java::util::Calendar >  const&);
		void setLenient(jboolean);
		void setNumberFormat(local_ref< java::text::NumberFormat >  const&);
		void setTimeZone(local_ref< java::util::TimeZone >  const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > DEFAULT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > FULL;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), jint > LONG;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), jint > MEDIUM;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), jint > SHORT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), jint > ERA_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), jint > YEAR_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), jint > MONTH_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), jint > DATE_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(11), J2CPP_FIELD_SIGNATURE(11), jint > HOUR_OF_DAY1_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(12), J2CPP_FIELD_SIGNATURE(12), jint > HOUR_OF_DAY0_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(13), J2CPP_FIELD_SIGNATURE(13), jint > MINUTE_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(14), J2CPP_FIELD_SIGNATURE(14), jint > SECOND_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(15), J2CPP_FIELD_SIGNATURE(15), jint > MILLISECOND_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(16), J2CPP_FIELD_SIGNATURE(16), jint > DAY_OF_WEEK_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(17), J2CPP_FIELD_SIGNATURE(17), jint > DAY_OF_YEAR_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(18), J2CPP_FIELD_SIGNATURE(18), jint > DAY_OF_WEEK_IN_MONTH_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(19), J2CPP_FIELD_SIGNATURE(19), jint > WEEK_OF_YEAR_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(20), J2CPP_FIELD_SIGNATURE(20), jint > WEEK_OF_MONTH_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(21), J2CPP_FIELD_SIGNATURE(21), jint > AM_PM_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(22), J2CPP_FIELD_SIGNATURE(22), jint > HOUR1_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(23), J2CPP_FIELD_SIGNATURE(23), jint > HOUR0_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(24), J2CPP_FIELD_SIGNATURE(24), jint > TIMEZONE_FIELD;
	}; //class DateFormat

} //namespace text
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_DATEFORMAT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_DATEFORMAT_HPP_IMPL
#define J2CPP_JAVA_TEXT_DATEFORMAT_HPP_IMPL

namespace j2cpp {




java::text::DateFormat_::Field::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::text::DateFormat_::Field::operator local_ref<java::text::AttributedCharacterIterator_::Attribute>() const
{
	return local_ref<java::text::AttributedCharacterIterator_::Attribute>(get_jobject());
}

java::text::DateFormat_::Field::operator local_ref<java::text::Format_::Field>() const
{
	return local_ref<java::text::Format_::Field>(get_jobject());
}

java::text::DateFormat_::Field::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


jint java::text::DateFormat_::Field::getCalendarField()
{
	return call_method<
		java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
		java::text::DateFormat_::Field::J2CPP_METHOD_NAME(1),
		java::text::DateFormat_::Field::J2CPP_METHOD_SIGNATURE(1), 
		jint
	>(get_jobject());
}

local_ref< java::text::DateFormat_::Field > java::text::DateFormat_::Field::ofCalendarField(jint a0)
{
	return call_static_method<
		java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
		java::text::DateFormat_::Field::J2CPP_METHOD_NAME(2),
		java::text::DateFormat_::Field::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::text::DateFormat_::Field >
	>(a0);
}




static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(0),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::ERA;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(1),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(1),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::YEAR;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(2),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(2),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::MONTH;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(3),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(3),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::HOUR_OF_DAY0;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(4),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(4),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::HOUR_OF_DAY1;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(5),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(5),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::MINUTE;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(6),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(6),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::SECOND;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(7),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(7),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::MILLISECOND;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(8),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(8),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::DAY_OF_WEEK;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(9),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(9),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::DAY_OF_MONTH;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(10),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(10),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::DAY_OF_YEAR;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(11),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(11),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::DAY_OF_WEEK_IN_MONTH;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(12),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(12),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::WEEK_OF_YEAR;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(13),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(13),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::WEEK_OF_MONTH;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(14),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(14),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::AM_PM;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(15),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(15),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::HOUR0;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(16),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(16),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::HOUR1;

static_field<
	java::text::DateFormat_::Field::J2CPP_CLASS_NAME,
	java::text::DateFormat_::Field::J2CPP_FIELD_NAME(17),
	java::text::DateFormat_::Field::J2CPP_FIELD_SIGNATURE(17),
	local_ref< java::text::DateFormat_::Field >
> java::text::DateFormat_::Field::TIME_ZONE;


J2CPP_DEFINE_CLASS(java::text::DateFormat_::Field,"java/text/DateFormat$Field")
J2CPP_DEFINE_METHOD(java::text::DateFormat_::Field,0,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::text::DateFormat_::Field,1,"getCalendarField","()I")
J2CPP_DEFINE_METHOD(java::text::DateFormat_::Field,2,"ofCalendarField","(I)Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_METHOD(java::text::DateFormat_::Field,3,"readResolve","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::DateFormat_::Field,4,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,0,"ERA","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,1,"YEAR","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,2,"MONTH","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,3,"HOUR_OF_DAY0","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,4,"HOUR_OF_DAY1","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,5,"MINUTE","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,6,"SECOND","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,7,"MILLISECOND","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,8,"DAY_OF_WEEK","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,9,"DAY_OF_MONTH","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,10,"DAY_OF_YEAR","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,11,"DAY_OF_WEEK_IN_MONTH","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,12,"WEEK_OF_YEAR","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,13,"WEEK_OF_MONTH","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,14,"AM_PM","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,15,"HOUR0","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,16,"HOUR1","Ljava/text/DateFormat$Field;")
J2CPP_DEFINE_FIELD(java::text::DateFormat_::Field,17,"TIME_ZONE","Ljava/text/DateFormat$Field;")



java::text::DateFormat::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::text::DateFormat::operator local_ref<java::lang::Cloneable>() const
{
	return local_ref<java::lang::Cloneable>(get_jobject());
}

java::text::DateFormat::operator local_ref<java::text::Format>() const
{
	return local_ref<java::text::Format>(get_jobject());
}

java::text::DateFormat::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


local_ref< java::lang::Object > java::text::DateFormat::clone()
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(1),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jboolean java::text::DateFormat::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(2),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< java::lang::StringBuffer > java::text::DateFormat::format(local_ref< java::lang::Object > const &a0, local_ref< java::lang::StringBuffer > const &a1, local_ref< java::text::FieldPosition > const &a2)
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(3),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::StringBuffer >
	>(get_jobject(), a0, a1, a2);
}

local_ref< java::lang::String > java::text::DateFormat::format(local_ref< java::util::Date > const &a0)
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(4),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::lang::String >
	>(get_jobject(), a0);
}

local_ref< java::lang::StringBuffer > java::text::DateFormat::format(local_ref< java::util::Date > const &a0, local_ref< java::lang::StringBuffer > const &a1, local_ref< java::text::FieldPosition > const &a2)
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(5),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::StringBuffer >
	>(get_jobject(), a0, a1, a2);
}

local_ref< array< local_ref< java::util::Locale >, 1> > java::text::DateFormat::getAvailableLocales()
{
	return call_static_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(6),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< array< local_ref< java::util::Locale >, 1> >
	>();
}

local_ref< java::util::Calendar > java::text::DateFormat::getCalendar()
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(7),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::util::Calendar >
	>(get_jobject());
}

local_ref< java::text::DateFormat > java::text::DateFormat::getDateInstance()
{
	return call_static_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(8),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::text::DateFormat >
	>();
}

local_ref< java::text::DateFormat > java::text::DateFormat::getDateInstance(jint a0)
{
	return call_static_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(9),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::text::DateFormat >
	>(a0);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getDateInstance(jint a0, local_ref< java::util::Locale > const &a1)
{
	return call_static_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(10),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::text::DateFormat >
	>(a0, a1);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getDateTimeInstance()
{
	return call_static_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(11),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< java::text::DateFormat >
	>();
}

local_ref< java::text::DateFormat > java::text::DateFormat::getDateTimeInstance(jint a0, jint a1)
{
	return call_static_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(12),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(12), 
		local_ref< java::text::DateFormat >
	>(a0, a1);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getDateTimeInstance(jint a0, jint a1, local_ref< java::util::Locale > const &a2)
{
	return call_static_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(13),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(13), 
		local_ref< java::text::DateFormat >
	>(a0, a1, a2);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getInstance()
{
	return call_static_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(14),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(14), 
		local_ref< java::text::DateFormat >
	>();
}

local_ref< java::text::NumberFormat > java::text::DateFormat::getNumberFormat()
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(15),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(15), 
		local_ref< java::text::NumberFormat >
	>(get_jobject());
}

local_ref< java::text::DateFormat > java::text::DateFormat::getTimeInstance()
{
	return call_static_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(16),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(16), 
		local_ref< java::text::DateFormat >
	>();
}

local_ref< java::text::DateFormat > java::text::DateFormat::getTimeInstance(jint a0)
{
	return call_static_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(17),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(17), 
		local_ref< java::text::DateFormat >
	>(a0);
}

local_ref< java::text::DateFormat > java::text::DateFormat::getTimeInstance(jint a0, local_ref< java::util::Locale > const &a1)
{
	return call_static_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(18),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(18), 
		local_ref< java::text::DateFormat >
	>(a0, a1);
}

local_ref< java::util::TimeZone > java::text::DateFormat::getTimeZone()
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(19),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(19), 
		local_ref< java::util::TimeZone >
	>(get_jobject());
}

jint java::text::DateFormat::hashCode()
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(20),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(20), 
		jint
	>(get_jobject());
}

jboolean java::text::DateFormat::isLenient()
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(21),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(21), 
		jboolean
	>(get_jobject());
}

local_ref< java::util::Date > java::text::DateFormat::parse(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(22),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(22), 
		local_ref< java::util::Date >
	>(get_jobject(), a0);
}

local_ref< java::util::Date > java::text::DateFormat::parse(local_ref< java::lang::String > const &a0, local_ref< java::text::ParsePosition > const &a1)
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(23),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(23), 
		local_ref< java::util::Date >
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::Object > java::text::DateFormat::parseObject(local_ref< java::lang::String > const &a0, local_ref< java::text::ParsePosition > const &a1)
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(24),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(24), 
		local_ref< java::lang::Object >
	>(get_jobject(), a0, a1);
}

void java::text::DateFormat::setCalendar(local_ref< java::util::Calendar > const &a0)
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(25),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(25), 
		void
	>(get_jobject(), a0);
}

void java::text::DateFormat::setLenient(jboolean a0)
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(26),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(26), 
		void
	>(get_jobject(), a0);
}

void java::text::DateFormat::setNumberFormat(local_ref< java::text::NumberFormat > const &a0)
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(27),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(27), 
		void
	>(get_jobject(), a0);
}

void java::text::DateFormat::setTimeZone(local_ref< java::util::TimeZone > const &a0)
{
	return call_method<
		java::text::DateFormat::J2CPP_CLASS_NAME,
		java::text::DateFormat::J2CPP_METHOD_NAME(28),
		java::text::DateFormat::J2CPP_METHOD_SIGNATURE(28), 
		void
	>(get_jobject(), a0);
}


static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(2),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(2),
	jint
> java::text::DateFormat::DEFAULT;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(3),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(3),
	jint
> java::text::DateFormat::FULL;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(4),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(4),
	jint
> java::text::DateFormat::LONG;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(5),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(5),
	jint
> java::text::DateFormat::MEDIUM;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(6),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(6),
	jint
> java::text::DateFormat::SHORT;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(7),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(7),
	jint
> java::text::DateFormat::ERA_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(8),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(8),
	jint
> java::text::DateFormat::YEAR_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(9),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(9),
	jint
> java::text::DateFormat::MONTH_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(10),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(10),
	jint
> java::text::DateFormat::DATE_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(11),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(11),
	jint
> java::text::DateFormat::HOUR_OF_DAY1_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(12),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(12),
	jint
> java::text::DateFormat::HOUR_OF_DAY0_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(13),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(13),
	jint
> java::text::DateFormat::MINUTE_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(14),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(14),
	jint
> java::text::DateFormat::SECOND_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(15),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(15),
	jint
> java::text::DateFormat::MILLISECOND_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(16),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(16),
	jint
> java::text::DateFormat::DAY_OF_WEEK_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(17),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(17),
	jint
> java::text::DateFormat::DAY_OF_YEAR_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(18),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(18),
	jint
> java::text::DateFormat::DAY_OF_WEEK_IN_MONTH_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(19),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(19),
	jint
> java::text::DateFormat::WEEK_OF_YEAR_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(20),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(20),
	jint
> java::text::DateFormat::WEEK_OF_MONTH_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(21),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(21),
	jint
> java::text::DateFormat::AM_PM_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(22),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(22),
	jint
> java::text::DateFormat::HOUR1_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(23),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(23),
	jint
> java::text::DateFormat::HOUR0_FIELD;

static_field<
	java::text::DateFormat::J2CPP_CLASS_NAME,
	java::text::DateFormat::J2CPP_FIELD_NAME(24),
	java::text::DateFormat::J2CPP_FIELD_SIGNATURE(24),
	jint
> java::text::DateFormat::TIMEZONE_FIELD;


J2CPP_DEFINE_CLASS(java::text::DateFormat,"java/text/DateFormat")
J2CPP_DEFINE_METHOD(java::text::DateFormat,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::text::DateFormat,1,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,2,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::text::DateFormat,3,"format","(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,4,"format","(Ljava/util/Date;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,5,"format","(Ljava/util/Date;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,6,"getAvailableLocales","()[java.util.Locale")
J2CPP_DEFINE_METHOD(java::text::DateFormat,7,"getCalendar","()Ljava/util/Calendar;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,8,"getDateInstance","()Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,9,"getDateInstance","(I)Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,10,"getDateInstance","(ILjava/util/Locale;)Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,11,"getDateTimeInstance","()Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,12,"getDateTimeInstance","(II)Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,13,"getDateTimeInstance","(IILjava/util/Locale;)Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,14,"getInstance","()Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,15,"getNumberFormat","()Ljava/text/NumberFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,16,"getTimeInstance","()Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,17,"getTimeInstance","(I)Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,18,"getTimeInstance","(ILjava/util/Locale;)Ljava/text/DateFormat;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,19,"getTimeZone","()Ljava/util/TimeZone;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,20,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::text::DateFormat,21,"isLenient","()Z")
J2CPP_DEFINE_METHOD(java::text::DateFormat,22,"parse","(Ljava/lang/String;)Ljava/util/Date;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,23,"parse","(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/util/Date;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,24,"parseObject","(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::text::DateFormat,25,"setCalendar","(Ljava/util/Calendar;)V")
J2CPP_DEFINE_METHOD(java::text::DateFormat,26,"setLenient","(Z)V")
J2CPP_DEFINE_METHOD(java::text::DateFormat,27,"setNumberFormat","(Ljava/text/NumberFormat;)V")
J2CPP_DEFINE_METHOD(java::text::DateFormat,28,"setTimeZone","(Ljava/util/TimeZone;)V")
J2CPP_DEFINE_FIELD(java::text::DateFormat,0,"calendar","Ljava/util/Calendar;")
J2CPP_DEFINE_FIELD(java::text::DateFormat,1,"numberFormat","Ljava/text/NumberFormat;")
J2CPP_DEFINE_FIELD(java::text::DateFormat,2,"DEFAULT","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,3,"FULL","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,4,"LONG","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,5,"MEDIUM","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,6,"SHORT","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,7,"ERA_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,8,"YEAR_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,9,"MONTH_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,10,"DATE_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,11,"HOUR_OF_DAY1_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,12,"HOUR_OF_DAY0_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,13,"MINUTE_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,14,"SECOND_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,15,"MILLISECOND_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,16,"DAY_OF_WEEK_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,17,"DAY_OF_YEAR_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,18,"DAY_OF_WEEK_IN_MONTH_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,19,"WEEK_OF_YEAR_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,20,"WEEK_OF_MONTH_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,21,"AM_PM_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,22,"HOUR1_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,23,"HOUR0_FIELD","I")
J2CPP_DEFINE_FIELD(java::text::DateFormat,24,"TIMEZONE_FIELD","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_DATEFORMAT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

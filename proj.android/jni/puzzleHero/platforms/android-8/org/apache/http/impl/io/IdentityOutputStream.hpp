/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: org.apache.http.impl.io.IdentityOutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_IO_IDENTITYOUTPUTSTREAM_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_IO_IDENTITYOUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { namespace io { class SessionOutputBuffer; } } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class Closeable; } } }
namespace j2cpp { namespace java { namespace io { class Flushable; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/Closeable.hpp>
#include <java/io/Flushable.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/Object.hpp>
#include <org/apache/http/io/SessionOutputBuffer.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl { namespace io {

	class IdentityOutputStream;
	class IdentityOutputStream
		: public object<IdentityOutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		explicit IdentityOutputStream(jobject jobj)
		: object<IdentityOutputStream>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Closeable>() const;
		operator local_ref<java::io::Flushable>() const;
		operator local_ref<java::io::OutputStream>() const;


		IdentityOutputStream(local_ref< org::apache::http::io::SessionOutputBuffer > const&);
		void close();
		void flush();
		void write(local_ref< array<jbyte,1> >  const&, jint, jint);
		void write(local_ref< array<jbyte,1> >  const&);
		void write(jint);
	}; //class IdentityOutputStream

} //namespace io
} //namespace impl
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_IO_IDENTITYOUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_IO_IDENTITYOUTPUTSTREAM_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_IO_IDENTITYOUTPUTSTREAM_HPP_IMPL

namespace j2cpp {



org::apache::http::impl::io::IdentityOutputStream::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

org::apache::http::impl::io::IdentityOutputStream::operator local_ref<java::io::Closeable>() const
{
	return local_ref<java::io::Closeable>(get_jobject());
}

org::apache::http::impl::io::IdentityOutputStream::operator local_ref<java::io::Flushable>() const
{
	return local_ref<java::io::Flushable>(get_jobject());
}

org::apache::http::impl::io::IdentityOutputStream::operator local_ref<java::io::OutputStream>() const
{
	return local_ref<java::io::OutputStream>(get_jobject());
}


org::apache::http::impl::io::IdentityOutputStream::IdentityOutputStream(local_ref< org::apache::http::io::SessionOutputBuffer > const &a0)
: object<org::apache::http::impl::io::IdentityOutputStream>(
	call_new_object<
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_CLASS_NAME,
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_METHOD_NAME(0),
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}


void org::apache::http::impl::io::IdentityOutputStream::close()
{
	return call_method<
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_CLASS_NAME,
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_METHOD_NAME(1),
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject());
}

void org::apache::http::impl::io::IdentityOutputStream::flush()
{
	return call_method<
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_CLASS_NAME,
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_METHOD_NAME(2),
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject());
}

void org::apache::http::impl::io::IdentityOutputStream::write(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_CLASS_NAME,
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_METHOD_NAME(3),
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0, a1, a2);
}

void org::apache::http::impl::io::IdentityOutputStream::write(local_ref< array<jbyte,1> > const &a0)
{
	return call_method<
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_CLASS_NAME,
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_METHOD_NAME(4),
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::impl::io::IdentityOutputStream::write(jint a0)
{
	return call_method<
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_CLASS_NAME,
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_METHOD_NAME(5),
		org::apache::http::impl::io::IdentityOutputStream::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(org::apache::http::impl::io::IdentityOutputStream,"org/apache/http/impl/io/IdentityOutputStream")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::IdentityOutputStream,0,"<init>","(Lorg/apache/http/io/SessionOutputBuffer;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::IdentityOutputStream,1,"close","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::IdentityOutputStream,2,"flush","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::IdentityOutputStream,3,"write","([BII)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::IdentityOutputStream,4,"write","([B)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::IdentityOutputStream,5,"write","(I)V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_IO_IDENTITYOUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

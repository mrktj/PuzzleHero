/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: org.apache.http.conn.scheme.Scheme
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_CONN_SCHEME_SCHEME_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_CONN_SCHEME_SCHEME_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { namespace scheme { class SocketFactory; } } } } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <org/apache/http/conn/scheme/SocketFactory.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace conn { namespace scheme {

	class Scheme;
	class Scheme
		: public object<Scheme>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit Scheme(jobject jobj)
		: object<Scheme>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		Scheme(local_ref< java::lang::String > const&, local_ref< org::apache::http::conn::scheme::SocketFactory > const&, jint);
		jint getDefaultPort();
		local_ref< org::apache::http::conn::scheme::SocketFactory > getSocketFactory();
		local_ref< java::lang::String > getName();
		jboolean isLayered();
		jint resolvePort(jint);
		local_ref< java::lang::String > toString();
		jboolean equals(local_ref< java::lang::Object >  const&);
		jint hashCode();
	}; //class Scheme

} //namespace scheme
} //namespace conn
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_CONN_SCHEME_SCHEME_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_CONN_SCHEME_SCHEME_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_CONN_SCHEME_SCHEME_HPP_IMPL

namespace j2cpp {



org::apache::http::conn::scheme::Scheme::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


org::apache::http::conn::scheme::Scheme::Scheme(local_ref< java::lang::String > const &a0, local_ref< org::apache::http::conn::scheme::SocketFactory > const &a1, jint a2)
: object<org::apache::http::conn::scheme::Scheme>(
	call_new_object<
		org::apache::http::conn::scheme::Scheme::J2CPP_CLASS_NAME,
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_NAME(0),
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1, a2)
)
{
}


jint org::apache::http::conn::scheme::Scheme::getDefaultPort()
{
	return call_method<
		org::apache::http::conn::scheme::Scheme::J2CPP_CLASS_NAME,
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_NAME(1),
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_SIGNATURE(1), 
		jint
	>(get_jobject());
}

local_ref< org::apache::http::conn::scheme::SocketFactory > org::apache::http::conn::scheme::Scheme::getSocketFactory()
{
	return call_method<
		org::apache::http::conn::scheme::Scheme::J2CPP_CLASS_NAME,
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_NAME(2),
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< org::apache::http::conn::scheme::SocketFactory >
	>(get_jobject());
}

local_ref< java::lang::String > org::apache::http::conn::scheme::Scheme::getName()
{
	return call_method<
		org::apache::http::conn::scheme::Scheme::J2CPP_CLASS_NAME,
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_NAME(3),
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean org::apache::http::conn::scheme::Scheme::isLayered()
{
	return call_method<
		org::apache::http::conn::scheme::Scheme::J2CPP_CLASS_NAME,
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_NAME(4),
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(get_jobject());
}

jint org::apache::http::conn::scheme::Scheme::resolvePort(jint a0)
{
	return call_method<
		org::apache::http::conn::scheme::Scheme::J2CPP_CLASS_NAME,
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_NAME(5),
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_SIGNATURE(5), 
		jint
	>(get_jobject(), a0);
}

local_ref< java::lang::String > org::apache::http::conn::scheme::Scheme::toString()
{
	return call_method<
		org::apache::http::conn::scheme::Scheme::J2CPP_CLASS_NAME,
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_NAME(6),
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean org::apache::http::conn::scheme::Scheme::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		org::apache::http::conn::scheme::Scheme::J2CPP_CLASS_NAME,
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_NAME(7),
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject(), a0);
}

jint org::apache::http::conn::scheme::Scheme::hashCode()
{
	return call_method<
		org::apache::http::conn::scheme::Scheme::J2CPP_CLASS_NAME,
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_NAME(8),
		org::apache::http::conn::scheme::Scheme::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(org::apache::http::conn::scheme::Scheme,"org/apache/http/conn/scheme/Scheme")
J2CPP_DEFINE_METHOD(org::apache::http::conn::scheme::Scheme,0,"<init>","(Ljava/lang/String;Lorg/apache/http/conn/scheme/SocketFactory;I)V")
J2CPP_DEFINE_METHOD(org::apache::http::conn::scheme::Scheme,1,"getDefaultPort","()I")
J2CPP_DEFINE_METHOD(org::apache::http::conn::scheme::Scheme,2,"getSocketFactory","()Lorg/apache/http/conn/scheme/SocketFactory;")
J2CPP_DEFINE_METHOD(org::apache::http::conn::scheme::Scheme,3,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::apache::http::conn::scheme::Scheme,4,"isLayered","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::conn::scheme::Scheme,5,"resolvePort","(I)I")
J2CPP_DEFINE_METHOD(org::apache::http::conn::scheme::Scheme,6,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::apache::http::conn::scheme::Scheme,7,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::conn::scheme::Scheme,8,"hashCode","()I")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_CONN_SCHEME_SCHEME_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

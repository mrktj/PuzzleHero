/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: org.apache.http.impl.conn.AbstractClientConnAdapter
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_HPP_DECL


namespace j2cpp { namespace org { namespace apache { namespace http { class HttpResponse; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpEntityEnclosingRequest; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpConnection; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpConnectionMetrics; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpRequest; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpClientConnection; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { class ConnectionReleaseTrigger; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace conn { class ManagedClientConnection; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpInetConnection; } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace net { class InetAddress; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }
namespace j2cpp { namespace javax { namespace net { namespace ssl { class SSLSession; } } } }


#include <java/lang/Object.hpp>
#include <java/net/InetAddress.hpp>
#include <java/util/concurrent/TimeUnit.hpp>
#include <javax/net/ssl/SSLSession.hpp>
#include <org/apache/http/HttpClientConnection.hpp>
#include <org/apache/http/HttpConnection.hpp>
#include <org/apache/http/HttpConnectionMetrics.hpp>
#include <org/apache/http/HttpEntityEnclosingRequest.hpp>
#include <org/apache/http/HttpInetConnection.hpp>
#include <org/apache/http/HttpRequest.hpp>
#include <org/apache/http/HttpResponse.hpp>
#include <org/apache/http/conn/ConnectionReleaseTrigger.hpp>
#include <org/apache/http/conn/ManagedClientConnection.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl { namespace conn {

	class AbstractClientConnAdapter;
	class AbstractClientConnAdapter
		: public object<AbstractClientConnAdapter>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)

		explicit AbstractClientConnAdapter(jobject jobj)
		: object<AbstractClientConnAdapter>(jobj)
		{
		}

		operator local_ref<org::apache::http::HttpConnection>() const;
		operator local_ref<org::apache::http::HttpClientConnection>() const;
		operator local_ref<org::apache::http::conn::ConnectionReleaseTrigger>() const;
		operator local_ref<org::apache::http::conn::ManagedClientConnection>() const;
		operator local_ref<org::apache::http::HttpInetConnection>() const;
		operator local_ref<java::lang::Object>() const;


		jboolean isOpen();
		jboolean isStale();
		void setSocketTimeout(jint);
		jint getSocketTimeout();
		local_ref< org::apache::http::HttpConnectionMetrics > getMetrics();
		void flush();
		jboolean isResponseAvailable(jint);
		void receiveResponseEntity(local_ref< org::apache::http::HttpResponse >  const&);
		local_ref< org::apache::http::HttpResponse > receiveResponseHeader();
		void sendRequestEntity(local_ref< org::apache::http::HttpEntityEnclosingRequest >  const&);
		void sendRequestHeader(local_ref< org::apache::http::HttpRequest >  const&);
		local_ref< java::net::InetAddress > getLocalAddress();
		jint getLocalPort();
		local_ref< java::net::InetAddress > getRemoteAddress();
		jint getRemotePort();
		jboolean isSecure();
		local_ref< javax::net::ssl::SSLSession > getSSLSession();
		void markReusable();
		void unmarkReusable();
		jboolean isMarkedReusable();
		void setIdleDuration(jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		void releaseConnection();
		void abortConnection();
	}; //class AbstractClientConnAdapter

} //namespace conn
} //namespace impl
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_HPP_IMPL

namespace j2cpp {



org::apache::http::impl::conn::AbstractClientConnAdapter::operator local_ref<org::apache::http::HttpConnection>() const
{
	return local_ref<org::apache::http::HttpConnection>(get_jobject());
}

org::apache::http::impl::conn::AbstractClientConnAdapter::operator local_ref<org::apache::http::HttpClientConnection>() const
{
	return local_ref<org::apache::http::HttpClientConnection>(get_jobject());
}

org::apache::http::impl::conn::AbstractClientConnAdapter::operator local_ref<org::apache::http::conn::ConnectionReleaseTrigger>() const
{
	return local_ref<org::apache::http::conn::ConnectionReleaseTrigger>(get_jobject());
}

org::apache::http::impl::conn::AbstractClientConnAdapter::operator local_ref<org::apache::http::conn::ManagedClientConnection>() const
{
	return local_ref<org::apache::http::conn::ManagedClientConnection>(get_jobject());
}

org::apache::http::impl::conn::AbstractClientConnAdapter::operator local_ref<org::apache::http::HttpInetConnection>() const
{
	return local_ref<org::apache::http::HttpInetConnection>(get_jobject());
}

org::apache::http::impl::conn::AbstractClientConnAdapter::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}







jboolean org::apache::http::impl::conn::AbstractClientConnAdapter::isOpen()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(6),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(6), 
		jboolean
	>(get_jobject());
}

jboolean org::apache::http::impl::conn::AbstractClientConnAdapter::isStale()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(7),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject());
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::setSocketTimeout(jint a0)
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(8),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}

jint org::apache::http::impl::conn::AbstractClientConnAdapter::getSocketTimeout()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(9),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(9), 
		jint
	>(get_jobject());
}

local_ref< org::apache::http::HttpConnectionMetrics > org::apache::http::impl::conn::AbstractClientConnAdapter::getMetrics()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(10),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< org::apache::http::HttpConnectionMetrics >
	>(get_jobject());
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::flush()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(11),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject());
}

jboolean org::apache::http::impl::conn::AbstractClientConnAdapter::isResponseAvailable(jint a0)
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(12),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(12), 
		jboolean
	>(get_jobject(), a0);
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::receiveResponseEntity(local_ref< org::apache::http::HttpResponse > const &a0)
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(13),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject(), a0);
}

local_ref< org::apache::http::HttpResponse > org::apache::http::impl::conn::AbstractClientConnAdapter::receiveResponseHeader()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(14),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(14), 
		local_ref< org::apache::http::HttpResponse >
	>(get_jobject());
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::sendRequestEntity(local_ref< org::apache::http::HttpEntityEnclosingRequest > const &a0)
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(15),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(15), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::sendRequestHeader(local_ref< org::apache::http::HttpRequest > const &a0)
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(16),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(16), 
		void
	>(get_jobject(), a0);
}

local_ref< java::net::InetAddress > org::apache::http::impl::conn::AbstractClientConnAdapter::getLocalAddress()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(17),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(17), 
		local_ref< java::net::InetAddress >
	>(get_jobject());
}

jint org::apache::http::impl::conn::AbstractClientConnAdapter::getLocalPort()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(18),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(18), 
		jint
	>(get_jobject());
}

local_ref< java::net::InetAddress > org::apache::http::impl::conn::AbstractClientConnAdapter::getRemoteAddress()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(19),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(19), 
		local_ref< java::net::InetAddress >
	>(get_jobject());
}

jint org::apache::http::impl::conn::AbstractClientConnAdapter::getRemotePort()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(20),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(20), 
		jint
	>(get_jobject());
}

jboolean org::apache::http::impl::conn::AbstractClientConnAdapter::isSecure()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(21),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(21), 
		jboolean
	>(get_jobject());
}

local_ref< javax::net::ssl::SSLSession > org::apache::http::impl::conn::AbstractClientConnAdapter::getSSLSession()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(22),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(22), 
		local_ref< javax::net::ssl::SSLSession >
	>(get_jobject());
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::markReusable()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(23),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(23), 
		void
	>(get_jobject());
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::unmarkReusable()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(24),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(24), 
		void
	>(get_jobject());
}

jboolean org::apache::http::impl::conn::AbstractClientConnAdapter::isMarkedReusable()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(25),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(25), 
		jboolean
	>(get_jobject());
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::setIdleDuration(jlong a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(26),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(26), 
		void
	>(get_jobject(), a0, a1);
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::releaseConnection()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(27),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(27), 
		void
	>(get_jobject());
}

void org::apache::http::impl::conn::AbstractClientConnAdapter::abortConnection()
{
	return call_method<
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_CLASS_NAME,
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_NAME(28),
		org::apache::http::impl::conn::AbstractClientConnAdapter::J2CPP_METHOD_SIGNATURE(28), 
		void
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(org::apache::http::impl::conn::AbstractClientConnAdapter,"org/apache/http/impl/conn/AbstractClientConnAdapter")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,0,"<init>","(Lorg/apache/http/conn/ClientConnectionManager;Lorg/apache/http/conn/OperatedClientConnection;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,1,"detach","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,2,"getWrappedConnection","()Lorg/apache/http/conn/OperatedClientConnection;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,3,"getManager","()Lorg/apache/http/conn/ClientConnectionManager;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,4,"assertNotAborted","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,5,"assertValid","(Lorg/apache/http/conn/OperatedClientConnection;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,6,"isOpen","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,7,"isStale","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,8,"setSocketTimeout","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,9,"getSocketTimeout","()I")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,10,"getMetrics","()Lorg/apache/http/HttpConnectionMetrics;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,11,"flush","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,12,"isResponseAvailable","(I)Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,13,"receiveResponseEntity","(Lorg/apache/http/HttpResponse;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,14,"receiveResponseHeader","()Lorg/apache/http/HttpResponse;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,15,"sendRequestEntity","(Lorg/apache/http/HttpEntityEnclosingRequest;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,16,"sendRequestHeader","(Lorg/apache/http/HttpRequest;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,17,"getLocalAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,18,"getLocalPort","()I")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,19,"getRemoteAddress","()Ljava/net/InetAddress;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,20,"getRemotePort","()I")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,21,"isSecure","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,22,"getSSLSession","()Ljavax/net/ssl/SSLSession;")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,23,"markReusable","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,24,"unmarkReusable","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,25,"isMarkedReusable","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,26,"setIdleDuration","(JLjava/util/concurrent/TimeUnit;)V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,27,"releaseConnection","()V")
J2CPP_DEFINE_METHOD(org::apache::http::impl::conn::AbstractClientConnAdapter,28,"abortConnection","()V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_CONN_ABSTRACTCLIENTCONNADAPTER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

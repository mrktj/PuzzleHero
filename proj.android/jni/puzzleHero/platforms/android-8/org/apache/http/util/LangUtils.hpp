/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: org.apache.http.util.LangUtils
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_UTIL_LANGUTILS_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_UTIL_LANGUTILS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace util {

	class LangUtils;
	class LangUtils
		: public object<LangUtils>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		explicit LangUtils(jobject jobj)
		: object<LangUtils>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static jint hashCode(jint, jint);
		static jint hashCode(jint, jboolean);
		static jint hashCode(jint, local_ref< java::lang::Object >  const&);
		static jboolean equals(local_ref< java::lang::Object >  const&, local_ref< java::lang::Object >  const&);
		static jboolean equals(local_ref< array< local_ref< java::lang::Object >, 1> >  const&, local_ref< array< local_ref< java::lang::Object >, 1> >  const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > HASH_SEED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > HASH_OFFSET;
	}; //class LangUtils

} //namespace util
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_UTIL_LANGUTILS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_UTIL_LANGUTILS_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_UTIL_LANGUTILS_HPP_IMPL

namespace j2cpp {



org::apache::http::util::LangUtils::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


jint org::apache::http::util::LangUtils::hashCode(jint a0, jint a1)
{
	return call_static_method<
		org::apache::http::util::LangUtils::J2CPP_CLASS_NAME,
		org::apache::http::util::LangUtils::J2CPP_METHOD_NAME(1),
		org::apache::http::util::LangUtils::J2CPP_METHOD_SIGNATURE(1), 
		jint
	>(a0, a1);
}

jint org::apache::http::util::LangUtils::hashCode(jint a0, jboolean a1)
{
	return call_static_method<
		org::apache::http::util::LangUtils::J2CPP_CLASS_NAME,
		org::apache::http::util::LangUtils::J2CPP_METHOD_NAME(2),
		org::apache::http::util::LangUtils::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(a0, a1);
}

jint org::apache::http::util::LangUtils::hashCode(jint a0, local_ref< java::lang::Object > const &a1)
{
	return call_static_method<
		org::apache::http::util::LangUtils::J2CPP_CLASS_NAME,
		org::apache::http::util::LangUtils::J2CPP_METHOD_NAME(3),
		org::apache::http::util::LangUtils::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(a0, a1);
}

jboolean org::apache::http::util::LangUtils::equals(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return call_static_method<
		org::apache::http::util::LangUtils::J2CPP_CLASS_NAME,
		org::apache::http::util::LangUtils::J2CPP_METHOD_NAME(4),
		org::apache::http::util::LangUtils::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(a0, a1);
}

jboolean org::apache::http::util::LangUtils::equals(local_ref< array< local_ref< java::lang::Object >, 1> > const &a0, local_ref< array< local_ref< java::lang::Object >, 1> > const &a1)
{
	return call_static_method<
		org::apache::http::util::LangUtils::J2CPP_CLASS_NAME,
		org::apache::http::util::LangUtils::J2CPP_METHOD_NAME(5),
		org::apache::http::util::LangUtils::J2CPP_METHOD_SIGNATURE(5), 
		jboolean
	>(a0, a1);
}


static_field<
	org::apache::http::util::LangUtils::J2CPP_CLASS_NAME,
	org::apache::http::util::LangUtils::J2CPP_FIELD_NAME(0),
	org::apache::http::util::LangUtils::J2CPP_FIELD_SIGNATURE(0),
	jint
> org::apache::http::util::LangUtils::HASH_SEED;

static_field<
	org::apache::http::util::LangUtils::J2CPP_CLASS_NAME,
	org::apache::http::util::LangUtils::J2CPP_FIELD_NAME(1),
	org::apache::http::util::LangUtils::J2CPP_FIELD_SIGNATURE(1),
	jint
> org::apache::http::util::LangUtils::HASH_OFFSET;


J2CPP_DEFINE_CLASS(org::apache::http::util::LangUtils,"org/apache/http/util/LangUtils")
J2CPP_DEFINE_METHOD(org::apache::http::util::LangUtils,0,"<init>","()V")
J2CPP_DEFINE_METHOD(org::apache::http::util::LangUtils,1,"hashCode","(II)I")
J2CPP_DEFINE_METHOD(org::apache::http::util::LangUtils,2,"hashCode","(IZ)I")
J2CPP_DEFINE_METHOD(org::apache::http::util::LangUtils,3,"hashCode","(ILjava/lang/Object;)I")
J2CPP_DEFINE_METHOD(org::apache::http::util::LangUtils,4,"equals","(Ljava/lang/Object;Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::util::LangUtils,5,"equals","([java.lang.Object[java.lang.Object)Z")
J2CPP_DEFINE_FIELD(org::apache::http::util::LangUtils,0,"HASH_SEED","I")
J2CPP_DEFINE_FIELD(org::apache::http::util::LangUtils,1,"HASH_OFFSET","I")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_UTIL_LANGUTILS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

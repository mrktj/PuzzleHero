/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: org.apache.http.HttpHost
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_HTTPHOST_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_HTTPHOST_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Cloneable; } } }


#include <java/lang/Cloneable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http {

	class HttpHost;
	class HttpHost
		: public object<HttpHost>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)

		explicit HttpHost(jobject jobj)
		: object<HttpHost>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Cloneable>() const;


		HttpHost(local_ref< java::lang::String > const&, jint, local_ref< java::lang::String > const&);
		HttpHost(local_ref< java::lang::String > const&, jint);
		HttpHost(local_ref< java::lang::String > const&);
		HttpHost(local_ref< org::apache::http::HttpHost > const&);
		local_ref< java::lang::String > getHostName();
		jint getPort();
		local_ref< java::lang::String > getSchemeName();
		local_ref< java::lang::String > toURI();
		local_ref< java::lang::String > toHostString();
		local_ref< java::lang::String > toString();
		jboolean equals(local_ref< java::lang::Object >  const&);
		jint hashCode();
		local_ref< java::lang::Object > clone();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::lang::String > > DEFAULT_SCHEME_NAME;
	}; //class HttpHost

} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_HTTPHOST_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_HTTPHOST_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_HTTPHOST_HPP_IMPL

namespace j2cpp {



org::apache::http::HttpHost::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

org::apache::http::HttpHost::operator local_ref<java::lang::Cloneable>() const
{
	return local_ref<java::lang::Cloneable>(get_jobject());
}


org::apache::http::HttpHost::HttpHost(local_ref< java::lang::String > const &a0, jint a1, local_ref< java::lang::String > const &a2)
: object<org::apache::http::HttpHost>(
	call_new_object<
		org::apache::http::HttpHost::J2CPP_CLASS_NAME,
		org::apache::http::HttpHost::J2CPP_METHOD_NAME(0),
		org::apache::http::HttpHost::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1, a2)
)
{
}



org::apache::http::HttpHost::HttpHost(local_ref< java::lang::String > const &a0, jint a1)
: object<org::apache::http::HttpHost>(
	call_new_object<
		org::apache::http::HttpHost::J2CPP_CLASS_NAME,
		org::apache::http::HttpHost::J2CPP_METHOD_NAME(1),
		org::apache::http::HttpHost::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1)
)
{
}



org::apache::http::HttpHost::HttpHost(local_ref< java::lang::String > const &a0)
: object<org::apache::http::HttpHost>(
	call_new_object<
		org::apache::http::HttpHost::J2CPP_CLASS_NAME,
		org::apache::http::HttpHost::J2CPP_METHOD_NAME(2),
		org::apache::http::HttpHost::J2CPP_METHOD_SIGNATURE(2)
	>(a0)
)
{
}



org::apache::http::HttpHost::HttpHost(local_ref< org::apache::http::HttpHost > const &a0)
: object<org::apache::http::HttpHost>(
	call_new_object<
		org::apache::http::HttpHost::J2CPP_CLASS_NAME,
		org::apache::http::HttpHost::J2CPP_METHOD_NAME(3),
		org::apache::http::HttpHost::J2CPP_METHOD_SIGNATURE(3)
	>(a0)
)
{
}


local_ref< java::lang::String > org::apache::http::HttpHost::getHostName()
{
	return call_method<
		org::apache::http::HttpHost::J2CPP_CLASS_NAME,
		org::apache::http::HttpHost::J2CPP_METHOD_NAME(4),
		org::apache::http::HttpHost::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint org::apache::http::HttpHost::getPort()
{
	return call_method<
		org::apache::http::HttpHost::J2CPP_CLASS_NAME,
		org::apache::http::HttpHost::J2CPP_METHOD_NAME(5),
		org::apache::http::HttpHost::J2CPP_METHOD_SIGNATURE(5), 
		jint
	>(get_jobject());
}

local_ref< java::lang::String > org::apache::http::HttpHost::getSchemeName()
{
	return call_method<
		org::apache::http::HttpHost::J2CPP_CLASS_NAME,
		org::apache::http::HttpHost::J2CPP_METHOD_NAME(6),
		org::apache::http::HttpHost::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > org::apache::http::HttpHost::toURI()
{
	return call_method<
		org::apache::http::HttpHost::J2CPP_CLASS_NAME,
		org::apache::http::HttpHost::J2CPP_METHOD_NAME(7),
		org::apache::http::HttpHost::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > org::apache::http::HttpHost::toHostString()
{
	return call_method<
		org::apache::http::HttpHost::J2CPP_CLASS_NAME,
		org::apache::http::HttpHost::J2CPP_METHOD_NAME(8),
		org::apache::http::HttpHost::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > org::apache::http::HttpHost::toString()
{
	return call_method<
		org::apache::http::HttpHost::J2CPP_CLASS_NAME,
		org::apache::http::HttpHost::J2CPP_METHOD_NAME(9),
		org::apache::http::HttpHost::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean org::apache::http::HttpHost::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		org::apache::http::HttpHost::J2CPP_CLASS_NAME,
		org::apache::http::HttpHost::J2CPP_METHOD_NAME(10),
		org::apache::http::HttpHost::J2CPP_METHOD_SIGNATURE(10), 
		jboolean
	>(get_jobject(), a0);
}

jint org::apache::http::HttpHost::hashCode()
{
	return call_method<
		org::apache::http::HttpHost::J2CPP_CLASS_NAME,
		org::apache::http::HttpHost::J2CPP_METHOD_NAME(11),
		org::apache::http::HttpHost::J2CPP_METHOD_SIGNATURE(11), 
		jint
	>(get_jobject());
}

local_ref< java::lang::Object > org::apache::http::HttpHost::clone()
{
	return call_method<
		org::apache::http::HttpHost::J2CPP_CLASS_NAME,
		org::apache::http::HttpHost::J2CPP_METHOD_NAME(12),
		org::apache::http::HttpHost::J2CPP_METHOD_SIGNATURE(12), 
		local_ref< java::lang::Object >
	>(get_jobject());
}


static_field<
	org::apache::http::HttpHost::J2CPP_CLASS_NAME,
	org::apache::http::HttpHost::J2CPP_FIELD_NAME(0),
	org::apache::http::HttpHost::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::lang::String >
> org::apache::http::HttpHost::DEFAULT_SCHEME_NAME;


J2CPP_DEFINE_CLASS(org::apache::http::HttpHost,"org/apache/http/HttpHost")
J2CPP_DEFINE_METHOD(org::apache::http::HttpHost,0,"<init>","(Ljava/lang/String;ILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::HttpHost,1,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(org::apache::http::HttpHost,2,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::HttpHost,3,"<init>","(Lorg/apache/http/HttpHost;)V")
J2CPP_DEFINE_METHOD(org::apache::http::HttpHost,4,"getHostName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::apache::http::HttpHost,5,"getPort","()I")
J2CPP_DEFINE_METHOD(org::apache::http::HttpHost,6,"getSchemeName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::apache::http::HttpHost,7,"toURI","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::apache::http::HttpHost,8,"toHostString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::apache::http::HttpHost,9,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::apache::http::HttpHost,10,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(org::apache::http::HttpHost,11,"hashCode","()I")
J2CPP_DEFINE_METHOD(org::apache::http::HttpHost,12,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_FIELD(org::apache::http::HttpHost,0,"DEFAULT_SCHEME_NAME","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::apache::http::HttpHost,1,"hostname","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::apache::http::HttpHost,2,"lcHostname","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::apache::http::HttpHost,3,"port","I")
J2CPP_DEFINE_FIELD(org::apache::http::HttpHost,4,"schemeName","Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_HTTPHOST_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

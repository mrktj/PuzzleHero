/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: org.json.JSONTokener
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_JSON_JSONTOKENER_HPP_DECL
#define J2CPP_ORG_JSON_JSONTOKENER_HPP_DECL


namespace j2cpp { namespace org { namespace json { class JSONException; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <org/json/JSONException.hpp>


namespace j2cpp {

namespace org { namespace json {

	class JSONTokener;
	class JSONTokener
		: public object<JSONTokener>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)

		explicit JSONTokener(jobject jobj)
		: object<JSONTokener>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		JSONTokener(local_ref< java::lang::String > const&);
		local_ref< java::lang::Object > nextValue();
		local_ref< java::lang::String > nextString(jchar);
		local_ref< org::json::JSONException > syntaxError(local_ref< java::lang::String >  const&);
		local_ref< java::lang::String > toString();
		jboolean more();
		jchar next();
		jchar next(jchar);
		jchar nextClean();
		local_ref< java::lang::String > next(jint);
		local_ref< java::lang::String > nextTo(local_ref< java::lang::String >  const&);
		local_ref< java::lang::String > nextTo(jchar);
		void skipPast(local_ref< java::lang::String >  const&);
		jchar skipTo(jchar);
		void back();
		static jint dehexchar(jchar);
	}; //class JSONTokener

} //namespace json
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_JSON_JSONTOKENER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_JSON_JSONTOKENER_HPP_IMPL
#define J2CPP_ORG_JSON_JSONTOKENER_HPP_IMPL

namespace j2cpp {



org::json::JSONTokener::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


org::json::JSONTokener::JSONTokener(local_ref< java::lang::String > const &a0)
: object<org::json::JSONTokener>(
	call_new_object<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(0),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}


local_ref< java::lang::Object > org::json::JSONTokener::nextValue()
{
	return call_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(1),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::String > org::json::JSONTokener::nextString(jchar a0)
{
	return call_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(2),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::lang::String >
	>(get_jobject(), a0);
}

local_ref< org::json::JSONException > org::json::JSONTokener::syntaxError(local_ref< java::lang::String > const &a0)
{
	return call_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(3),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< org::json::JSONException >
	>(get_jobject(), a0);
}

local_ref< java::lang::String > org::json::JSONTokener::toString()
{
	return call_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(4),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean org::json::JSONTokener::more()
{
	return call_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(5),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(5), 
		jboolean
	>(get_jobject());
}

jchar org::json::JSONTokener::next()
{
	return call_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(6),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(6), 
		jchar
	>(get_jobject());
}

jchar org::json::JSONTokener::next(jchar a0)
{
	return call_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(7),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(7), 
		jchar
	>(get_jobject(), a0);
}

jchar org::json::JSONTokener::nextClean()
{
	return call_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(8),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(8), 
		jchar
	>(get_jobject());
}

local_ref< java::lang::String > org::json::JSONTokener::next(jint a0)
{
	return call_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(9),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::lang::String >
	>(get_jobject(), a0);
}

local_ref< java::lang::String > org::json::JSONTokener::nextTo(local_ref< java::lang::String > const &a0)
{
	return call_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(10),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::lang::String >
	>(get_jobject(), a0);
}

local_ref< java::lang::String > org::json::JSONTokener::nextTo(jchar a0)
{
	return call_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(11),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< java::lang::String >
	>(get_jobject(), a0);
}

void org::json::JSONTokener::skipPast(local_ref< java::lang::String > const &a0)
{
	return call_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(12),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(12), 
		void
	>(get_jobject(), a0);
}

jchar org::json::JSONTokener::skipTo(jchar a0)
{
	return call_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(13),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(13), 
		jchar
	>(get_jobject(), a0);
}

void org::json::JSONTokener::back()
{
	return call_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(14),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(14), 
		void
	>(get_jobject());
}

jint org::json::JSONTokener::dehexchar(jchar a0)
{
	return call_static_method<
		org::json::JSONTokener::J2CPP_CLASS_NAME,
		org::json::JSONTokener::J2CPP_METHOD_NAME(15),
		org::json::JSONTokener::J2CPP_METHOD_SIGNATURE(15), 
		jint
	>(a0);
}


J2CPP_DEFINE_CLASS(org::json::JSONTokener,"org/json/JSONTokener")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,0,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,1,"nextValue","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,2,"nextString","(C)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,3,"syntaxError","(Ljava/lang/String;)Lorg/json/JSONException;")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,4,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,5,"more","()Z")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,6,"next","()C")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,7,"next","(C)C")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,8,"nextClean","()C")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,9,"next","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,10,"nextTo","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,11,"nextTo","(C)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,12,"skipPast","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,13,"skipTo","(C)C")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,14,"back","()V")
J2CPP_DEFINE_METHOD(org::json::JSONTokener,15,"dehexchar","(C)I")

} //namespace j2cpp

#endif //J2CPP_ORG_JSON_JSONTOKENER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

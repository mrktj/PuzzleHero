/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.test.PerformanceTestCase
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_PERFORMANCETESTCASE_HPP_DECL
#define J2CPP_ANDROID_TEST_PERFORMANCETESTCASE_HPP_DECL


namespace j2cpp { namespace android { namespace test { namespace PerformanceTestCase_ { class Intermediates; } } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <android/test/PerformanceTestCase.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace test {

	class PerformanceTestCase;
	namespace PerformanceTestCase_ {

		class Intermediates;
		class Intermediates
			: public object<Intermediates>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)

			explicit Intermediates(jobject jobj)
			: object<Intermediates>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			void setInternalIterations(jint);
			void startTiming(jboolean);
			void addIntermediate(local_ref< java::lang::String >  const&);
			void addIntermediate(local_ref< java::lang::String >  const&, jlong);
			void finishTiming(jboolean);
		}; //class Intermediates

	} //namespace PerformanceTestCase_

	class PerformanceTestCase
		: public object<PerformanceTestCase>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		typedef PerformanceTestCase_::Intermediates Intermediates;

		explicit PerformanceTestCase(jobject jobj)
		: object<PerformanceTestCase>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		jint startPerformance(local_ref< android::test::PerformanceTestCase_::Intermediates >  const&);
		jboolean isPerformanceOnly();
	}; //class PerformanceTestCase

} //namespace test
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_PERFORMANCETESTCASE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_PERFORMANCETESTCASE_HPP_IMPL
#define J2CPP_ANDROID_TEST_PERFORMANCETESTCASE_HPP_IMPL

namespace j2cpp {




android::test::PerformanceTestCase_::Intermediates::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

void android::test::PerformanceTestCase_::Intermediates::setInternalIterations(jint a0)
{
	return call_method<
		android::test::PerformanceTestCase_::Intermediates::J2CPP_CLASS_NAME,
		android::test::PerformanceTestCase_::Intermediates::J2CPP_METHOD_NAME(0),
		android::test::PerformanceTestCase_::Intermediates::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0);
}

void android::test::PerformanceTestCase_::Intermediates::startTiming(jboolean a0)
{
	return call_method<
		android::test::PerformanceTestCase_::Intermediates::J2CPP_CLASS_NAME,
		android::test::PerformanceTestCase_::Intermediates::J2CPP_METHOD_NAME(1),
		android::test::PerformanceTestCase_::Intermediates::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0);
}

void android::test::PerformanceTestCase_::Intermediates::addIntermediate(local_ref< java::lang::String > const &a0)
{
	return call_method<
		android::test::PerformanceTestCase_::Intermediates::J2CPP_CLASS_NAME,
		android::test::PerformanceTestCase_::Intermediates::J2CPP_METHOD_NAME(2),
		android::test::PerformanceTestCase_::Intermediates::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0);
}

void android::test::PerformanceTestCase_::Intermediates::addIntermediate(local_ref< java::lang::String > const &a0, jlong a1)
{
	return call_method<
		android::test::PerformanceTestCase_::Intermediates::J2CPP_CLASS_NAME,
		android::test::PerformanceTestCase_::Intermediates::J2CPP_METHOD_NAME(3),
		android::test::PerformanceTestCase_::Intermediates::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0, a1);
}

void android::test::PerformanceTestCase_::Intermediates::finishTiming(jboolean a0)
{
	return call_method<
		android::test::PerformanceTestCase_::Intermediates::J2CPP_CLASS_NAME,
		android::test::PerformanceTestCase_::Intermediates::J2CPP_METHOD_NAME(4),
		android::test::PerformanceTestCase_::Intermediates::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(android::test::PerformanceTestCase_::Intermediates,"android/test/PerformanceTestCase$Intermediates")
J2CPP_DEFINE_METHOD(android::test::PerformanceTestCase_::Intermediates,0,"setInternalIterations","(I)V")
J2CPP_DEFINE_METHOD(android::test::PerformanceTestCase_::Intermediates,1,"startTiming","(Z)V")
J2CPP_DEFINE_METHOD(android::test::PerformanceTestCase_::Intermediates,2,"addIntermediate","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::test::PerformanceTestCase_::Intermediates,3,"addIntermediate","(Ljava/lang/String;J)V")
J2CPP_DEFINE_METHOD(android::test::PerformanceTestCase_::Intermediates,4,"finishTiming","(Z)V")



android::test::PerformanceTestCase::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

jint android::test::PerformanceTestCase::startPerformance(local_ref< android::test::PerformanceTestCase_::Intermediates > const &a0)
{
	return call_method<
		android::test::PerformanceTestCase::J2CPP_CLASS_NAME,
		android::test::PerformanceTestCase::J2CPP_METHOD_NAME(0),
		android::test::PerformanceTestCase::J2CPP_METHOD_SIGNATURE(0), 
		jint
	>(get_jobject(), a0);
}

jboolean android::test::PerformanceTestCase::isPerformanceOnly()
{
	return call_method<
		android::test::PerformanceTestCase::J2CPP_CLASS_NAME,
		android::test::PerformanceTestCase::J2CPP_METHOD_NAME(1),
		android::test::PerformanceTestCase::J2CPP_METHOD_SIGNATURE(1), 
		jboolean
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(android::test::PerformanceTestCase,"android/test/PerformanceTestCase")
J2CPP_DEFINE_METHOD(android::test::PerformanceTestCase,0,"startPerformance","(Landroid/test/PerformanceTestCase$Intermediates;)I")
J2CPP_DEFINE_METHOD(android::test::PerformanceTestCase,1,"isPerformanceOnly","()Z")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_PERFORMANCETESTCASE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

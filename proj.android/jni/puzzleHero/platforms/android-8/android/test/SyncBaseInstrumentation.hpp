/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.test.SyncBaseInstrumentation
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_SYNCBASEINSTRUMENTATION_HPP_DECL
#define J2CPP_ANDROID_TEST_SYNCBASEINSTRUMENTATION_HPP_DECL


namespace j2cpp { namespace junit { namespace framework { class Assert; } } }
namespace j2cpp { namespace junit { namespace framework { class Test; } } }
namespace j2cpp { namespace junit { namespace framework { class TestCase; } } }
namespace j2cpp { namespace android { namespace test { class InstrumentationTestCase; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <android/test/InstrumentationTestCase.hpp>
#include <java/lang/Object.hpp>
#include <junit/framework/Assert.hpp>
#include <junit/framework/Test.hpp>
#include <junit/framework/TestCase.hpp>


namespace j2cpp {

namespace android { namespace test {

	class SyncBaseInstrumentation;
	class SyncBaseInstrumentation
		: public object<SyncBaseInstrumentation>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		explicit SyncBaseInstrumentation(jobject jobj)
		: object<SyncBaseInstrumentation>(jobj)
		{
		}

		operator local_ref<junit::framework::Assert>() const;
		operator local_ref<junit::framework::Test>() const;
		operator local_ref<junit::framework::TestCase>() const;
		operator local_ref<android::test::InstrumentationTestCase>() const;
		operator local_ref<java::lang::Object>() const;


		SyncBaseInstrumentation();
	}; //class SyncBaseInstrumentation

} //namespace test
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_SYNCBASEINSTRUMENTATION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_SYNCBASEINSTRUMENTATION_HPP_IMPL
#define J2CPP_ANDROID_TEST_SYNCBASEINSTRUMENTATION_HPP_IMPL

namespace j2cpp {



android::test::SyncBaseInstrumentation::operator local_ref<junit::framework::Assert>() const
{
	return local_ref<junit::framework::Assert>(get_jobject());
}

android::test::SyncBaseInstrumentation::operator local_ref<junit::framework::Test>() const
{
	return local_ref<junit::framework::Test>(get_jobject());
}

android::test::SyncBaseInstrumentation::operator local_ref<junit::framework::TestCase>() const
{
	return local_ref<junit::framework::TestCase>(get_jobject());
}

android::test::SyncBaseInstrumentation::operator local_ref<android::test::InstrumentationTestCase>() const
{
	return local_ref<android::test::InstrumentationTestCase>(get_jobject());
}

android::test::SyncBaseInstrumentation::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


android::test::SyncBaseInstrumentation::SyncBaseInstrumentation()
: object<android::test::SyncBaseInstrumentation>(
	call_new_object<
		android::test::SyncBaseInstrumentation::J2CPP_CLASS_NAME,
		android::test::SyncBaseInstrumentation::J2CPP_METHOD_NAME(0),
		android::test::SyncBaseInstrumentation::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}






J2CPP_DEFINE_CLASS(android::test::SyncBaseInstrumentation,"android/test/SyncBaseInstrumentation")
J2CPP_DEFINE_METHOD(android::test::SyncBaseInstrumentation,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::test::SyncBaseInstrumentation,1,"setUp","()V")
J2CPP_DEFINE_METHOD(android::test::SyncBaseInstrumentation,2,"syncProvider","(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::test::SyncBaseInstrumentation,3,"cancelSyncsandDisableAutoSync","()V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_SYNCBASEINSTRUMENTATION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

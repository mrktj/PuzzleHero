/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.test.AndroidTestRunner
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_ANDROIDTESTRUNNER_HPP_DECL
#define J2CPP_ANDROID_TEST_ANDROIDTESTRUNNER_HPP_DECL


namespace j2cpp { namespace junit { namespace framework { class TestListener; } } }
namespace j2cpp { namespace junit { namespace framework { class TestResult; } } }
namespace j2cpp { namespace junit { namespace framework { class Test; } } }
namespace j2cpp { namespace junit { namespace runner { class BaseTestRunner; } } }
namespace j2cpp { namespace android { namespace app { class Instrumentation; } } }
namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Throwable; } } }
namespace j2cpp { namespace java { namespace util { class List; } } }


#include <android/app/Instrumentation.hpp>
#include <android/content/Context.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/Throwable.hpp>
#include <java/util/List.hpp>
#include <junit/framework/Test.hpp>
#include <junit/framework/TestListener.hpp>
#include <junit/framework/TestResult.hpp>
#include <junit/runner/BaseTestRunner.hpp>


namespace j2cpp {

namespace android { namespace test {

	class AndroidTestRunner;
	class AndroidTestRunner
		: public object<AndroidTestRunner>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)

		explicit AndroidTestRunner(jobject jobj)
		: object<AndroidTestRunner>(jobj)
		{
		}

		operator local_ref<junit::framework::TestListener>() const;
		operator local_ref<junit::runner::BaseTestRunner>() const;
		operator local_ref<java::lang::Object>() const;


		AndroidTestRunner();
		void setTestClassName(local_ref< java::lang::String >  const&, local_ref< java::lang::String >  const&);
		void setTest(local_ref< junit::framework::Test >  const&);
		void clearTestListeners();
		void addTestListener(local_ref< junit::framework::TestListener >  const&);
		local_ref< java::util::List > getTestCases();
		local_ref< java::lang::String > getTestClassName();
		local_ref< junit::framework::TestResult > getTestResult();
		void runTest();
		void runTest(local_ref< junit::framework::TestResult >  const&);
		void setContext(local_ref< android::content::Context >  const&);
		void setInstrumentation(local_ref< android::app::Instrumentation >  const&);
		void setInstrumentaiton(local_ref< android::app::Instrumentation >  const&);
		void testStarted(local_ref< java::lang::String >  const&);
		void testEnded(local_ref< java::lang::String >  const&);
		void testFailed(jint, local_ref< junit::framework::Test >  const&, local_ref< java::lang::Throwable >  const&);
	}; //class AndroidTestRunner

} //namespace test
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_ANDROIDTESTRUNNER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEST_ANDROIDTESTRUNNER_HPP_IMPL
#define J2CPP_ANDROID_TEST_ANDROIDTESTRUNNER_HPP_IMPL

namespace j2cpp {



android::test::AndroidTestRunner::operator local_ref<junit::framework::TestListener>() const
{
	return local_ref<junit::framework::TestListener>(get_jobject());
}

android::test::AndroidTestRunner::operator local_ref<junit::runner::BaseTestRunner>() const
{
	return local_ref<junit::runner::BaseTestRunner>(get_jobject());
}

android::test::AndroidTestRunner::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


android::test::AndroidTestRunner::AndroidTestRunner()
: object<android::test::AndroidTestRunner>(
	call_new_object<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(0),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


void android::test::AndroidTestRunner::setTestClassName(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(1),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0, a1);
}

void android::test::AndroidTestRunner::setTest(local_ref< junit::framework::Test > const &a0)
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(2),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0);
}

void android::test::AndroidTestRunner::clearTestListeners()
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(3),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject());
}

void android::test::AndroidTestRunner::addTestListener(local_ref< junit::framework::TestListener > const &a0)
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(4),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}


local_ref< java::util::List > android::test::AndroidTestRunner::getTestCases()
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(6),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::util::List >
	>(get_jobject());
}

local_ref< java::lang::String > android::test::AndroidTestRunner::getTestClassName()
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(7),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< junit::framework::TestResult > android::test::AndroidTestRunner::getTestResult()
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(8),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< junit::framework::TestResult >
	>(get_jobject());
}

void android::test::AndroidTestRunner::runTest()
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(9),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(9), 
		void
	>(get_jobject());
}

void android::test::AndroidTestRunner::runTest(local_ref< junit::framework::TestResult > const &a0)
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(10),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject(), a0);
}

void android::test::AndroidTestRunner::setContext(local_ref< android::content::Context > const &a0)
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(11),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject(), a0);
}

void android::test::AndroidTestRunner::setInstrumentation(local_ref< android::app::Instrumentation > const &a0)
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(12),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(12), 
		void
	>(get_jobject(), a0);
}

void android::test::AndroidTestRunner::setInstrumentaiton(local_ref< android::app::Instrumentation > const &a0)
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(13),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject(), a0);
}


void android::test::AndroidTestRunner::testStarted(local_ref< java::lang::String > const &a0)
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(15),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(15), 
		void
	>(get_jobject(), a0);
}

void android::test::AndroidTestRunner::testEnded(local_ref< java::lang::String > const &a0)
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(16),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(16), 
		void
	>(get_jobject(), a0);
}

void android::test::AndroidTestRunner::testFailed(jint a0, local_ref< junit::framework::Test > const &a1, local_ref< java::lang::Throwable > const &a2)
{
	return call_method<
		android::test::AndroidTestRunner::J2CPP_CLASS_NAME,
		android::test::AndroidTestRunner::J2CPP_METHOD_NAME(17),
		android::test::AndroidTestRunner::J2CPP_METHOD_SIGNATURE(17), 
		void
	>(get_jobject(), a0, a1, a2);
}



J2CPP_DEFINE_CLASS(android::test::AndroidTestRunner,"android/test/AndroidTestRunner")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,1,"setTestClassName","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,2,"setTest","(Ljunit/framework/Test;)V")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,3,"clearTestListeners","()V")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,4,"addTestListener","(Ljunit/framework/TestListener;)V")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,5,"createTestResult","()Ljunit/framework/TestResult;")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,6,"getTestCases","()Ljava/util/List;")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,7,"getTestClassName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,8,"getTestResult","()Ljunit/framework/TestResult;")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,9,"runTest","()V")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,10,"runTest","(Ljunit/framework/TestResult;)V")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,11,"setContext","(Landroid/content/Context;)V")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,12,"setInstrumentation","(Landroid/app/Instrumentation;)V")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,13,"setInstrumentaiton","(Landroid/app/Instrumentation;)V")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,14,"loadSuiteClass","(Ljava/lang/String;)Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,15,"testStarted","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,16,"testEnded","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,17,"testFailed","(ILjunit/framework/Test;Ljava/lang/Throwable;)V")
J2CPP_DEFINE_METHOD(android::test::AndroidTestRunner,18,"runFailed","(Ljava/lang/String;)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEST_ANDROIDTESTRUNNER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

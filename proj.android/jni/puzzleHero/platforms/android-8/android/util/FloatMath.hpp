/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.util.FloatMath
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_UTIL_FLOATMATH_HPP_DECL
#define J2CPP_ANDROID_UTIL_FLOATMATH_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace util {

	class FloatMath;
	class FloatMath
		: public object<FloatMath>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		explicit FloatMath(jobject jobj)
		: object<FloatMath>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static jfloat floor(jfloat);
		static jfloat ceil(jfloat);
		static jfloat sin(jfloat);
		static jfloat cos(jfloat);
		static jfloat sqrt(jfloat);
	}; //class FloatMath

} //namespace util
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_UTIL_FLOATMATH_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_UTIL_FLOATMATH_HPP_IMPL
#define J2CPP_ANDROID_UTIL_FLOATMATH_HPP_IMPL

namespace j2cpp {



android::util::FloatMath::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


jfloat android::util::FloatMath::floor(jfloat a0)
{
	return call_static_method<
		android::util::FloatMath::J2CPP_CLASS_NAME,
		android::util::FloatMath::J2CPP_METHOD_NAME(1),
		android::util::FloatMath::J2CPP_METHOD_SIGNATURE(1), 
		jfloat
	>(a0);
}

jfloat android::util::FloatMath::ceil(jfloat a0)
{
	return call_static_method<
		android::util::FloatMath::J2CPP_CLASS_NAME,
		android::util::FloatMath::J2CPP_METHOD_NAME(2),
		android::util::FloatMath::J2CPP_METHOD_SIGNATURE(2), 
		jfloat
	>(a0);
}

jfloat android::util::FloatMath::sin(jfloat a0)
{
	return call_static_method<
		android::util::FloatMath::J2CPP_CLASS_NAME,
		android::util::FloatMath::J2CPP_METHOD_NAME(3),
		android::util::FloatMath::J2CPP_METHOD_SIGNATURE(3), 
		jfloat
	>(a0);
}

jfloat android::util::FloatMath::cos(jfloat a0)
{
	return call_static_method<
		android::util::FloatMath::J2CPP_CLASS_NAME,
		android::util::FloatMath::J2CPP_METHOD_NAME(4),
		android::util::FloatMath::J2CPP_METHOD_SIGNATURE(4), 
		jfloat
	>(a0);
}

jfloat android::util::FloatMath::sqrt(jfloat a0)
{
	return call_static_method<
		android::util::FloatMath::J2CPP_CLASS_NAME,
		android::util::FloatMath::J2CPP_METHOD_NAME(5),
		android::util::FloatMath::J2CPP_METHOD_SIGNATURE(5), 
		jfloat
	>(a0);
}


J2CPP_DEFINE_CLASS(android::util::FloatMath,"android/util/FloatMath")
J2CPP_DEFINE_METHOD(android::util::FloatMath,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::util::FloatMath,1,"floor","(F)F")
J2CPP_DEFINE_METHOD(android::util::FloatMath,2,"ceil","(F)F")
J2CPP_DEFINE_METHOD(android::util::FloatMath,3,"sin","(F)F")
J2CPP_DEFINE_METHOD(android::util::FloatMath,4,"cos","(F)F")
J2CPP_DEFINE_METHOD(android::util::FloatMath,5,"sqrt","(F)F")

} //namespace j2cpp

#endif //J2CPP_ANDROID_UTIL_FLOATMATH_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

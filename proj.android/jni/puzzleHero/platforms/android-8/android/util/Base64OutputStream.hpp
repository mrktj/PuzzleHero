/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.util.Base64OutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_UTIL_BASE64OUTPUTSTREAM_HPP_DECL
#define J2CPP_ANDROID_UTIL_BASE64OUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class FilterOutputStream; } } }
namespace j2cpp { namespace java { namespace io { class Closeable; } } }
namespace j2cpp { namespace java { namespace io { class Flushable; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/Closeable.hpp>
#include <java/io/FilterOutputStream.hpp>
#include <java/io/Flushable.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace util {

	class Base64OutputStream;
	class Base64OutputStream
		: public object<Base64OutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		explicit Base64OutputStream(jobject jobj)
		: object<Base64OutputStream>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::FilterOutputStream>() const;
		operator local_ref<java::io::Closeable>() const;
		operator local_ref<java::io::Flushable>() const;
		operator local_ref<java::io::OutputStream>() const;


		Base64OutputStream(local_ref< java::io::OutputStream > const&, jint);
		void write(jint);
		void write(local_ref< array<jbyte,1> >  const&, jint, jint);
		void close();
	}; //class Base64OutputStream

} //namespace util
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_UTIL_BASE64OUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_UTIL_BASE64OUTPUTSTREAM_HPP_IMPL
#define J2CPP_ANDROID_UTIL_BASE64OUTPUTSTREAM_HPP_IMPL

namespace j2cpp {



android::util::Base64OutputStream::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

android::util::Base64OutputStream::operator local_ref<java::io::FilterOutputStream>() const
{
	return local_ref<java::io::FilterOutputStream>(get_jobject());
}

android::util::Base64OutputStream::operator local_ref<java::io::Closeable>() const
{
	return local_ref<java::io::Closeable>(get_jobject());
}

android::util::Base64OutputStream::operator local_ref<java::io::Flushable>() const
{
	return local_ref<java::io::Flushable>(get_jobject());
}

android::util::Base64OutputStream::operator local_ref<java::io::OutputStream>() const
{
	return local_ref<java::io::OutputStream>(get_jobject());
}


android::util::Base64OutputStream::Base64OutputStream(local_ref< java::io::OutputStream > const &a0, jint a1)
: object<android::util::Base64OutputStream>(
	call_new_object<
		android::util::Base64OutputStream::J2CPP_CLASS_NAME,
		android::util::Base64OutputStream::J2CPP_METHOD_NAME(0),
		android::util::Base64OutputStream::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1)
)
{
}


void android::util::Base64OutputStream::write(jint a0)
{
	return call_method<
		android::util::Base64OutputStream::J2CPP_CLASS_NAME,
		android::util::Base64OutputStream::J2CPP_METHOD_NAME(1),
		android::util::Base64OutputStream::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0);
}

void android::util::Base64OutputStream::write(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		android::util::Base64OutputStream::J2CPP_CLASS_NAME,
		android::util::Base64OutputStream::J2CPP_METHOD_NAME(2),
		android::util::Base64OutputStream::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0, a1, a2);
}

void android::util::Base64OutputStream::close()
{
	return call_method<
		android::util::Base64OutputStream::J2CPP_CLASS_NAME,
		android::util::Base64OutputStream::J2CPP_METHOD_NAME(3),
		android::util::Base64OutputStream::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(android::util::Base64OutputStream,"android/util/Base64OutputStream")
J2CPP_DEFINE_METHOD(android::util::Base64OutputStream,0,"<init>","(Ljava/io/OutputStream;I)V")
J2CPP_DEFINE_METHOD(android::util::Base64OutputStream,1,"write","(I)V")
J2CPP_DEFINE_METHOD(android::util::Base64OutputStream,2,"write","([BII)V")
J2CPP_DEFINE_METHOD(android::util::Base64OutputStream,3,"close","()V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_UTIL_BASE64OUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

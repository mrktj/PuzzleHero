/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.view.SurfaceHolder
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_VIEW_SURFACEHOLDER_HPP_DECL
#define J2CPP_ANDROID_VIEW_SURFACEHOLDER_HPP_DECL


namespace j2cpp { namespace android { namespace view { class Surface; } } }
namespace j2cpp { namespace android { namespace view { namespace SurfaceHolder_ { class Callback; } } } }
namespace j2cpp { namespace android { namespace graphics { class Canvas; } } }
namespace j2cpp { namespace android { namespace graphics { class Rect; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class RuntimeException; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Exception; } } }
namespace j2cpp { namespace java { namespace lang { class Throwable; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <android/graphics/Canvas.hpp>
#include <android/graphics/Rect.hpp>
#include <android/view/Surface.hpp>
#include <android/view/SurfaceHolder.hpp>
#include <java/io/Serializable.hpp>
#include <java/lang/Exception.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/RuntimeException.hpp>
#include <java/lang/String.hpp>
#include <java/lang/Throwable.hpp>


namespace j2cpp {

namespace android { namespace view {

	class SurfaceHolder;
	namespace SurfaceHolder_ {

		class BadSurfaceTypeException;
		class BadSurfaceTypeException
			: public object<BadSurfaceTypeException>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			explicit BadSurfaceTypeException(jobject jobj)
			: object<BadSurfaceTypeException>(jobj)
			{
			}

			operator local_ref<java::lang::RuntimeException>() const;
			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::lang::Exception>() const;
			operator local_ref<java::lang::Throwable>() const;
			operator local_ref<java::io::Serializable>() const;


			BadSurfaceTypeException();
			BadSurfaceTypeException(local_ref< java::lang::String > const&);
		}; //class BadSurfaceTypeException

		class Callback;
		class Callback
			: public object<Callback>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)

			explicit Callback(jobject jobj)
			: object<Callback>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			void surfaceCreated(local_ref< android::view::SurfaceHolder >  const&);
			void surfaceChanged(local_ref< android::view::SurfaceHolder >  const&, jint, jint, jint);
			void surfaceDestroyed(local_ref< android::view::SurfaceHolder >  const&);
		}; //class Callback

	} //namespace SurfaceHolder_

	class SurfaceHolder
		: public object<SurfaceHolder>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)

		typedef SurfaceHolder_::BadSurfaceTypeException BadSurfaceTypeException;
		typedef SurfaceHolder_::Callback Callback;

		explicit SurfaceHolder(jobject jobj)
		: object<SurfaceHolder>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		void addCallback(local_ref< android::view::SurfaceHolder_::Callback >  const&);
		void removeCallback(local_ref< android::view::SurfaceHolder_::Callback >  const&);
		jboolean isCreating();
		void setType(jint);
		void setFixedSize(jint, jint);
		void setSizeFromLayout();
		void setFormat(jint);
		void setKeepScreenOn(jboolean);
		local_ref< android::graphics::Canvas > lockCanvas();
		local_ref< android::graphics::Canvas > lockCanvas(local_ref< android::graphics::Rect >  const&);
		void unlockCanvasAndPost(local_ref< android::graphics::Canvas >  const&);
		local_ref< android::graphics::Rect > getSurfaceFrame();
		local_ref< android::view::Surface > getSurface();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > SURFACE_TYPE_NORMAL;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > SURFACE_TYPE_HARDWARE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > SURFACE_TYPE_GPU;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > SURFACE_TYPE_PUSH_BUFFERS;
	}; //class SurfaceHolder

} //namespace view
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_VIEW_SURFACEHOLDER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_VIEW_SURFACEHOLDER_HPP_IMPL
#define J2CPP_ANDROID_VIEW_SURFACEHOLDER_HPP_IMPL

namespace j2cpp {




android::view::SurfaceHolder_::BadSurfaceTypeException::operator local_ref<java::lang::RuntimeException>() const
{
	return local_ref<java::lang::RuntimeException>(get_jobject());
}

android::view::SurfaceHolder_::BadSurfaceTypeException::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

android::view::SurfaceHolder_::BadSurfaceTypeException::operator local_ref<java::lang::Exception>() const
{
	return local_ref<java::lang::Exception>(get_jobject());
}

android::view::SurfaceHolder_::BadSurfaceTypeException::operator local_ref<java::lang::Throwable>() const
{
	return local_ref<java::lang::Throwable>(get_jobject());
}

android::view::SurfaceHolder_::BadSurfaceTypeException::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


android::view::SurfaceHolder_::BadSurfaceTypeException::BadSurfaceTypeException()
: object<android::view::SurfaceHolder_::BadSurfaceTypeException>(
	call_new_object<
		android::view::SurfaceHolder_::BadSurfaceTypeException::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder_::BadSurfaceTypeException::J2CPP_METHOD_NAME(0),
		android::view::SurfaceHolder_::BadSurfaceTypeException::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}



android::view::SurfaceHolder_::BadSurfaceTypeException::BadSurfaceTypeException(local_ref< java::lang::String > const &a0)
: object<android::view::SurfaceHolder_::BadSurfaceTypeException>(
	call_new_object<
		android::view::SurfaceHolder_::BadSurfaceTypeException::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder_::BadSurfaceTypeException::J2CPP_METHOD_NAME(1),
		android::view::SurfaceHolder_::BadSurfaceTypeException::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}



J2CPP_DEFINE_CLASS(android::view::SurfaceHolder_::BadSurfaceTypeException,"android/view/SurfaceHolder$BadSurfaceTypeException")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder_::BadSurfaceTypeException,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder_::BadSurfaceTypeException,1,"<init>","(Ljava/lang/String;)V")


android::view::SurfaceHolder_::Callback::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

void android::view::SurfaceHolder_::Callback::surfaceCreated(local_ref< android::view::SurfaceHolder > const &a0)
{
	return call_method<
		android::view::SurfaceHolder_::Callback::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder_::Callback::J2CPP_METHOD_NAME(0),
		android::view::SurfaceHolder_::Callback::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0);
}

void android::view::SurfaceHolder_::Callback::surfaceChanged(local_ref< android::view::SurfaceHolder > const &a0, jint a1, jint a2, jint a3)
{
	return call_method<
		android::view::SurfaceHolder_::Callback::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder_::Callback::J2CPP_METHOD_NAME(1),
		android::view::SurfaceHolder_::Callback::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0, a1, a2, a3);
}

void android::view::SurfaceHolder_::Callback::surfaceDestroyed(local_ref< android::view::SurfaceHolder > const &a0)
{
	return call_method<
		android::view::SurfaceHolder_::Callback::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder_::Callback::J2CPP_METHOD_NAME(2),
		android::view::SurfaceHolder_::Callback::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(android::view::SurfaceHolder_::Callback,"android/view/SurfaceHolder$Callback")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder_::Callback,0,"surfaceCreated","(Landroid/view/SurfaceHolder;)V")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder_::Callback,1,"surfaceChanged","(Landroid/view/SurfaceHolder;III)V")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder_::Callback,2,"surfaceDestroyed","(Landroid/view/SurfaceHolder;)V")



android::view::SurfaceHolder::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

void android::view::SurfaceHolder::addCallback(local_ref< android::view::SurfaceHolder_::Callback > const &a0)
{
	return call_method<
		android::view::SurfaceHolder::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder::J2CPP_METHOD_NAME(0),
		android::view::SurfaceHolder::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0);
}

void android::view::SurfaceHolder::removeCallback(local_ref< android::view::SurfaceHolder_::Callback > const &a0)
{
	return call_method<
		android::view::SurfaceHolder::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder::J2CPP_METHOD_NAME(1),
		android::view::SurfaceHolder::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0);
}

jboolean android::view::SurfaceHolder::isCreating()
{
	return call_method<
		android::view::SurfaceHolder::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder::J2CPP_METHOD_NAME(2),
		android::view::SurfaceHolder::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(get_jobject());
}

void android::view::SurfaceHolder::setType(jint a0)
{
	return call_method<
		android::view::SurfaceHolder::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder::J2CPP_METHOD_NAME(3),
		android::view::SurfaceHolder::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0);
}

void android::view::SurfaceHolder::setFixedSize(jint a0, jint a1)
{
	return call_method<
		android::view::SurfaceHolder::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder::J2CPP_METHOD_NAME(4),
		android::view::SurfaceHolder::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0, a1);
}

void android::view::SurfaceHolder::setSizeFromLayout()
{
	return call_method<
		android::view::SurfaceHolder::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder::J2CPP_METHOD_NAME(5),
		android::view::SurfaceHolder::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject());
}

void android::view::SurfaceHolder::setFormat(jint a0)
{
	return call_method<
		android::view::SurfaceHolder::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder::J2CPP_METHOD_NAME(6),
		android::view::SurfaceHolder::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject(), a0);
}

void android::view::SurfaceHolder::setKeepScreenOn(jboolean a0)
{
	return call_method<
		android::view::SurfaceHolder::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder::J2CPP_METHOD_NAME(7),
		android::view::SurfaceHolder::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0);
}

local_ref< android::graphics::Canvas > android::view::SurfaceHolder::lockCanvas()
{
	return call_method<
		android::view::SurfaceHolder::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder::J2CPP_METHOD_NAME(8),
		android::view::SurfaceHolder::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< android::graphics::Canvas >
	>(get_jobject());
}

local_ref< android::graphics::Canvas > android::view::SurfaceHolder::lockCanvas(local_ref< android::graphics::Rect > const &a0)
{
	return call_method<
		android::view::SurfaceHolder::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder::J2CPP_METHOD_NAME(9),
		android::view::SurfaceHolder::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< android::graphics::Canvas >
	>(get_jobject(), a0);
}

void android::view::SurfaceHolder::unlockCanvasAndPost(local_ref< android::graphics::Canvas > const &a0)
{
	return call_method<
		android::view::SurfaceHolder::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder::J2CPP_METHOD_NAME(10),
		android::view::SurfaceHolder::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject(), a0);
}

local_ref< android::graphics::Rect > android::view::SurfaceHolder::getSurfaceFrame()
{
	return call_method<
		android::view::SurfaceHolder::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder::J2CPP_METHOD_NAME(11),
		android::view::SurfaceHolder::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< android::graphics::Rect >
	>(get_jobject());
}

local_ref< android::view::Surface > android::view::SurfaceHolder::getSurface()
{
	return call_method<
		android::view::SurfaceHolder::J2CPP_CLASS_NAME,
		android::view::SurfaceHolder::J2CPP_METHOD_NAME(12),
		android::view::SurfaceHolder::J2CPP_METHOD_SIGNATURE(12), 
		local_ref< android::view::Surface >
	>(get_jobject());
}


static_field<
	android::view::SurfaceHolder::J2CPP_CLASS_NAME,
	android::view::SurfaceHolder::J2CPP_FIELD_NAME(0),
	android::view::SurfaceHolder::J2CPP_FIELD_SIGNATURE(0),
	jint
> android::view::SurfaceHolder::SURFACE_TYPE_NORMAL;

static_field<
	android::view::SurfaceHolder::J2CPP_CLASS_NAME,
	android::view::SurfaceHolder::J2CPP_FIELD_NAME(1),
	android::view::SurfaceHolder::J2CPP_FIELD_SIGNATURE(1),
	jint
> android::view::SurfaceHolder::SURFACE_TYPE_HARDWARE;

static_field<
	android::view::SurfaceHolder::J2CPP_CLASS_NAME,
	android::view::SurfaceHolder::J2CPP_FIELD_NAME(2),
	android::view::SurfaceHolder::J2CPP_FIELD_SIGNATURE(2),
	jint
> android::view::SurfaceHolder::SURFACE_TYPE_GPU;

static_field<
	android::view::SurfaceHolder::J2CPP_CLASS_NAME,
	android::view::SurfaceHolder::J2CPP_FIELD_NAME(3),
	android::view::SurfaceHolder::J2CPP_FIELD_SIGNATURE(3),
	jint
> android::view::SurfaceHolder::SURFACE_TYPE_PUSH_BUFFERS;


J2CPP_DEFINE_CLASS(android::view::SurfaceHolder,"android/view/SurfaceHolder")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder,0,"addCallback","(Landroid/view/SurfaceHolder$Callback;)V")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder,1,"removeCallback","(Landroid/view/SurfaceHolder$Callback;)V")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder,2,"isCreating","()Z")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder,3,"setType","(I)V")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder,4,"setFixedSize","(II)V")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder,5,"setSizeFromLayout","()V")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder,6,"setFormat","(I)V")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder,7,"setKeepScreenOn","(Z)V")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder,8,"lockCanvas","()Landroid/graphics/Canvas;")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder,9,"lockCanvas","(Landroid/graphics/Rect;)Landroid/graphics/Canvas;")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder,10,"unlockCanvasAndPost","(Landroid/graphics/Canvas;)V")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder,11,"getSurfaceFrame","()Landroid/graphics/Rect;")
J2CPP_DEFINE_METHOD(android::view::SurfaceHolder,12,"getSurface","()Landroid/view/Surface;")
J2CPP_DEFINE_FIELD(android::view::SurfaceHolder,0,"SURFACE_TYPE_NORMAL","I")
J2CPP_DEFINE_FIELD(android::view::SurfaceHolder,1,"SURFACE_TYPE_HARDWARE","I")
J2CPP_DEFINE_FIELD(android::view::SurfaceHolder,2,"SURFACE_TYPE_GPU","I")
J2CPP_DEFINE_FIELD(android::view::SurfaceHolder,3,"SURFACE_TYPE_PUSH_BUFFERS","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_VIEW_SURFACEHOLDER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

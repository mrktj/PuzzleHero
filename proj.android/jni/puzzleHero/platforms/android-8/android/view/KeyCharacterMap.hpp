/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.view.KeyCharacterMap
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_VIEW_KEYCHARACTERMAP_HPP_DECL
#define J2CPP_ANDROID_VIEW_KEYCHARACTERMAP_HPP_DECL


namespace j2cpp { namespace android { namespace view { class KeyEvent; } } }
namespace j2cpp { namespace android { namespace view { namespace KeyCharacterMap_ { class KeyData; } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <android/view/KeyCharacterMap.hpp>
#include <android/view/KeyEvent.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace view {

	class KeyCharacterMap;
	namespace KeyCharacterMap_ {

		class KeyData;
		class KeyData
			: public object<KeyData>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)

			explicit KeyData(jobject jobj)
			: object<KeyData>(jobj)
			, displayLabel(jobj)
			, number(jobj)
			, meta(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			KeyData();

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > META_LENGTH;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jchar > displayLabel;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jchar > number;
			field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), local_ref< array<jchar,1> > > meta;
		}; //class KeyData

	} //namespace KeyCharacterMap_

	class KeyCharacterMap
		: public object<KeyCharacterMap>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)

		typedef KeyCharacterMap_::KeyData KeyData;

		explicit KeyCharacterMap(jobject jobj)
		: object<KeyCharacterMap>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static local_ref< android::view::KeyCharacterMap > load(jint);
		jint get(jint, jint);
		jchar getNumber(jint);
		jchar getMatch(jint, local_ref< array<jchar,1> >  const&);
		jchar getMatch(jint, local_ref< array<jchar,1> >  const&, jint);
		jchar getDisplayLabel(jint);
		static jint getDeadChar(jint, jint);
		jboolean getKeyData(jint, local_ref< android::view::KeyCharacterMap_::KeyData >  const&);
		local_ref< array< local_ref< android::view::KeyEvent >, 1> > getEvents(local_ref< array<jchar,1> >  const&);
		jboolean isPrintingKey(jint);
		jint getKeyboardType();
		static jboolean deviceHasKey(jint);
		static local_ref< array<jboolean,1> > deviceHasKeys(local_ref< array<jint,1> >  const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > BUILT_IN_KEYBOARD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > NUMERIC;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > PREDICTIVE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > ALPHA;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), jchar > HEX_INPUT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), jchar > PICKER_DIALOG_INPUT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), jint > COMBINING_ACCENT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), jint > COMBINING_ACCENT_MASK;
	}; //class KeyCharacterMap

} //namespace view
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_VIEW_KEYCHARACTERMAP_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_VIEW_KEYCHARACTERMAP_HPP_IMPL
#define J2CPP_ANDROID_VIEW_KEYCHARACTERMAP_HPP_IMPL

namespace j2cpp {




android::view::KeyCharacterMap_::KeyData::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


android::view::KeyCharacterMap_::KeyData::KeyData()
: object<android::view::KeyCharacterMap_::KeyData>(
	call_new_object<
		android::view::KeyCharacterMap_::KeyData::J2CPP_CLASS_NAME,
		android::view::KeyCharacterMap_::KeyData::J2CPP_METHOD_NAME(0),
		android::view::KeyCharacterMap_::KeyData::J2CPP_METHOD_SIGNATURE(0)
	>()
)
, displayLabel(get_jobject())
, number(get_jobject())
, meta(get_jobject())
{
}



static_field<
	android::view::KeyCharacterMap_::KeyData::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap_::KeyData::J2CPP_FIELD_NAME(0),
	android::view::KeyCharacterMap_::KeyData::J2CPP_FIELD_SIGNATURE(0),
	jint
> android::view::KeyCharacterMap_::KeyData::META_LENGTH;


J2CPP_DEFINE_CLASS(android::view::KeyCharacterMap_::KeyData,"android/view/KeyCharacterMap$KeyData")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap_::KeyData,0,"<init>","()V")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap_::KeyData,0,"META_LENGTH","I")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap_::KeyData,1,"displayLabel","C")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap_::KeyData,2,"number","C")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap_::KeyData,3,"meta","[C")



android::view::KeyCharacterMap::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


local_ref< android::view::KeyCharacterMap > android::view::KeyCharacterMap::load(jint a0)
{
	return call_static_method<
		android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
		android::view::KeyCharacterMap::J2CPP_METHOD_NAME(1),
		android::view::KeyCharacterMap::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< android::view::KeyCharacterMap >
	>(a0);
}

jint android::view::KeyCharacterMap::get(jint a0, jint a1)
{
	return call_method<
		android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
		android::view::KeyCharacterMap::J2CPP_METHOD_NAME(2),
		android::view::KeyCharacterMap::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(get_jobject(), a0, a1);
}

jchar android::view::KeyCharacterMap::getNumber(jint a0)
{
	return call_method<
		android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
		android::view::KeyCharacterMap::J2CPP_METHOD_NAME(3),
		android::view::KeyCharacterMap::J2CPP_METHOD_SIGNATURE(3), 
		jchar
	>(get_jobject(), a0);
}

jchar android::view::KeyCharacterMap::getMatch(jint a0, local_ref< array<jchar,1> > const &a1)
{
	return call_method<
		android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
		android::view::KeyCharacterMap::J2CPP_METHOD_NAME(4),
		android::view::KeyCharacterMap::J2CPP_METHOD_SIGNATURE(4), 
		jchar
	>(get_jobject(), a0, a1);
}

jchar android::view::KeyCharacterMap::getMatch(jint a0, local_ref< array<jchar,1> > const &a1, jint a2)
{
	return call_method<
		android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
		android::view::KeyCharacterMap::J2CPP_METHOD_NAME(5),
		android::view::KeyCharacterMap::J2CPP_METHOD_SIGNATURE(5), 
		jchar
	>(get_jobject(), a0, a1, a2);
}

jchar android::view::KeyCharacterMap::getDisplayLabel(jint a0)
{
	return call_method<
		android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
		android::view::KeyCharacterMap::J2CPP_METHOD_NAME(6),
		android::view::KeyCharacterMap::J2CPP_METHOD_SIGNATURE(6), 
		jchar
	>(get_jobject(), a0);
}

jint android::view::KeyCharacterMap::getDeadChar(jint a0, jint a1)
{
	return call_static_method<
		android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
		android::view::KeyCharacterMap::J2CPP_METHOD_NAME(7),
		android::view::KeyCharacterMap::J2CPP_METHOD_SIGNATURE(7), 
		jint
	>(a0, a1);
}

jboolean android::view::KeyCharacterMap::getKeyData(jint a0, local_ref< android::view::KeyCharacterMap_::KeyData > const &a1)
{
	return call_method<
		android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
		android::view::KeyCharacterMap::J2CPP_METHOD_NAME(8),
		android::view::KeyCharacterMap::J2CPP_METHOD_SIGNATURE(8), 
		jboolean
	>(get_jobject(), a0, a1);
}

local_ref< array< local_ref< android::view::KeyEvent >, 1> > android::view::KeyCharacterMap::getEvents(local_ref< array<jchar,1> > const &a0)
{
	return call_method<
		android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
		android::view::KeyCharacterMap::J2CPP_METHOD_NAME(9),
		android::view::KeyCharacterMap::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< array< local_ref< android::view::KeyEvent >, 1> >
	>(get_jobject(), a0);
}

jboolean android::view::KeyCharacterMap::isPrintingKey(jint a0)
{
	return call_method<
		android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
		android::view::KeyCharacterMap::J2CPP_METHOD_NAME(10),
		android::view::KeyCharacterMap::J2CPP_METHOD_SIGNATURE(10), 
		jboolean
	>(get_jobject(), a0);
}


jint android::view::KeyCharacterMap::getKeyboardType()
{
	return call_method<
		android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
		android::view::KeyCharacterMap::J2CPP_METHOD_NAME(12),
		android::view::KeyCharacterMap::J2CPP_METHOD_SIGNATURE(12), 
		jint
	>(get_jobject());
}

jboolean android::view::KeyCharacterMap::deviceHasKey(jint a0)
{
	return call_static_method<
		android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
		android::view::KeyCharacterMap::J2CPP_METHOD_NAME(13),
		android::view::KeyCharacterMap::J2CPP_METHOD_SIGNATURE(13), 
		jboolean
	>(a0);
}

local_ref< array<jboolean,1> > android::view::KeyCharacterMap::deviceHasKeys(local_ref< array<jint,1> > const &a0)
{
	return call_static_method<
		android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
		android::view::KeyCharacterMap::J2CPP_METHOD_NAME(14),
		android::view::KeyCharacterMap::J2CPP_METHOD_SIGNATURE(14), 
		local_ref< array<jboolean,1> >
	>(a0);
}


static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(0),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(0),
	jint
> android::view::KeyCharacterMap::BUILT_IN_KEYBOARD;

static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(1),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(1),
	jint
> android::view::KeyCharacterMap::NUMERIC;

static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(2),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(2),
	jint
> android::view::KeyCharacterMap::PREDICTIVE;

static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(3),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(3),
	jint
> android::view::KeyCharacterMap::ALPHA;

static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(4),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(4),
	jchar
> android::view::KeyCharacterMap::HEX_INPUT;

static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(5),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(5),
	jchar
> android::view::KeyCharacterMap::PICKER_DIALOG_INPUT;

static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(6),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(6),
	jint
> android::view::KeyCharacterMap::COMBINING_ACCENT;

static_field<
	android::view::KeyCharacterMap::J2CPP_CLASS_NAME,
	android::view::KeyCharacterMap::J2CPP_FIELD_NAME(7),
	android::view::KeyCharacterMap::J2CPP_FIELD_SIGNATURE(7),
	jint
> android::view::KeyCharacterMap::COMBINING_ACCENT_MASK;


J2CPP_DEFINE_CLASS(android::view::KeyCharacterMap,"android/view/KeyCharacterMap")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,1,"load","(I)Landroid/view/KeyCharacterMap;")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,2,"get","(II)I")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,3,"getNumber","(I)C")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,4,"getMatch","(I[C)C")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,5,"getMatch","(I[CI)C")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,6,"getDisplayLabel","(I)C")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,7,"getDeadChar","(II)I")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,8,"getKeyData","(ILandroid/view/KeyCharacterMap$KeyData;)Z")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,9,"getEvents","([C)[android.view.KeyEvent")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,10,"isPrintingKey","(I)Z")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,11,"finalize","()V")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,12,"getKeyboardType","()I")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,13,"deviceHasKey","(I)Z")
J2CPP_DEFINE_METHOD(android::view::KeyCharacterMap,14,"deviceHasKeys","([I)[Z")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,0,"BUILT_IN_KEYBOARD","I")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,1,"NUMERIC","I")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,2,"PREDICTIVE","I")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,3,"ALPHA","I")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,4,"HEX_INPUT","C")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,5,"PICKER_DIALOG_INPUT","C")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,6,"COMBINING_ACCENT","I")
J2CPP_DEFINE_FIELD(android::view::KeyCharacterMap,7,"COMBINING_ACCENT_MASK","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_VIEW_KEYCHARACTERMAP_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

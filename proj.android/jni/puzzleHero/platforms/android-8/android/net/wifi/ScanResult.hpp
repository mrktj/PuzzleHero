/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.net.wifi.ScanResult
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_NET_WIFI_SCANRESULT_HPP_DECL
#define J2CPP_ANDROID_NET_WIFI_SCANRESULT_HPP_DECL


namespace j2cpp { namespace android { namespace os { class Parcelable; } } }
namespace j2cpp { namespace android { namespace os { class Parcel; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <android/os/Parcel.hpp>
#include <android/os/Parcelable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace net { namespace wifi {

	class ScanResult;
	class ScanResult
		: public object<ScanResult>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)

		explicit ScanResult(jobject jobj)
		: object<ScanResult>(jobj)
		, SSID(jobj)
		, BSSID(jobj)
		, capabilities(jobj)
		, level(jobj)
		, frequency(jobj)
		{
		}

		operator local_ref<android::os::Parcelable>() const;
		operator local_ref<java::lang::Object>() const;


		local_ref< java::lang::String > toString();
		jint describeContents();
		void writeToParcel(local_ref< android::os::Parcel >  const&, jint);

		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::lang::String > > SSID;
		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::lang::String > > BSSID;
		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< java::lang::String > > capabilities;
		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > level;
		field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), jint > frequency;
	}; //class ScanResult

} //namespace wifi
} //namespace net
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_NET_WIFI_SCANRESULT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_NET_WIFI_SCANRESULT_HPP_IMPL
#define J2CPP_ANDROID_NET_WIFI_SCANRESULT_HPP_IMPL

namespace j2cpp {



android::net::wifi::ScanResult::operator local_ref<android::os::Parcelable>() const
{
	return local_ref<android::os::Parcelable>(get_jobject());
}

android::net::wifi::ScanResult::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


local_ref< java::lang::String > android::net::wifi::ScanResult::toString()
{
	return call_method<
		android::net::wifi::ScanResult::J2CPP_CLASS_NAME,
		android::net::wifi::ScanResult::J2CPP_METHOD_NAME(1),
		android::net::wifi::ScanResult::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint android::net::wifi::ScanResult::describeContents()
{
	return call_method<
		android::net::wifi::ScanResult::J2CPP_CLASS_NAME,
		android::net::wifi::ScanResult::J2CPP_METHOD_NAME(2),
		android::net::wifi::ScanResult::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(get_jobject());
}

void android::net::wifi::ScanResult::writeToParcel(local_ref< android::os::Parcel > const &a0, jint a1)
{
	return call_method<
		android::net::wifi::ScanResult::J2CPP_CLASS_NAME,
		android::net::wifi::ScanResult::J2CPP_METHOD_NAME(3),
		android::net::wifi::ScanResult::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0, a1);
}



J2CPP_DEFINE_CLASS(android::net::wifi::ScanResult,"android/net/wifi/ScanResult")
J2CPP_DEFINE_METHOD(android::net::wifi::ScanResult,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::net::wifi::ScanResult,1,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::net::wifi::ScanResult,2,"describeContents","()I")
J2CPP_DEFINE_METHOD(android::net::wifi::ScanResult,3,"writeToParcel","(Landroid/os/Parcel;I)V")
J2CPP_DEFINE_FIELD(android::net::wifi::ScanResult,0,"SSID","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(android::net::wifi::ScanResult,1,"BSSID","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(android::net::wifi::ScanResult,2,"capabilities","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(android::net::wifi::ScanResult,3,"level","I")
J2CPP_DEFINE_FIELD(android::net::wifi::ScanResult,4,"frequency","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_NET_WIFI_SCANRESULT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.net.wifi.WifiInfo
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_NET_WIFI_WIFIINFO_HPP_DECL
#define J2CPP_ANDROID_NET_WIFI_WIFIINFO_HPP_DECL


namespace j2cpp { namespace android { namespace os { class Parcelable; } } }
namespace j2cpp { namespace android { namespace os { class Parcel; } } }
namespace j2cpp { namespace android { namespace net { namespace NetworkInfo_ { class DetailedState; } } } }
namespace j2cpp { namespace android { namespace net { namespace wifi { class SupplicantState; } } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <android/net/NetworkInfo.hpp>
#include <android/net/wifi/SupplicantState.hpp>
#include <android/os/Parcel.hpp>
#include <android/os/Parcelable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace net { namespace wifi {

	class WifiInfo;
	class WifiInfo
		: public object<WifiInfo>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_FIELD(0)

		explicit WifiInfo(jobject jobj)
		: object<WifiInfo>(jobj)
		{
		}

		operator local_ref<android::os::Parcelable>() const;
		operator local_ref<java::lang::Object>() const;


		local_ref< java::lang::String > getSSID();
		local_ref< java::lang::String > getBSSID();
		jint getRssi();
		jint getLinkSpeed();
		local_ref< java::lang::String > getMacAddress();
		jint getNetworkId();
		local_ref< android::net::wifi::SupplicantState > getSupplicantState();
		jint getIpAddress();
		jboolean getHiddenSSID();
		static local_ref< android::net::NetworkInfo_::DetailedState > getDetailedStateOf(local_ref< android::net::wifi::SupplicantState >  const&);
		local_ref< java::lang::String > toString();
		jint describeContents();
		void writeToParcel(local_ref< android::os::Parcel >  const&, jint);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::lang::String > > LINK_SPEED_UNITS;
	}; //class WifiInfo

} //namespace wifi
} //namespace net
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_NET_WIFI_WIFIINFO_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_NET_WIFI_WIFIINFO_HPP_IMPL
#define J2CPP_ANDROID_NET_WIFI_WIFIINFO_HPP_IMPL

namespace j2cpp {



android::net::wifi::WifiInfo::operator local_ref<android::os::Parcelable>() const
{
	return local_ref<android::os::Parcelable>(get_jobject());
}

android::net::wifi::WifiInfo::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


local_ref< java::lang::String > android::net::wifi::WifiInfo::getSSID()
{
	return call_method<
		android::net::wifi::WifiInfo::J2CPP_CLASS_NAME,
		android::net::wifi::WifiInfo::J2CPP_METHOD_NAME(1),
		android::net::wifi::WifiInfo::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > android::net::wifi::WifiInfo::getBSSID()
{
	return call_method<
		android::net::wifi::WifiInfo::J2CPP_CLASS_NAME,
		android::net::wifi::WifiInfo::J2CPP_METHOD_NAME(2),
		android::net::wifi::WifiInfo::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint android::net::wifi::WifiInfo::getRssi()
{
	return call_method<
		android::net::wifi::WifiInfo::J2CPP_CLASS_NAME,
		android::net::wifi::WifiInfo::J2CPP_METHOD_NAME(3),
		android::net::wifi::WifiInfo::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(get_jobject());
}

jint android::net::wifi::WifiInfo::getLinkSpeed()
{
	return call_method<
		android::net::wifi::WifiInfo::J2CPP_CLASS_NAME,
		android::net::wifi::WifiInfo::J2CPP_METHOD_NAME(4),
		android::net::wifi::WifiInfo::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject());
}

local_ref< java::lang::String > android::net::wifi::WifiInfo::getMacAddress()
{
	return call_method<
		android::net::wifi::WifiInfo::J2CPP_CLASS_NAME,
		android::net::wifi::WifiInfo::J2CPP_METHOD_NAME(5),
		android::net::wifi::WifiInfo::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint android::net::wifi::WifiInfo::getNetworkId()
{
	return call_method<
		android::net::wifi::WifiInfo::J2CPP_CLASS_NAME,
		android::net::wifi::WifiInfo::J2CPP_METHOD_NAME(6),
		android::net::wifi::WifiInfo::J2CPP_METHOD_SIGNATURE(6), 
		jint
	>(get_jobject());
}

local_ref< android::net::wifi::SupplicantState > android::net::wifi::WifiInfo::getSupplicantState()
{
	return call_method<
		android::net::wifi::WifiInfo::J2CPP_CLASS_NAME,
		android::net::wifi::WifiInfo::J2CPP_METHOD_NAME(7),
		android::net::wifi::WifiInfo::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< android::net::wifi::SupplicantState >
	>(get_jobject());
}

jint android::net::wifi::WifiInfo::getIpAddress()
{
	return call_method<
		android::net::wifi::WifiInfo::J2CPP_CLASS_NAME,
		android::net::wifi::WifiInfo::J2CPP_METHOD_NAME(8),
		android::net::wifi::WifiInfo::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}

jboolean android::net::wifi::WifiInfo::getHiddenSSID()
{
	return call_method<
		android::net::wifi::WifiInfo::J2CPP_CLASS_NAME,
		android::net::wifi::WifiInfo::J2CPP_METHOD_NAME(9),
		android::net::wifi::WifiInfo::J2CPP_METHOD_SIGNATURE(9), 
		jboolean
	>(get_jobject());
}

local_ref< android::net::NetworkInfo_::DetailedState > android::net::wifi::WifiInfo::getDetailedStateOf(local_ref< android::net::wifi::SupplicantState > const &a0)
{
	return call_static_method<
		android::net::wifi::WifiInfo::J2CPP_CLASS_NAME,
		android::net::wifi::WifiInfo::J2CPP_METHOD_NAME(10),
		android::net::wifi::WifiInfo::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< android::net::NetworkInfo_::DetailedState >
	>(a0);
}

local_ref< java::lang::String > android::net::wifi::WifiInfo::toString()
{
	return call_method<
		android::net::wifi::WifiInfo::J2CPP_CLASS_NAME,
		android::net::wifi::WifiInfo::J2CPP_METHOD_NAME(11),
		android::net::wifi::WifiInfo::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint android::net::wifi::WifiInfo::describeContents()
{
	return call_method<
		android::net::wifi::WifiInfo::J2CPP_CLASS_NAME,
		android::net::wifi::WifiInfo::J2CPP_METHOD_NAME(12),
		android::net::wifi::WifiInfo::J2CPP_METHOD_SIGNATURE(12), 
		jint
	>(get_jobject());
}

void android::net::wifi::WifiInfo::writeToParcel(local_ref< android::os::Parcel > const &a0, jint a1)
{
	return call_method<
		android::net::wifi::WifiInfo::J2CPP_CLASS_NAME,
		android::net::wifi::WifiInfo::J2CPP_METHOD_NAME(13),
		android::net::wifi::WifiInfo::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject(), a0, a1);
}


static_field<
	android::net::wifi::WifiInfo::J2CPP_CLASS_NAME,
	android::net::wifi::WifiInfo::J2CPP_FIELD_NAME(0),
	android::net::wifi::WifiInfo::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::lang::String >
> android::net::wifi::WifiInfo::LINK_SPEED_UNITS;


J2CPP_DEFINE_CLASS(android::net::wifi::WifiInfo,"android/net/wifi/WifiInfo")
J2CPP_DEFINE_METHOD(android::net::wifi::WifiInfo,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::net::wifi::WifiInfo,1,"getSSID","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::net::wifi::WifiInfo,2,"getBSSID","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::net::wifi::WifiInfo,3,"getRssi","()I")
J2CPP_DEFINE_METHOD(android::net::wifi::WifiInfo,4,"getLinkSpeed","()I")
J2CPP_DEFINE_METHOD(android::net::wifi::WifiInfo,5,"getMacAddress","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::net::wifi::WifiInfo,6,"getNetworkId","()I")
J2CPP_DEFINE_METHOD(android::net::wifi::WifiInfo,7,"getSupplicantState","()Landroid/net/wifi/SupplicantState;")
J2CPP_DEFINE_METHOD(android::net::wifi::WifiInfo,8,"getIpAddress","()I")
J2CPP_DEFINE_METHOD(android::net::wifi::WifiInfo,9,"getHiddenSSID","()Z")
J2CPP_DEFINE_METHOD(android::net::wifi::WifiInfo,10,"getDetailedStateOf","(Landroid/net/wifi/SupplicantState;)Landroid/net/NetworkInfo$DetailedState;")
J2CPP_DEFINE_METHOD(android::net::wifi::WifiInfo,11,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::net::wifi::WifiInfo,12,"describeContents","()I")
J2CPP_DEFINE_METHOD(android::net::wifi::WifiInfo,13,"writeToParcel","(Landroid/os/Parcel;I)V")
J2CPP_DEFINE_FIELD(android::net::wifi::WifiInfo,0,"LINK_SPEED_UNITS","Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_NET_WIFI_WIFIINFO_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

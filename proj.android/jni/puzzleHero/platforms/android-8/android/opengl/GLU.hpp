/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.opengl.GLU
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OPENGL_GLU_HPP_DECL
#define J2CPP_ANDROID_OPENGL_GLU_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace javax { namespace microedition { namespace khronos { namespace opengles { class GL10; } } } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <javax/microedition/khronos/opengles/GL10.hpp>


namespace j2cpp {

namespace android { namespace opengl {

	class GLU;
	class GLU
		: public object<GLU>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		explicit GLU(jobject jobj)
		: object<GLU>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		GLU();
		static local_ref< java::lang::String > gluErrorString(jint);
		static void gluLookAt(local_ref< javax::microedition::khronos::opengles::GL10 >  const&, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
		static void gluOrtho2D(local_ref< javax::microedition::khronos::opengles::GL10 >  const&, jfloat, jfloat, jfloat, jfloat);
		static void gluPerspective(local_ref< javax::microedition::khronos::opengles::GL10 >  const&, jfloat, jfloat, jfloat, jfloat);
		static jint gluProject(jfloat, jfloat, jfloat, local_ref< array<jfloat,1> >  const&, jint, local_ref< array<jfloat,1> >  const&, jint, local_ref< array<jint,1> >  const&, jint, local_ref< array<jfloat,1> >  const&, jint);
		static jint gluUnProject(jfloat, jfloat, jfloat, local_ref< array<jfloat,1> >  const&, jint, local_ref< array<jfloat,1> >  const&, jint, local_ref< array<jint,1> >  const&, jint, local_ref< array<jfloat,1> >  const&, jint);
	}; //class GLU

} //namespace opengl
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_OPENGL_GLU_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OPENGL_GLU_HPP_IMPL
#define J2CPP_ANDROID_OPENGL_GLU_HPP_IMPL

namespace j2cpp {



android::opengl::GLU::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


android::opengl::GLU::GLU()
: object<android::opengl::GLU>(
	call_new_object<
		android::opengl::GLU::J2CPP_CLASS_NAME,
		android::opengl::GLU::J2CPP_METHOD_NAME(0),
		android::opengl::GLU::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


local_ref< java::lang::String > android::opengl::GLU::gluErrorString(jint a0)
{
	return call_static_method<
		android::opengl::GLU::J2CPP_CLASS_NAME,
		android::opengl::GLU::J2CPP_METHOD_NAME(1),
		android::opengl::GLU::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::String >
	>(a0);
}

void android::opengl::GLU::gluLookAt(local_ref< javax::microedition::khronos::opengles::GL10 > const &a0, jfloat a1, jfloat a2, jfloat a3, jfloat a4, jfloat a5, jfloat a6, jfloat a7, jfloat a8, jfloat a9)
{
	return call_static_method<
		android::opengl::GLU::J2CPP_CLASS_NAME,
		android::opengl::GLU::J2CPP_METHOD_NAME(2),
		android::opengl::GLU::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void android::opengl::GLU::gluOrtho2D(local_ref< javax::microedition::khronos::opengles::GL10 > const &a0, jfloat a1, jfloat a2, jfloat a3, jfloat a4)
{
	return call_static_method<
		android::opengl::GLU::J2CPP_CLASS_NAME,
		android::opengl::GLU::J2CPP_METHOD_NAME(3),
		android::opengl::GLU::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(a0, a1, a2, a3, a4);
}

void android::opengl::GLU::gluPerspective(local_ref< javax::microedition::khronos::opengles::GL10 > const &a0, jfloat a1, jfloat a2, jfloat a3, jfloat a4)
{
	return call_static_method<
		android::opengl::GLU::J2CPP_CLASS_NAME,
		android::opengl::GLU::J2CPP_METHOD_NAME(4),
		android::opengl::GLU::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(a0, a1, a2, a3, a4);
}

jint android::opengl::GLU::gluProject(jfloat a0, jfloat a1, jfloat a2, local_ref< array<jfloat,1> > const &a3, jint a4, local_ref< array<jfloat,1> > const &a5, jint a6, local_ref< array<jint,1> > const &a7, jint a8, local_ref< array<jfloat,1> > const &a9, jint a10)
{
	return call_static_method<
		android::opengl::GLU::J2CPP_CLASS_NAME,
		android::opengl::GLU::J2CPP_METHOD_NAME(5),
		android::opengl::GLU::J2CPP_METHOD_SIGNATURE(5), 
		jint
	>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

jint android::opengl::GLU::gluUnProject(jfloat a0, jfloat a1, jfloat a2, local_ref< array<jfloat,1> > const &a3, jint a4, local_ref< array<jfloat,1> > const &a5, jint a6, local_ref< array<jint,1> > const &a7, jint a8, local_ref< array<jfloat,1> > const &a9, jint a10)
{
	return call_static_method<
		android::opengl::GLU::J2CPP_CLASS_NAME,
		android::opengl::GLU::J2CPP_METHOD_NAME(6),
		android::opengl::GLU::J2CPP_METHOD_SIGNATURE(6), 
		jint
	>(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}


J2CPP_DEFINE_CLASS(android::opengl::GLU,"android/opengl/GLU")
J2CPP_DEFINE_METHOD(android::opengl::GLU,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::opengl::GLU,1,"gluErrorString","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::opengl::GLU,2,"gluLookAt","(Ljavax/microedition/khronos/opengles/GL10;FFFFFFFFF)V")
J2CPP_DEFINE_METHOD(android::opengl::GLU,3,"gluOrtho2D","(Ljavax/microedition/khronos/opengles/GL10;FFFF)V")
J2CPP_DEFINE_METHOD(android::opengl::GLU,4,"gluPerspective","(Ljavax/microedition/khronos/opengles/GL10;FFFF)V")
J2CPP_DEFINE_METHOD(android::opengl::GLU,5,"gluProject","(FFF[FI[FI[II[FI)I")
J2CPP_DEFINE_METHOD(android::opengl::GLU,6,"gluUnProject","(FFF[FI[FI[II[FI)I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_OPENGL_GLU_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

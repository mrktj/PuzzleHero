/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.text.format.Formatter
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_FORMAT_FORMATTER_HPP_DECL
#define J2CPP_ANDROID_TEXT_FORMAT_FORMATTER_HPP_DECL


namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <android/content/Context.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace text { namespace format {

	class Formatter;
	class Formatter
		: public object<Formatter>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		explicit Formatter(jobject jobj)
		: object<Formatter>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		Formatter();
		static local_ref< java::lang::String > formatFileSize(local_ref< android::content::Context >  const&, jlong);
		static local_ref< java::lang::String > formatShortFileSize(local_ref< android::content::Context >  const&, jlong);
		static local_ref< java::lang::String > formatIpAddress(jint);
	}; //class Formatter

} //namespace format
} //namespace text
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_FORMAT_FORMATTER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_FORMAT_FORMATTER_HPP_IMPL
#define J2CPP_ANDROID_TEXT_FORMAT_FORMATTER_HPP_IMPL

namespace j2cpp {



android::text::format::Formatter::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


android::text::format::Formatter::Formatter()
: object<android::text::format::Formatter>(
	call_new_object<
		android::text::format::Formatter::J2CPP_CLASS_NAME,
		android::text::format::Formatter::J2CPP_METHOD_NAME(0),
		android::text::format::Formatter::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


local_ref< java::lang::String > android::text::format::Formatter::formatFileSize(local_ref< android::content::Context > const &a0, jlong a1)
{
	return call_static_method<
		android::text::format::Formatter::J2CPP_CLASS_NAME,
		android::text::format::Formatter::J2CPP_METHOD_NAME(1),
		android::text::format::Formatter::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::String >
	>(a0, a1);
}

local_ref< java::lang::String > android::text::format::Formatter::formatShortFileSize(local_ref< android::content::Context > const &a0, jlong a1)
{
	return call_static_method<
		android::text::format::Formatter::J2CPP_CLASS_NAME,
		android::text::format::Formatter::J2CPP_METHOD_NAME(2),
		android::text::format::Formatter::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::lang::String >
	>(a0, a1);
}

local_ref< java::lang::String > android::text::format::Formatter::formatIpAddress(jint a0)
{
	return call_static_method<
		android::text::format::Formatter::J2CPP_CLASS_NAME,
		android::text::format::Formatter::J2CPP_METHOD_NAME(3),
		android::text::format::Formatter::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::String >
	>(a0);
}


J2CPP_DEFINE_CLASS(android::text::format::Formatter,"android/text/format/Formatter")
J2CPP_DEFINE_METHOD(android::text::format::Formatter,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::text::format::Formatter,1,"formatFileSize","(Landroid/content/Context;J)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::text::format::Formatter,2,"formatShortFileSize","(Landroid/content/Context;J)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::text::format::Formatter,3,"formatIpAddress","(I)Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_FORMAT_FORMATTER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

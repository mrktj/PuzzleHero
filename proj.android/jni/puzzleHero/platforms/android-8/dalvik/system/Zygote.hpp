/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: dalvik.system.Zygote
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_ZYGOTE_HPP_DECL
#define J2CPP_DALVIK_SYSTEM_ZYGOTE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace dalvik { namespace system {

	class Zygote;
	class Zygote
		: public object<Zygote>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)

		explicit Zygote(jobject jobj)
		: object<Zygote>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static jint fork();
		static jint forkAndSpecialize(jint, jint, local_ref< array<jint,1> >  const&, jint, local_ref< array<jint,2> >  const&);
		static jint forkAndSpecialize(jint, jint, local_ref< array<jint,1> >  const&, jboolean, local_ref< array<jint,2> >  const&);
		static jint forkSystemServer(jint, jint, local_ref< array<jint,1> >  const&, jint, local_ref< array<jint,2> >  const&);
		static jint forkSystemServer(jint, jint, local_ref< array<jint,1> >  const&, jboolean, local_ref< array<jint,2> >  const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > DEBUG_ENABLE_DEBUGGER;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > DEBUG_ENABLE_CHECKJNI;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > DEBUG_ENABLE_ASSERT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > DEBUG_ENABLE_SAFEMODE;
	}; //class Zygote

} //namespace system
} //namespace dalvik

} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_ZYGOTE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_ZYGOTE_HPP_IMPL
#define J2CPP_DALVIK_SYSTEM_ZYGOTE_HPP_IMPL

namespace j2cpp {



dalvik::system::Zygote::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


jint dalvik::system::Zygote::fork()
{
	return call_static_method<
		dalvik::system::Zygote::J2CPP_CLASS_NAME,
		dalvik::system::Zygote::J2CPP_METHOD_NAME(1),
		dalvik::system::Zygote::J2CPP_METHOD_SIGNATURE(1), 
		jint
	>();
}

jint dalvik::system::Zygote::forkAndSpecialize(jint a0, jint a1, local_ref< array<jint,1> > const &a2, jint a3, local_ref< array<jint,2> > const &a4)
{
	return call_static_method<
		dalvik::system::Zygote::J2CPP_CLASS_NAME,
		dalvik::system::Zygote::J2CPP_METHOD_NAME(2),
		dalvik::system::Zygote::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(a0, a1, a2, a3, a4);
}

jint dalvik::system::Zygote::forkAndSpecialize(jint a0, jint a1, local_ref< array<jint,1> > const &a2, jboolean a3, local_ref< array<jint,2> > const &a4)
{
	return call_static_method<
		dalvik::system::Zygote::J2CPP_CLASS_NAME,
		dalvik::system::Zygote::J2CPP_METHOD_NAME(3),
		dalvik::system::Zygote::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(a0, a1, a2, a3, a4);
}

jint dalvik::system::Zygote::forkSystemServer(jint a0, jint a1, local_ref< array<jint,1> > const &a2, jint a3, local_ref< array<jint,2> > const &a4)
{
	return call_static_method<
		dalvik::system::Zygote::J2CPP_CLASS_NAME,
		dalvik::system::Zygote::J2CPP_METHOD_NAME(4),
		dalvik::system::Zygote::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(a0, a1, a2, a3, a4);
}

jint dalvik::system::Zygote::forkSystemServer(jint a0, jint a1, local_ref< array<jint,1> > const &a2, jboolean a3, local_ref< array<jint,2> > const &a4)
{
	return call_static_method<
		dalvik::system::Zygote::J2CPP_CLASS_NAME,
		dalvik::system::Zygote::J2CPP_METHOD_NAME(5),
		dalvik::system::Zygote::J2CPP_METHOD_SIGNATURE(5), 
		jint
	>(a0, a1, a2, a3, a4);
}


static_field<
	dalvik::system::Zygote::J2CPP_CLASS_NAME,
	dalvik::system::Zygote::J2CPP_FIELD_NAME(0),
	dalvik::system::Zygote::J2CPP_FIELD_SIGNATURE(0),
	jint
> dalvik::system::Zygote::DEBUG_ENABLE_DEBUGGER;

static_field<
	dalvik::system::Zygote::J2CPP_CLASS_NAME,
	dalvik::system::Zygote::J2CPP_FIELD_NAME(1),
	dalvik::system::Zygote::J2CPP_FIELD_SIGNATURE(1),
	jint
> dalvik::system::Zygote::DEBUG_ENABLE_CHECKJNI;

static_field<
	dalvik::system::Zygote::J2CPP_CLASS_NAME,
	dalvik::system::Zygote::J2CPP_FIELD_NAME(2),
	dalvik::system::Zygote::J2CPP_FIELD_SIGNATURE(2),
	jint
> dalvik::system::Zygote::DEBUG_ENABLE_ASSERT;

static_field<
	dalvik::system::Zygote::J2CPP_CLASS_NAME,
	dalvik::system::Zygote::J2CPP_FIELD_NAME(3),
	dalvik::system::Zygote::J2CPP_FIELD_SIGNATURE(3),
	jint
> dalvik::system::Zygote::DEBUG_ENABLE_SAFEMODE;


J2CPP_DEFINE_CLASS(dalvik::system::Zygote,"dalvik/system/Zygote")
J2CPP_DEFINE_METHOD(dalvik::system::Zygote,0,"<init>","()V")
J2CPP_DEFINE_METHOD(dalvik::system::Zygote,1,"fork","()I")
J2CPP_DEFINE_METHOD(dalvik::system::Zygote,2,"forkAndSpecialize","(II[II[[I)I")
J2CPP_DEFINE_METHOD(dalvik::system::Zygote,3,"forkAndSpecialize","(II[IZ[[I)I")
J2CPP_DEFINE_METHOD(dalvik::system::Zygote,4,"forkSystemServer","(II[II[[I)I")
J2CPP_DEFINE_METHOD(dalvik::system::Zygote,5,"forkSystemServer","(II[IZ[[I)I")
J2CPP_DEFINE_FIELD(dalvik::system::Zygote,0,"DEBUG_ENABLE_DEBUGGER","I")
J2CPP_DEFINE_FIELD(dalvik::system::Zygote,1,"DEBUG_ENABLE_CHECKJNI","I")
J2CPP_DEFINE_FIELD(dalvik::system::Zygote,2,"DEBUG_ENABLE_ASSERT","I")
J2CPP_DEFINE_FIELD(dalvik::system::Zygote,3,"DEBUG_ENABLE_SAFEMODE","I")

} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_ZYGOTE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

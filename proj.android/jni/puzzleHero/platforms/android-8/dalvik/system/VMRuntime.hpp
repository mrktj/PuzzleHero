/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: dalvik.system.VMRuntime
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_VMRUNTIME_HPP_DECL
#define J2CPP_DALVIK_SYSTEM_VMRUNTIME_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace dalvik { namespace system {

	class VMRuntime;
	class VMRuntime
		: public object<VMRuntime>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit VMRuntime(jobject jobj)
		: object<VMRuntime>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static local_ref< dalvik::system::VMRuntime > getRuntime();
		jfloat getTargetHeapUtilization();
		jfloat setTargetHeapUtilization(jfloat);
		jlong getMinimumHeapSize();
		jlong setMinimumHeapSize(jlong);
		void gcSoftReferences();
		void runFinalizationSync();
		jlong getExternalBytesAllocated();
	}; //class VMRuntime

} //namespace system
} //namespace dalvik

} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_VMRUNTIME_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_VMRUNTIME_HPP_IMPL
#define J2CPP_DALVIK_SYSTEM_VMRUNTIME_HPP_IMPL

namespace j2cpp {



dalvik::system::VMRuntime::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


local_ref< dalvik::system::VMRuntime > dalvik::system::VMRuntime::getRuntime()
{
	return call_static_method<
		dalvik::system::VMRuntime::J2CPP_CLASS_NAME,
		dalvik::system::VMRuntime::J2CPP_METHOD_NAME(1),
		dalvik::system::VMRuntime::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< dalvik::system::VMRuntime >
	>();
}

jfloat dalvik::system::VMRuntime::getTargetHeapUtilization()
{
	return call_method<
		dalvik::system::VMRuntime::J2CPP_CLASS_NAME,
		dalvik::system::VMRuntime::J2CPP_METHOD_NAME(2),
		dalvik::system::VMRuntime::J2CPP_METHOD_SIGNATURE(2), 
		jfloat
	>(get_jobject());
}

jfloat dalvik::system::VMRuntime::setTargetHeapUtilization(jfloat a0)
{
	return call_method<
		dalvik::system::VMRuntime::J2CPP_CLASS_NAME,
		dalvik::system::VMRuntime::J2CPP_METHOD_NAME(3),
		dalvik::system::VMRuntime::J2CPP_METHOD_SIGNATURE(3), 
		jfloat
	>(get_jobject(), a0);
}

jlong dalvik::system::VMRuntime::getMinimumHeapSize()
{
	return call_method<
		dalvik::system::VMRuntime::J2CPP_CLASS_NAME,
		dalvik::system::VMRuntime::J2CPP_METHOD_NAME(4),
		dalvik::system::VMRuntime::J2CPP_METHOD_SIGNATURE(4), 
		jlong
	>(get_jobject());
}

jlong dalvik::system::VMRuntime::setMinimumHeapSize(jlong a0)
{
	return call_method<
		dalvik::system::VMRuntime::J2CPP_CLASS_NAME,
		dalvik::system::VMRuntime::J2CPP_METHOD_NAME(5),
		dalvik::system::VMRuntime::J2CPP_METHOD_SIGNATURE(5), 
		jlong
	>(get_jobject(), a0);
}

void dalvik::system::VMRuntime::gcSoftReferences()
{
	return call_method<
		dalvik::system::VMRuntime::J2CPP_CLASS_NAME,
		dalvik::system::VMRuntime::J2CPP_METHOD_NAME(6),
		dalvik::system::VMRuntime::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject());
}

void dalvik::system::VMRuntime::runFinalizationSync()
{
	return call_method<
		dalvik::system::VMRuntime::J2CPP_CLASS_NAME,
		dalvik::system::VMRuntime::J2CPP_METHOD_NAME(7),
		dalvik::system::VMRuntime::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject());
}

jlong dalvik::system::VMRuntime::getExternalBytesAllocated()
{
	return call_method<
		dalvik::system::VMRuntime::J2CPP_CLASS_NAME,
		dalvik::system::VMRuntime::J2CPP_METHOD_NAME(8),
		dalvik::system::VMRuntime::J2CPP_METHOD_SIGNATURE(8), 
		jlong
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(dalvik::system::VMRuntime,"dalvik/system/VMRuntime")
J2CPP_DEFINE_METHOD(dalvik::system::VMRuntime,0,"<init>","()V")
J2CPP_DEFINE_METHOD(dalvik::system::VMRuntime,1,"getRuntime","()Ldalvik/system/VMRuntime;")
J2CPP_DEFINE_METHOD(dalvik::system::VMRuntime,2,"getTargetHeapUtilization","()F")
J2CPP_DEFINE_METHOD(dalvik::system::VMRuntime,3,"setTargetHeapUtilization","(F)F")
J2CPP_DEFINE_METHOD(dalvik::system::VMRuntime,4,"getMinimumHeapSize","()J")
J2CPP_DEFINE_METHOD(dalvik::system::VMRuntime,5,"setMinimumHeapSize","(J)J")
J2CPP_DEFINE_METHOD(dalvik::system::VMRuntime,6,"gcSoftReferences","()V")
J2CPP_DEFINE_METHOD(dalvik::system::VMRuntime,7,"runFinalizationSync","()V")
J2CPP_DEFINE_METHOD(dalvik::system::VMRuntime,8,"getExternalBytesAllocated","()J")

} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_VMRUNTIME_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: dalvik.system.DexFile
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_DEXFILE_HPP_DECL
#define J2CPP_DALVIK_SYSTEM_DEXFILE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class ClassLoader; } } }
namespace j2cpp { namespace java { namespace util { class Enumeration; } } }
namespace j2cpp { namespace java { namespace io { class File; } } }


#include <java/io/File.hpp>
#include <java/lang/Class.hpp>
#include <java/lang/ClassLoader.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Enumeration.hpp>


namespace j2cpp {

namespace dalvik { namespace system {

	class DexFile;
	class DexFile
		: public object<DexFile>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit DexFile(jobject jobj)
		: object<DexFile>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		DexFile(local_ref< java::io::File > const&);
		DexFile(local_ref< java::lang::String > const&);
		static local_ref< dalvik::system::DexFile > loadDex(local_ref< java::lang::String >  const&, local_ref< java::lang::String >  const&, jint);
		local_ref< java::lang::String > getName();
		void close();
		local_ref< java::lang::Class > loadClass(local_ref< java::lang::String >  const&, local_ref< java::lang::ClassLoader >  const&);
		local_ref< java::util::Enumeration > entries();
		static jboolean isDexOptNeeded(local_ref< java::lang::String >  const&);
	}; //class DexFile

} //namespace system
} //namespace dalvik

} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_DEXFILE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_DEXFILE_HPP_IMPL
#define J2CPP_DALVIK_SYSTEM_DEXFILE_HPP_IMPL

namespace j2cpp {



dalvik::system::DexFile::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


dalvik::system::DexFile::DexFile(local_ref< java::io::File > const &a0)
: object<dalvik::system::DexFile>(
	call_new_object<
		dalvik::system::DexFile::J2CPP_CLASS_NAME,
		dalvik::system::DexFile::J2CPP_METHOD_NAME(0),
		dalvik::system::DexFile::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}



dalvik::system::DexFile::DexFile(local_ref< java::lang::String > const &a0)
: object<dalvik::system::DexFile>(
	call_new_object<
		dalvik::system::DexFile::J2CPP_CLASS_NAME,
		dalvik::system::DexFile::J2CPP_METHOD_NAME(1),
		dalvik::system::DexFile::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}


local_ref< dalvik::system::DexFile > dalvik::system::DexFile::loadDex(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, jint a2)
{
	return call_static_method<
		dalvik::system::DexFile::J2CPP_CLASS_NAME,
		dalvik::system::DexFile::J2CPP_METHOD_NAME(2),
		dalvik::system::DexFile::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< dalvik::system::DexFile >
	>(a0, a1, a2);
}

local_ref< java::lang::String > dalvik::system::DexFile::getName()
{
	return call_method<
		dalvik::system::DexFile::J2CPP_CLASS_NAME,
		dalvik::system::DexFile::J2CPP_METHOD_NAME(3),
		dalvik::system::DexFile::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::String >
	>(get_jobject());
}

void dalvik::system::DexFile::close()
{
	return call_method<
		dalvik::system::DexFile::J2CPP_CLASS_NAME,
		dalvik::system::DexFile::J2CPP_METHOD_NAME(4),
		dalvik::system::DexFile::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject());
}

local_ref< java::lang::Class > dalvik::system::DexFile::loadClass(local_ref< java::lang::String > const &a0, local_ref< java::lang::ClassLoader > const &a1)
{
	return call_method<
		dalvik::system::DexFile::J2CPP_CLASS_NAME,
		dalvik::system::DexFile::J2CPP_METHOD_NAME(5),
		dalvik::system::DexFile::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::Class >
	>(get_jobject(), a0, a1);
}

local_ref< java::util::Enumeration > dalvik::system::DexFile::entries()
{
	return call_method<
		dalvik::system::DexFile::J2CPP_CLASS_NAME,
		dalvik::system::DexFile::J2CPP_METHOD_NAME(6),
		dalvik::system::DexFile::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::util::Enumeration >
	>(get_jobject());
}


jboolean dalvik::system::DexFile::isDexOptNeeded(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		dalvik::system::DexFile::J2CPP_CLASS_NAME,
		dalvik::system::DexFile::J2CPP_METHOD_NAME(8),
		dalvik::system::DexFile::J2CPP_METHOD_SIGNATURE(8), 
		jboolean
	>(a0);
}


J2CPP_DEFINE_CLASS(dalvik::system::DexFile,"dalvik/system/DexFile")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,0,"<init>","(Ljava/io/File;)V")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,1,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,2,"loadDex","(Ljava/lang/String;Ljava/lang/String;I)Ldalvik/system/DexFile;")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,3,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,4,"close","()V")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,5,"loadClass","(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,6,"entries","()Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,7,"finalize","()V")
J2CPP_DEFINE_METHOD(dalvik::system::DexFile,8,"isDexOptNeeded","(Ljava/lang/String;)Z")

} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_DEXFILE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

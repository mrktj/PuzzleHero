/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: junit.framework.AssertionFailedError
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JUNIT_FRAMEWORK_ASSERTIONFAILEDERROR_HPP_DECL
#define J2CPP_JUNIT_FRAMEWORK_ASSERTIONFAILEDERROR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Throwable; } } }
namespace j2cpp { namespace java { namespace lang { class Error; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Error.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/Throwable.hpp>


namespace j2cpp {

namespace junit { namespace framework {

	class AssertionFailedError;
	class AssertionFailedError
		: public object<AssertionFailedError>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		explicit AssertionFailedError(jobject jobj)
		: object<AssertionFailedError>(jobj)
		{
		}

		operator local_ref<java::lang::Throwable>() const;
		operator local_ref<java::lang::Error>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		AssertionFailedError();
		AssertionFailedError(local_ref< java::lang::String > const&);
	}; //class AssertionFailedError

} //namespace framework
} //namespace junit

} //namespace j2cpp

#endif //J2CPP_JUNIT_FRAMEWORK_ASSERTIONFAILEDERROR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JUNIT_FRAMEWORK_ASSERTIONFAILEDERROR_HPP_IMPL
#define J2CPP_JUNIT_FRAMEWORK_ASSERTIONFAILEDERROR_HPP_IMPL

namespace j2cpp {



junit::framework::AssertionFailedError::operator local_ref<java::lang::Throwable>() const
{
	return local_ref<java::lang::Throwable>(get_jobject());
}

junit::framework::AssertionFailedError::operator local_ref<java::lang::Error>() const
{
	return local_ref<java::lang::Error>(get_jobject());
}

junit::framework::AssertionFailedError::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

junit::framework::AssertionFailedError::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


junit::framework::AssertionFailedError::AssertionFailedError()
: object<junit::framework::AssertionFailedError>(
	call_new_object<
		junit::framework::AssertionFailedError::J2CPP_CLASS_NAME,
		junit::framework::AssertionFailedError::J2CPP_METHOD_NAME(0),
		junit::framework::AssertionFailedError::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}



junit::framework::AssertionFailedError::AssertionFailedError(local_ref< java::lang::String > const &a0)
: object<junit::framework::AssertionFailedError>(
	call_new_object<
		junit::framework::AssertionFailedError::J2CPP_CLASS_NAME,
		junit::framework::AssertionFailedError::J2CPP_METHOD_NAME(1),
		junit::framework::AssertionFailedError::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}



J2CPP_DEFINE_CLASS(junit::framework::AssertionFailedError,"junit/framework/AssertionFailedError")
J2CPP_DEFINE_METHOD(junit::framework::AssertionFailedError,0,"<init>","()V")
J2CPP_DEFINE_METHOD(junit::framework::AssertionFailedError,1,"<init>","(Ljava/lang/String;)V")

} //namespace j2cpp

#endif //J2CPP_JUNIT_FRAMEWORK_ASSERTIONFAILEDERROR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.sql.Statement
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_STATEMENT_HPP_DECL
#define J2CPP_JAVA_SQL_STATEMENT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace sql { class Connection; } } }
namespace j2cpp { namespace java { namespace sql { class SQLWarning; } } }
namespace j2cpp { namespace java { namespace sql { class Wrapper; } } }
namespace j2cpp { namespace java { namespace sql { class ResultSet; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/sql/Connection.hpp>
#include <java/sql/ResultSet.hpp>
#include <java/sql/SQLWarning.hpp>
#include <java/sql/Wrapper.hpp>


namespace j2cpp {

namespace java { namespace sql {

	class Statement;
	class Statement
		: public object<Statement>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)

		explicit Statement(jobject jobj)
		: object<Statement>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::sql::Wrapper>() const;


		void addBatch(local_ref< java::lang::String >  const&);
		void cancel();
		void clearBatch();
		void clearWarnings();
		void close();
		jboolean execute(local_ref< java::lang::String >  const&);
		jboolean execute(local_ref< java::lang::String >  const&, jint);
		jboolean execute(local_ref< java::lang::String >  const&, local_ref< array<jint,1> >  const&);
		jboolean execute(local_ref< java::lang::String >  const&, local_ref< array< local_ref< java::lang::String >, 1> >  const&);
		local_ref< array<jint,1> > executeBatch();
		local_ref< java::sql::ResultSet > executeQuery(local_ref< java::lang::String >  const&);
		jint executeUpdate(local_ref< java::lang::String >  const&);
		jint executeUpdate(local_ref< java::lang::String >  const&, jint);
		jint executeUpdate(local_ref< java::lang::String >  const&, local_ref< array<jint,1> >  const&);
		jint executeUpdate(local_ref< java::lang::String >  const&, local_ref< array< local_ref< java::lang::String >, 1> >  const&);
		local_ref< java::sql::Connection > getConnection();
		jint getFetchDirection();
		jint getFetchSize();
		local_ref< java::sql::ResultSet > getGeneratedKeys();
		jint getMaxFieldSize();
		jint getMaxRows();
		jboolean getMoreResults();
		jboolean getMoreResults(jint);
		jint getQueryTimeout();
		local_ref< java::sql::ResultSet > getResultSet();
		jint getResultSetConcurrency();
		jint getResultSetHoldability();
		jint getResultSetType();
		jint getUpdateCount();
		local_ref< java::sql::SQLWarning > getWarnings();
		void setCursorName(local_ref< java::lang::String >  const&);
		void setEscapeProcessing(jboolean);
		void setFetchDirection(jint);
		void setFetchSize(jint);
		void setMaxFieldSize(jint);
		void setMaxRows(jint);
		void setQueryTimeout(jint);
		jboolean isClosed();
		void setPoolable(jboolean);
		jboolean isPoolable();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > CLOSE_ALL_RESULTS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > CLOSE_CURRENT_RESULT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > EXECUTE_FAILED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > KEEP_CURRENT_RESULT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), jint > NO_GENERATED_KEYS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), jint > RETURN_GENERATED_KEYS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), jint > SUCCESS_NO_INFO;
	}; //class Statement

} //namespace sql
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_STATEMENT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SQL_STATEMENT_HPP_IMPL
#define J2CPP_JAVA_SQL_STATEMENT_HPP_IMPL

namespace j2cpp {



java::sql::Statement::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::sql::Statement::operator local_ref<java::sql::Wrapper>() const
{
	return local_ref<java::sql::Wrapper>(get_jobject());
}

void java::sql::Statement::addBatch(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(0),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0);
}

void java::sql::Statement::cancel()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(1),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject());
}

void java::sql::Statement::clearBatch()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(2),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject());
}

void java::sql::Statement::clearWarnings()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(3),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject());
}

void java::sql::Statement::close()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(4),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject());
}

jboolean java::sql::Statement::execute(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(5),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(5), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::sql::Statement::execute(local_ref< java::lang::String > const &a0, jint a1)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(6),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(6), 
		jboolean
	>(get_jobject(), a0, a1);
}

jboolean java::sql::Statement::execute(local_ref< java::lang::String > const &a0, local_ref< array<jint,1> > const &a1)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(7),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject(), a0, a1);
}

jboolean java::sql::Statement::execute(local_ref< java::lang::String > const &a0, local_ref< array< local_ref< java::lang::String >, 1> > const &a1)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(8),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(8), 
		jboolean
	>(get_jobject(), a0, a1);
}

local_ref< array<jint,1> > java::sql::Statement::executeBatch()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(9),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< array<jint,1> >
	>(get_jobject());
}

local_ref< java::sql::ResultSet > java::sql::Statement::executeQuery(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(10),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::sql::ResultSet >
	>(get_jobject(), a0);
}

jint java::sql::Statement::executeUpdate(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(11),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(11), 
		jint
	>(get_jobject(), a0);
}

jint java::sql::Statement::executeUpdate(local_ref< java::lang::String > const &a0, jint a1)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(12),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(12), 
		jint
	>(get_jobject(), a0, a1);
}

jint java::sql::Statement::executeUpdate(local_ref< java::lang::String > const &a0, local_ref< array<jint,1> > const &a1)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(13),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(13), 
		jint
	>(get_jobject(), a0, a1);
}

jint java::sql::Statement::executeUpdate(local_ref< java::lang::String > const &a0, local_ref< array< local_ref< java::lang::String >, 1> > const &a1)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(14),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(14), 
		jint
	>(get_jobject(), a0, a1);
}

local_ref< java::sql::Connection > java::sql::Statement::getConnection()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(15),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(15), 
		local_ref< java::sql::Connection >
	>(get_jobject());
}

jint java::sql::Statement::getFetchDirection()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(16),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(16), 
		jint
	>(get_jobject());
}

jint java::sql::Statement::getFetchSize()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(17),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(17), 
		jint
	>(get_jobject());
}

local_ref< java::sql::ResultSet > java::sql::Statement::getGeneratedKeys()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(18),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(18), 
		local_ref< java::sql::ResultSet >
	>(get_jobject());
}

jint java::sql::Statement::getMaxFieldSize()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(19),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(19), 
		jint
	>(get_jobject());
}

jint java::sql::Statement::getMaxRows()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(20),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(20), 
		jint
	>(get_jobject());
}

jboolean java::sql::Statement::getMoreResults()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(21),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(21), 
		jboolean
	>(get_jobject());
}

jboolean java::sql::Statement::getMoreResults(jint a0)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(22),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(22), 
		jboolean
	>(get_jobject(), a0);
}

jint java::sql::Statement::getQueryTimeout()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(23),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(23), 
		jint
	>(get_jobject());
}

local_ref< java::sql::ResultSet > java::sql::Statement::getResultSet()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(24),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(24), 
		local_ref< java::sql::ResultSet >
	>(get_jobject());
}

jint java::sql::Statement::getResultSetConcurrency()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(25),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(25), 
		jint
	>(get_jobject());
}

jint java::sql::Statement::getResultSetHoldability()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(26),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(26), 
		jint
	>(get_jobject());
}

jint java::sql::Statement::getResultSetType()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(27),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(27), 
		jint
	>(get_jobject());
}

jint java::sql::Statement::getUpdateCount()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(28),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(28), 
		jint
	>(get_jobject());
}

local_ref< java::sql::SQLWarning > java::sql::Statement::getWarnings()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(29),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(29), 
		local_ref< java::sql::SQLWarning >
	>(get_jobject());
}

void java::sql::Statement::setCursorName(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(30),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(30), 
		void
	>(get_jobject(), a0);
}

void java::sql::Statement::setEscapeProcessing(jboolean a0)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(31),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(31), 
		void
	>(get_jobject(), a0);
}

void java::sql::Statement::setFetchDirection(jint a0)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(32),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(32), 
		void
	>(get_jobject(), a0);
}

void java::sql::Statement::setFetchSize(jint a0)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(33),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(33), 
		void
	>(get_jobject(), a0);
}

void java::sql::Statement::setMaxFieldSize(jint a0)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(34),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(34), 
		void
	>(get_jobject(), a0);
}

void java::sql::Statement::setMaxRows(jint a0)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(35),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(35), 
		void
	>(get_jobject(), a0);
}

void java::sql::Statement::setQueryTimeout(jint a0)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(36),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(36), 
		void
	>(get_jobject(), a0);
}

jboolean java::sql::Statement::isClosed()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(37),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(37), 
		jboolean
	>(get_jobject());
}

void java::sql::Statement::setPoolable(jboolean a0)
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(38),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(38), 
		void
	>(get_jobject(), a0);
}

jboolean java::sql::Statement::isPoolable()
{
	return call_method<
		java::sql::Statement::J2CPP_CLASS_NAME,
		java::sql::Statement::J2CPP_METHOD_NAME(39),
		java::sql::Statement::J2CPP_METHOD_SIGNATURE(39), 
		jboolean
	>(get_jobject());
}


static_field<
	java::sql::Statement::J2CPP_CLASS_NAME,
	java::sql::Statement::J2CPP_FIELD_NAME(0),
	java::sql::Statement::J2CPP_FIELD_SIGNATURE(0),
	jint
> java::sql::Statement::CLOSE_ALL_RESULTS;

static_field<
	java::sql::Statement::J2CPP_CLASS_NAME,
	java::sql::Statement::J2CPP_FIELD_NAME(1),
	java::sql::Statement::J2CPP_FIELD_SIGNATURE(1),
	jint
> java::sql::Statement::CLOSE_CURRENT_RESULT;

static_field<
	java::sql::Statement::J2CPP_CLASS_NAME,
	java::sql::Statement::J2CPP_FIELD_NAME(2),
	java::sql::Statement::J2CPP_FIELD_SIGNATURE(2),
	jint
> java::sql::Statement::EXECUTE_FAILED;

static_field<
	java::sql::Statement::J2CPP_CLASS_NAME,
	java::sql::Statement::J2CPP_FIELD_NAME(3),
	java::sql::Statement::J2CPP_FIELD_SIGNATURE(3),
	jint
> java::sql::Statement::KEEP_CURRENT_RESULT;

static_field<
	java::sql::Statement::J2CPP_CLASS_NAME,
	java::sql::Statement::J2CPP_FIELD_NAME(4),
	java::sql::Statement::J2CPP_FIELD_SIGNATURE(4),
	jint
> java::sql::Statement::NO_GENERATED_KEYS;

static_field<
	java::sql::Statement::J2CPP_CLASS_NAME,
	java::sql::Statement::J2CPP_FIELD_NAME(5),
	java::sql::Statement::J2CPP_FIELD_SIGNATURE(5),
	jint
> java::sql::Statement::RETURN_GENERATED_KEYS;

static_field<
	java::sql::Statement::J2CPP_CLASS_NAME,
	java::sql::Statement::J2CPP_FIELD_NAME(6),
	java::sql::Statement::J2CPP_FIELD_SIGNATURE(6),
	jint
> java::sql::Statement::SUCCESS_NO_INFO;


J2CPP_DEFINE_CLASS(java::sql::Statement,"java/sql/Statement")
J2CPP_DEFINE_METHOD(java::sql::Statement,0,"addBatch","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::sql::Statement,1,"cancel","()V")
J2CPP_DEFINE_METHOD(java::sql::Statement,2,"clearBatch","()V")
J2CPP_DEFINE_METHOD(java::sql::Statement,3,"clearWarnings","()V")
J2CPP_DEFINE_METHOD(java::sql::Statement,4,"close","()V")
J2CPP_DEFINE_METHOD(java::sql::Statement,5,"execute","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::sql::Statement,6,"execute","(Ljava/lang/String;I)Z")
J2CPP_DEFINE_METHOD(java::sql::Statement,7,"execute","(Ljava/lang/String;[I)Z")
J2CPP_DEFINE_METHOD(java::sql::Statement,8,"execute","(Ljava/lang/String;[java.lang.String)Z")
J2CPP_DEFINE_METHOD(java::sql::Statement,9,"executeBatch","()[I")
J2CPP_DEFINE_METHOD(java::sql::Statement,10,"executeQuery","(Ljava/lang/String;)Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::Statement,11,"executeUpdate","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::sql::Statement,12,"executeUpdate","(Ljava/lang/String;I)I")
J2CPP_DEFINE_METHOD(java::sql::Statement,13,"executeUpdate","(Ljava/lang/String;[I)I")
J2CPP_DEFINE_METHOD(java::sql::Statement,14,"executeUpdate","(Ljava/lang/String;[java.lang.String)I")
J2CPP_DEFINE_METHOD(java::sql::Statement,15,"getConnection","()Ljava/sql/Connection;")
J2CPP_DEFINE_METHOD(java::sql::Statement,16,"getFetchDirection","()I")
J2CPP_DEFINE_METHOD(java::sql::Statement,17,"getFetchSize","()I")
J2CPP_DEFINE_METHOD(java::sql::Statement,18,"getGeneratedKeys","()Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::Statement,19,"getMaxFieldSize","()I")
J2CPP_DEFINE_METHOD(java::sql::Statement,20,"getMaxRows","()I")
J2CPP_DEFINE_METHOD(java::sql::Statement,21,"getMoreResults","()Z")
J2CPP_DEFINE_METHOD(java::sql::Statement,22,"getMoreResults","(I)Z")
J2CPP_DEFINE_METHOD(java::sql::Statement,23,"getQueryTimeout","()I")
J2CPP_DEFINE_METHOD(java::sql::Statement,24,"getResultSet","()Ljava/sql/ResultSet;")
J2CPP_DEFINE_METHOD(java::sql::Statement,25,"getResultSetConcurrency","()I")
J2CPP_DEFINE_METHOD(java::sql::Statement,26,"getResultSetHoldability","()I")
J2CPP_DEFINE_METHOD(java::sql::Statement,27,"getResultSetType","()I")
J2CPP_DEFINE_METHOD(java::sql::Statement,28,"getUpdateCount","()I")
J2CPP_DEFINE_METHOD(java::sql::Statement,29,"getWarnings","()Ljava/sql/SQLWarning;")
J2CPP_DEFINE_METHOD(java::sql::Statement,30,"setCursorName","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::sql::Statement,31,"setEscapeProcessing","(Z)V")
J2CPP_DEFINE_METHOD(java::sql::Statement,32,"setFetchDirection","(I)V")
J2CPP_DEFINE_METHOD(java::sql::Statement,33,"setFetchSize","(I)V")
J2CPP_DEFINE_METHOD(java::sql::Statement,34,"setMaxFieldSize","(I)V")
J2CPP_DEFINE_METHOD(java::sql::Statement,35,"setMaxRows","(I)V")
J2CPP_DEFINE_METHOD(java::sql::Statement,36,"setQueryTimeout","(I)V")
J2CPP_DEFINE_METHOD(java::sql::Statement,37,"isClosed","()Z")
J2CPP_DEFINE_METHOD(java::sql::Statement,38,"setPoolable","(Z)V")
J2CPP_DEFINE_METHOD(java::sql::Statement,39,"isPoolable","()Z")
J2CPP_DEFINE_FIELD(java::sql::Statement,0,"CLOSE_ALL_RESULTS","I")
J2CPP_DEFINE_FIELD(java::sql::Statement,1,"CLOSE_CURRENT_RESULT","I")
J2CPP_DEFINE_FIELD(java::sql::Statement,2,"EXECUTE_FAILED","I")
J2CPP_DEFINE_FIELD(java::sql::Statement,3,"KEEP_CURRENT_RESULT","I")
J2CPP_DEFINE_FIELD(java::sql::Statement,4,"NO_GENERATED_KEYS","I")
J2CPP_DEFINE_FIELD(java::sql::Statement,5,"RETURN_GENERATED_KEYS","I")
J2CPP_DEFINE_FIELD(java::sql::Statement,6,"SUCCESS_NO_INFO","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_SQL_STATEMENT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.lang.ThreadLocal
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_THREADLOCAL_HPP_DECL
#define J2CPP_JAVA_LANG_THREADLOCAL_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class ThreadLocal;
	class ThreadLocal
		: public object<ThreadLocal>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		explicit ThreadLocal(jobject jobj)
		: object<ThreadLocal>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		ThreadLocal();
		local_ref< java::lang::Object > get();
		void set(local_ref< java::lang::Object >  const&);
		void remove();
	}; //class ThreadLocal

} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_THREADLOCAL_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_THREADLOCAL_HPP_IMPL
#define J2CPP_JAVA_LANG_THREADLOCAL_HPP_IMPL

namespace j2cpp {



java::lang::ThreadLocal::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::lang::ThreadLocal::ThreadLocal()
: object<java::lang::ThreadLocal>(
	call_new_object<
		java::lang::ThreadLocal::J2CPP_CLASS_NAME,
		java::lang::ThreadLocal::J2CPP_METHOD_NAME(0),
		java::lang::ThreadLocal::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


local_ref< java::lang::Object > java::lang::ThreadLocal::get()
{
	return call_method<
		java::lang::ThreadLocal::J2CPP_CLASS_NAME,
		java::lang::ThreadLocal::J2CPP_METHOD_NAME(1),
		java::lang::ThreadLocal::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::Object >
	>(get_jobject());
}


void java::lang::ThreadLocal::set(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::lang::ThreadLocal::J2CPP_CLASS_NAME,
		java::lang::ThreadLocal::J2CPP_METHOD_NAME(3),
		java::lang::ThreadLocal::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0);
}

void java::lang::ThreadLocal::remove()
{
	return call_method<
		java::lang::ThreadLocal::J2CPP_CLASS_NAME,
		java::lang::ThreadLocal::J2CPP_METHOD_NAME(4),
		java::lang::ThreadLocal::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::lang::ThreadLocal,"java/lang/ThreadLocal")
J2CPP_DEFINE_METHOD(java::lang::ThreadLocal,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::ThreadLocal,1,"get","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::lang::ThreadLocal,2,"initialValue","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::lang::ThreadLocal,3,"set","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::lang::ThreadLocal,4,"remove","()V")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_THREADLOCAL_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

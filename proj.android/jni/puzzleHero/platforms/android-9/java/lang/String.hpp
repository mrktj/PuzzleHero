/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.lang.String
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_STRING_HPP_DECL
#define J2CPP_JAVA_LANG_STRING_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class StringBuffer; } } }
namespace j2cpp { namespace java { namespace lang { class Comparable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class StringBuilder; } } }
namespace j2cpp { namespace java { namespace nio { namespace charset { class Charset; } } } }
namespace j2cpp { namespace java { namespace util { class Locale; } } }
namespace j2cpp { namespace java { namespace util { class Comparator; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/Comparable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/StringBuffer.hpp>
#include <java/lang/StringBuilder.hpp>
#include <java/nio/charset/Charset.hpp>
#include <java/util/Comparator.hpp>
#include <java/util/Locale.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class String;
	class String
		: public object<String>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_METHOD(39)
		J2CPP_DECLARE_METHOD(40)
		J2CPP_DECLARE_METHOD(41)
		J2CPP_DECLARE_METHOD(42)
		J2CPP_DECLARE_METHOD(43)
		J2CPP_DECLARE_METHOD(44)
		J2CPP_DECLARE_METHOD(45)
		J2CPP_DECLARE_METHOD(46)
		J2CPP_DECLARE_METHOD(47)
		J2CPP_DECLARE_METHOD(48)
		J2CPP_DECLARE_METHOD(49)
		J2CPP_DECLARE_METHOD(50)
		J2CPP_DECLARE_METHOD(51)
		J2CPP_DECLARE_METHOD(52)
		J2CPP_DECLARE_METHOD(53)
		J2CPP_DECLARE_METHOD(54)
		J2CPP_DECLARE_METHOD(55)
		J2CPP_DECLARE_METHOD(56)
		J2CPP_DECLARE_METHOD(57)
		J2CPP_DECLARE_METHOD(58)
		J2CPP_DECLARE_METHOD(59)
		J2CPP_DECLARE_METHOD(60)
		J2CPP_DECLARE_METHOD(61)
		J2CPP_DECLARE_METHOD(62)
		J2CPP_DECLARE_METHOD(63)
		J2CPP_DECLARE_METHOD(64)
		J2CPP_DECLARE_METHOD(65)
		J2CPP_DECLARE_METHOD(66)
		J2CPP_DECLARE_METHOD(67)
		J2CPP_DECLARE_METHOD(68)
		J2CPP_DECLARE_METHOD(69)
		J2CPP_DECLARE_METHOD(70)
		J2CPP_DECLARE_METHOD(71)
		J2CPP_DECLARE_METHOD(72)
		J2CPP_DECLARE_METHOD(73)
		J2CPP_DECLARE_METHOD(74)
		J2CPP_DECLARE_METHOD(75)
		J2CPP_DECLARE_METHOD(76)
		J2CPP_DECLARE_METHOD(77)
		J2CPP_DECLARE_METHOD(78)
		J2CPP_DECLARE_METHOD(79)
		J2CPP_DECLARE_METHOD(80)
		J2CPP_DECLARE_METHOD(81)
		J2CPP_DECLARE_FIELD(0)

		explicit String(jobject jobj)
		: object<String>(jobj)
		{
		}

		operator local_ref<java::lang::CharSequence>() const;
		operator local_ref<java::lang::Comparable>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		String();
		String(local_ref< array<jbyte,1> > const&);
		String(local_ref< array<jbyte,1> > const&, jint);
		String(local_ref< array<jbyte,1> > const&, jint, jint);
		String(local_ref< array<jbyte,1> > const&, jint, jint, jint);
		String(local_ref< array<jbyte,1> > const&, jint, jint, local_ref< java::lang::String > const&);
		String(local_ref< array<jbyte,1> > const&, local_ref< java::lang::String > const&);
		String(local_ref< array<jbyte,1> > const&, jint, jint, local_ref< java::nio::charset::Charset > const&);
		String(local_ref< array<jbyte,1> > const&, local_ref< java::nio::charset::Charset > const&);
		String(local_ref< array<jchar,1> > const&);
		String(local_ref< array<jchar,1> > const&, jint, jint);
		String(local_ref< java::lang::String > const&);
		String(local_ref< java::lang::StringBuffer > const&);
		String(local_ref< array<jint,1> > const&, jint, jint);
		String(local_ref< java::lang::StringBuilder > const&);
		jchar charAt(jint);
		jint compareTo(local_ref< java::lang::String >  const&);
		jint compareToIgnoreCase(local_ref< java::lang::String >  const&);
		local_ref< java::lang::String > concat(local_ref< java::lang::String >  const&);
		static local_ref< java::lang::String > copyValueOf(local_ref< array<jchar,1> >  const&);
		static local_ref< java::lang::String > copyValueOf(local_ref< array<jchar,1> >  const&, jint, jint);
		jboolean endsWith(local_ref< java::lang::String >  const&);
		jboolean equals(local_ref< java::lang::Object >  const&);
		jboolean equalsIgnoreCase(local_ref< java::lang::String >  const&);
		void getBytes(jint, jint, local_ref< array<jbyte,1> >  const&, jint);
		local_ref< array<jbyte,1> > getBytes();
		local_ref< array<jbyte,1> > getBytes(local_ref< java::lang::String >  const&);
		local_ref< array<jbyte,1> > getBytes(local_ref< java::nio::charset::Charset >  const&);
		void getChars(jint, jint, local_ref< array<jchar,1> >  const&, jint);
		jint hashCode();
		jint indexOf(jint);
		jint indexOf(jint, jint);
		jint indexOf(local_ref< java::lang::String >  const&);
		jint indexOf(local_ref< java::lang::String >  const&, jint);
		local_ref< java::lang::String > intern();
		jboolean isEmpty();
		jint lastIndexOf(jint);
		jint lastIndexOf(jint, jint);
		jint lastIndexOf(local_ref< java::lang::String >  const&);
		jint lastIndexOf(local_ref< java::lang::String >  const&, jint);
		jint length();
		jboolean regionMatches(jint, local_ref< java::lang::String >  const&, jint, jint);
		jboolean regionMatches(jboolean, jint, local_ref< java::lang::String >  const&, jint, jint);
		local_ref< java::lang::String > replace(jchar, jchar);
		local_ref< java::lang::String > replace(local_ref< java::lang::CharSequence >  const&, local_ref< java::lang::CharSequence >  const&);
		jboolean startsWith(local_ref< java::lang::String >  const&);
		jboolean startsWith(local_ref< java::lang::String >  const&, jint);
		local_ref< java::lang::String > substring(jint);
		local_ref< java::lang::String > substring(jint, jint);
		local_ref< array<jchar,1> > toCharArray();
		local_ref< java::lang::String > toLowerCase();
		local_ref< java::lang::String > toLowerCase(local_ref< java::util::Locale >  const&);
		local_ref< java::lang::String > toString();
		local_ref< java::lang::String > toUpperCase();
		local_ref< java::lang::String > toUpperCase(local_ref< java::util::Locale >  const&);
		local_ref< java::lang::String > trim();
		static local_ref< java::lang::String > valueOf(local_ref< array<jchar,1> >  const&);
		static local_ref< java::lang::String > valueOf(local_ref< array<jchar,1> >  const&, jint, jint);
		static local_ref< java::lang::String > valueOf(jchar);
		static local_ref< java::lang::String > valueOf(jdouble);
		static local_ref< java::lang::String > valueOf(jfloat);
		static local_ref< java::lang::String > valueOf(jint);
		static local_ref< java::lang::String > valueOf(jlong);
		static local_ref< java::lang::String > valueOf(local_ref< java::lang::Object >  const&);
		static local_ref< java::lang::String > valueOf(jboolean);
		jboolean contentEquals(local_ref< java::lang::StringBuffer >  const&);
		jboolean contentEquals(local_ref< java::lang::CharSequence >  const&);
		jboolean matches(local_ref< java::lang::String >  const&);
		local_ref< java::lang::String > replaceAll(local_ref< java::lang::String >  const&, local_ref< java::lang::String >  const&);
		local_ref< java::lang::String > replaceFirst(local_ref< java::lang::String >  const&, local_ref< java::lang::String >  const&);
		local_ref< array< local_ref< java::lang::String >, 1> > split(local_ref< java::lang::String >  const&);
		local_ref< array< local_ref< java::lang::String >, 1> > split(local_ref< java::lang::String >  const&, jint);
		local_ref< java::lang::CharSequence > subSequence(jint, jint);
		jint codePointAt(jint);
		jint codePointBefore(jint);
		jint codePointCount(jint, jint);
		jboolean contains(local_ref< java::lang::CharSequence >  const&);
		jint offsetByCodePoints(jint, jint);
		static local_ref< java::lang::String > format(local_ref< java::lang::String >  const&, local_ref< array< local_ref< java::lang::Object >, 1> >  const&);
		static local_ref< java::lang::String > format(local_ref< java::util::Locale >  const&, local_ref< java::lang::String >  const&, local_ref< array< local_ref< java::lang::Object >, 1> >  const&);
		jint compareTo(local_ref< java::lang::Object >  const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::util::Comparator > > CASE_INSENSITIVE_ORDER;
	}; //class String

} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_STRING_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_STRING_HPP_IMPL
#define J2CPP_JAVA_LANG_STRING_HPP_IMPL

namespace j2cpp {



java::lang::String::operator local_ref<java::lang::CharSequence>() const
{
	return local_ref<java::lang::CharSequence>(get_jobject());
}

java::lang::String::operator local_ref<java::lang::Comparable>() const
{
	return local_ref<java::lang::Comparable>(get_jobject());
}

java::lang::String::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::lang::String::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


java::lang::String::String()
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(0),
		java::lang::String::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}



java::lang::String::String(local_ref< array<jbyte,1> > const &a0)
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(1),
		java::lang::String::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}



java::lang::String::String(local_ref< array<jbyte,1> > const &a0, jint a1)
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(2),
		java::lang::String::J2CPP_METHOD_SIGNATURE(2)
	>(a0, a1)
)
{
}



java::lang::String::String(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(3),
		java::lang::String::J2CPP_METHOD_SIGNATURE(3)
	>(a0, a1, a2)
)
{
}



java::lang::String::String(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2, jint a3)
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(4),
		java::lang::String::J2CPP_METHOD_SIGNATURE(4)
	>(a0, a1, a2, a3)
)
{
}



java::lang::String::String(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2, local_ref< java::lang::String > const &a3)
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(5),
		java::lang::String::J2CPP_METHOD_SIGNATURE(5)
	>(a0, a1, a2, a3)
)
{
}



java::lang::String::String(local_ref< array<jbyte,1> > const &a0, local_ref< java::lang::String > const &a1)
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(6),
		java::lang::String::J2CPP_METHOD_SIGNATURE(6)
	>(a0, a1)
)
{
}



java::lang::String::String(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2, local_ref< java::nio::charset::Charset > const &a3)
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(7),
		java::lang::String::J2CPP_METHOD_SIGNATURE(7)
	>(a0, a1, a2, a3)
)
{
}



java::lang::String::String(local_ref< array<jbyte,1> > const &a0, local_ref< java::nio::charset::Charset > const &a1)
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(8),
		java::lang::String::J2CPP_METHOD_SIGNATURE(8)
	>(a0, a1)
)
{
}



java::lang::String::String(local_ref< array<jchar,1> > const &a0)
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(9),
		java::lang::String::J2CPP_METHOD_SIGNATURE(9)
	>(a0)
)
{
}



java::lang::String::String(local_ref< array<jchar,1> > const &a0, jint a1, jint a2)
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(10),
		java::lang::String::J2CPP_METHOD_SIGNATURE(10)
	>(a0, a1, a2)
)
{
}



java::lang::String::String(local_ref< java::lang::String > const &a0)
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(11),
		java::lang::String::J2CPP_METHOD_SIGNATURE(11)
	>(a0)
)
{
}



java::lang::String::String(local_ref< java::lang::StringBuffer > const &a0)
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(12),
		java::lang::String::J2CPP_METHOD_SIGNATURE(12)
	>(a0)
)
{
}



java::lang::String::String(local_ref< array<jint,1> > const &a0, jint a1, jint a2)
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(13),
		java::lang::String::J2CPP_METHOD_SIGNATURE(13)
	>(a0, a1, a2)
)
{
}



java::lang::String::String(local_ref< java::lang::StringBuilder > const &a0)
: object<java::lang::String>(
	call_new_object<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(14),
		java::lang::String::J2CPP_METHOD_SIGNATURE(14)
	>(a0)
)
{
}


jchar java::lang::String::charAt(jint a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(15),
		java::lang::String::J2CPP_METHOD_SIGNATURE(15), 
		jchar
	>(get_jobject(), a0);
}

jint java::lang::String::compareTo(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(16),
		java::lang::String::J2CPP_METHOD_SIGNATURE(16), 
		jint
	>(get_jobject(), a0);
}

jint java::lang::String::compareToIgnoreCase(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(17),
		java::lang::String::J2CPP_METHOD_SIGNATURE(17), 
		jint
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::lang::String::concat(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(18),
		java::lang::String::J2CPP_METHOD_SIGNATURE(18), 
		local_ref< java::lang::String >
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::lang::String::copyValueOf(local_ref< array<jchar,1> > const &a0)
{
	return call_static_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(19),
		java::lang::String::J2CPP_METHOD_SIGNATURE(19), 
		local_ref< java::lang::String >
	>(a0);
}

local_ref< java::lang::String > java::lang::String::copyValueOf(local_ref< array<jchar,1> > const &a0, jint a1, jint a2)
{
	return call_static_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(20),
		java::lang::String::J2CPP_METHOD_SIGNATURE(20), 
		local_ref< java::lang::String >
	>(a0, a1, a2);
}

jboolean java::lang::String::endsWith(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(21),
		java::lang::String::J2CPP_METHOD_SIGNATURE(21), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::lang::String::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(22),
		java::lang::String::J2CPP_METHOD_SIGNATURE(22), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::lang::String::equalsIgnoreCase(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(23),
		java::lang::String::J2CPP_METHOD_SIGNATURE(23), 
		jboolean
	>(get_jobject(), a0);
}

void java::lang::String::getBytes(jint a0, jint a1, local_ref< array<jbyte,1> > const &a2, jint a3)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(24),
		java::lang::String::J2CPP_METHOD_SIGNATURE(24), 
		void
	>(get_jobject(), a0, a1, a2, a3);
}

local_ref< array<jbyte,1> > java::lang::String::getBytes()
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(25),
		java::lang::String::J2CPP_METHOD_SIGNATURE(25), 
		local_ref< array<jbyte,1> >
	>(get_jobject());
}

local_ref< array<jbyte,1> > java::lang::String::getBytes(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(26),
		java::lang::String::J2CPP_METHOD_SIGNATURE(26), 
		local_ref< array<jbyte,1> >
	>(get_jobject(), a0);
}

local_ref< array<jbyte,1> > java::lang::String::getBytes(local_ref< java::nio::charset::Charset > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(27),
		java::lang::String::J2CPP_METHOD_SIGNATURE(27), 
		local_ref< array<jbyte,1> >
	>(get_jobject(), a0);
}

void java::lang::String::getChars(jint a0, jint a1, local_ref< array<jchar,1> > const &a2, jint a3)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(28),
		java::lang::String::J2CPP_METHOD_SIGNATURE(28), 
		void
	>(get_jobject(), a0, a1, a2, a3);
}

jint java::lang::String::hashCode()
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(29),
		java::lang::String::J2CPP_METHOD_SIGNATURE(29), 
		jint
	>(get_jobject());
}

jint java::lang::String::indexOf(jint a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(30),
		java::lang::String::J2CPP_METHOD_SIGNATURE(30), 
		jint
	>(get_jobject(), a0);
}

jint java::lang::String::indexOf(jint a0, jint a1)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(31),
		java::lang::String::J2CPP_METHOD_SIGNATURE(31), 
		jint
	>(get_jobject(), a0, a1);
}

jint java::lang::String::indexOf(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(32),
		java::lang::String::J2CPP_METHOD_SIGNATURE(32), 
		jint
	>(get_jobject(), a0);
}

jint java::lang::String::indexOf(local_ref< java::lang::String > const &a0, jint a1)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(33),
		java::lang::String::J2CPP_METHOD_SIGNATURE(33), 
		jint
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::String > java::lang::String::intern()
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(34),
		java::lang::String::J2CPP_METHOD_SIGNATURE(34), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean java::lang::String::isEmpty()
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(35),
		java::lang::String::J2CPP_METHOD_SIGNATURE(35), 
		jboolean
	>(get_jobject());
}

jint java::lang::String::lastIndexOf(jint a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(36),
		java::lang::String::J2CPP_METHOD_SIGNATURE(36), 
		jint
	>(get_jobject(), a0);
}

jint java::lang::String::lastIndexOf(jint a0, jint a1)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(37),
		java::lang::String::J2CPP_METHOD_SIGNATURE(37), 
		jint
	>(get_jobject(), a0, a1);
}

jint java::lang::String::lastIndexOf(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(38),
		java::lang::String::J2CPP_METHOD_SIGNATURE(38), 
		jint
	>(get_jobject(), a0);
}

jint java::lang::String::lastIndexOf(local_ref< java::lang::String > const &a0, jint a1)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(39),
		java::lang::String::J2CPP_METHOD_SIGNATURE(39), 
		jint
	>(get_jobject(), a0, a1);
}

jint java::lang::String::length()
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(40),
		java::lang::String::J2CPP_METHOD_SIGNATURE(40), 
		jint
	>(get_jobject());
}

jboolean java::lang::String::regionMatches(jint a0, local_ref< java::lang::String > const &a1, jint a2, jint a3)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(41),
		java::lang::String::J2CPP_METHOD_SIGNATURE(41), 
		jboolean
	>(get_jobject(), a0, a1, a2, a3);
}

jboolean java::lang::String::regionMatches(jboolean a0, jint a1, local_ref< java::lang::String > const &a2, jint a3, jint a4)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(42),
		java::lang::String::J2CPP_METHOD_SIGNATURE(42), 
		jboolean
	>(get_jobject(), a0, a1, a2, a3, a4);
}

local_ref< java::lang::String > java::lang::String::replace(jchar a0, jchar a1)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(43),
		java::lang::String::J2CPP_METHOD_SIGNATURE(43), 
		local_ref< java::lang::String >
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::String > java::lang::String::replace(local_ref< java::lang::CharSequence > const &a0, local_ref< java::lang::CharSequence > const &a1)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(44),
		java::lang::String::J2CPP_METHOD_SIGNATURE(44), 
		local_ref< java::lang::String >
	>(get_jobject(), a0, a1);
}

jboolean java::lang::String::startsWith(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(45),
		java::lang::String::J2CPP_METHOD_SIGNATURE(45), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::lang::String::startsWith(local_ref< java::lang::String > const &a0, jint a1)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(46),
		java::lang::String::J2CPP_METHOD_SIGNATURE(46), 
		jboolean
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::String > java::lang::String::substring(jint a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(47),
		java::lang::String::J2CPP_METHOD_SIGNATURE(47), 
		local_ref< java::lang::String >
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::lang::String::substring(jint a0, jint a1)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(48),
		java::lang::String::J2CPP_METHOD_SIGNATURE(48), 
		local_ref< java::lang::String >
	>(get_jobject(), a0, a1);
}

local_ref< array<jchar,1> > java::lang::String::toCharArray()
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(49),
		java::lang::String::J2CPP_METHOD_SIGNATURE(49), 
		local_ref< array<jchar,1> >
	>(get_jobject());
}

local_ref< java::lang::String > java::lang::String::toLowerCase()
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(50),
		java::lang::String::J2CPP_METHOD_SIGNATURE(50), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::lang::String::toLowerCase(local_ref< java::util::Locale > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(51),
		java::lang::String::J2CPP_METHOD_SIGNATURE(51), 
		local_ref< java::lang::String >
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::lang::String::toString()
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(52),
		java::lang::String::J2CPP_METHOD_SIGNATURE(52), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::lang::String::toUpperCase()
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(53),
		java::lang::String::J2CPP_METHOD_SIGNATURE(53), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::lang::String::toUpperCase(local_ref< java::util::Locale > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(54),
		java::lang::String::J2CPP_METHOD_SIGNATURE(54), 
		local_ref< java::lang::String >
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::lang::String::trim()
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(55),
		java::lang::String::J2CPP_METHOD_SIGNATURE(55), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::lang::String::valueOf(local_ref< array<jchar,1> > const &a0)
{
	return call_static_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(56),
		java::lang::String::J2CPP_METHOD_SIGNATURE(56), 
		local_ref< java::lang::String >
	>(a0);
}

local_ref< java::lang::String > java::lang::String::valueOf(local_ref< array<jchar,1> > const &a0, jint a1, jint a2)
{
	return call_static_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(57),
		java::lang::String::J2CPP_METHOD_SIGNATURE(57), 
		local_ref< java::lang::String >
	>(a0, a1, a2);
}

local_ref< java::lang::String > java::lang::String::valueOf(jchar a0)
{
	return call_static_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(58),
		java::lang::String::J2CPP_METHOD_SIGNATURE(58), 
		local_ref< java::lang::String >
	>(a0);
}

local_ref< java::lang::String > java::lang::String::valueOf(jdouble a0)
{
	return call_static_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(59),
		java::lang::String::J2CPP_METHOD_SIGNATURE(59), 
		local_ref< java::lang::String >
	>(a0);
}

local_ref< java::lang::String > java::lang::String::valueOf(jfloat a0)
{
	return call_static_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(60),
		java::lang::String::J2CPP_METHOD_SIGNATURE(60), 
		local_ref< java::lang::String >
	>(a0);
}

local_ref< java::lang::String > java::lang::String::valueOf(jint a0)
{
	return call_static_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(61),
		java::lang::String::J2CPP_METHOD_SIGNATURE(61), 
		local_ref< java::lang::String >
	>(a0);
}

local_ref< java::lang::String > java::lang::String::valueOf(jlong a0)
{
	return call_static_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(62),
		java::lang::String::J2CPP_METHOD_SIGNATURE(62), 
		local_ref< java::lang::String >
	>(a0);
}

local_ref< java::lang::String > java::lang::String::valueOf(local_ref< java::lang::Object > const &a0)
{
	return call_static_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(63),
		java::lang::String::J2CPP_METHOD_SIGNATURE(63), 
		local_ref< java::lang::String >
	>(a0);
}

local_ref< java::lang::String > java::lang::String::valueOf(jboolean a0)
{
	return call_static_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(64),
		java::lang::String::J2CPP_METHOD_SIGNATURE(64), 
		local_ref< java::lang::String >
	>(a0);
}

jboolean java::lang::String::contentEquals(local_ref< java::lang::StringBuffer > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(65),
		java::lang::String::J2CPP_METHOD_SIGNATURE(65), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::lang::String::contentEquals(local_ref< java::lang::CharSequence > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(66),
		java::lang::String::J2CPP_METHOD_SIGNATURE(66), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::lang::String::matches(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(67),
		java::lang::String::J2CPP_METHOD_SIGNATURE(67), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::lang::String::replaceAll(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(68),
		java::lang::String::J2CPP_METHOD_SIGNATURE(68), 
		local_ref< java::lang::String >
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::String > java::lang::String::replaceFirst(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(69),
		java::lang::String::J2CPP_METHOD_SIGNATURE(69), 
		local_ref< java::lang::String >
	>(get_jobject(), a0, a1);
}

local_ref< array< local_ref< java::lang::String >, 1> > java::lang::String::split(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(70),
		java::lang::String::J2CPP_METHOD_SIGNATURE(70), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(get_jobject(), a0);
}

local_ref< array< local_ref< java::lang::String >, 1> > java::lang::String::split(local_ref< java::lang::String > const &a0, jint a1)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(71),
		java::lang::String::J2CPP_METHOD_SIGNATURE(71), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::CharSequence > java::lang::String::subSequence(jint a0, jint a1)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(72),
		java::lang::String::J2CPP_METHOD_SIGNATURE(72), 
		local_ref< java::lang::CharSequence >
	>(get_jobject(), a0, a1);
}

jint java::lang::String::codePointAt(jint a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(73),
		java::lang::String::J2CPP_METHOD_SIGNATURE(73), 
		jint
	>(get_jobject(), a0);
}

jint java::lang::String::codePointBefore(jint a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(74),
		java::lang::String::J2CPP_METHOD_SIGNATURE(74), 
		jint
	>(get_jobject(), a0);
}

jint java::lang::String::codePointCount(jint a0, jint a1)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(75),
		java::lang::String::J2CPP_METHOD_SIGNATURE(75), 
		jint
	>(get_jobject(), a0, a1);
}

jboolean java::lang::String::contains(local_ref< java::lang::CharSequence > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(76),
		java::lang::String::J2CPP_METHOD_SIGNATURE(76), 
		jboolean
	>(get_jobject(), a0);
}

jint java::lang::String::offsetByCodePoints(jint a0, jint a1)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(77),
		java::lang::String::J2CPP_METHOD_SIGNATURE(77), 
		jint
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::String > java::lang::String::format(local_ref< java::lang::String > const &a0, local_ref< array< local_ref< java::lang::Object >, 1> > const &a1)
{
	return call_static_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(78),
		java::lang::String::J2CPP_METHOD_SIGNATURE(78), 
		local_ref< java::lang::String >
	>(a0, a1);
}

local_ref< java::lang::String > java::lang::String::format(local_ref< java::util::Locale > const &a0, local_ref< java::lang::String > const &a1, local_ref< array< local_ref< java::lang::Object >, 1> > const &a2)
{
	return call_static_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(79),
		java::lang::String::J2CPP_METHOD_SIGNATURE(79), 
		local_ref< java::lang::String >
	>(a0, a1, a2);
}

jint java::lang::String::compareTo(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::lang::String::J2CPP_CLASS_NAME,
		java::lang::String::J2CPP_METHOD_NAME(80),
		java::lang::String::J2CPP_METHOD_SIGNATURE(80), 
		jint
	>(get_jobject(), a0);
}



static_field<
	java::lang::String::J2CPP_CLASS_NAME,
	java::lang::String::J2CPP_FIELD_NAME(0),
	java::lang::String::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::util::Comparator >
> java::lang::String::CASE_INSENSITIVE_ORDER;


J2CPP_DEFINE_CLASS(java::lang::String,"java/lang/String")
J2CPP_DEFINE_METHOD(java::lang::String,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::String,1,"<init>","([B)V")
J2CPP_DEFINE_METHOD(java::lang::String,2,"<init>","([BI)V")
J2CPP_DEFINE_METHOD(java::lang::String,3,"<init>","([BII)V")
J2CPP_DEFINE_METHOD(java::lang::String,4,"<init>","([BIII)V")
J2CPP_DEFINE_METHOD(java::lang::String,5,"<init>","([BIILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::lang::String,6,"<init>","([BLjava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::lang::String,7,"<init>","([BIILjava/nio/charset/Charset;)V")
J2CPP_DEFINE_METHOD(java::lang::String,8,"<init>","([BLjava/nio/charset/Charset;)V")
J2CPP_DEFINE_METHOD(java::lang::String,9,"<init>","([C)V")
J2CPP_DEFINE_METHOD(java::lang::String,10,"<init>","([CII)V")
J2CPP_DEFINE_METHOD(java::lang::String,11,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::lang::String,12,"<init>","(Ljava/lang/StringBuffer;)V")
J2CPP_DEFINE_METHOD(java::lang::String,13,"<init>","([III)V")
J2CPP_DEFINE_METHOD(java::lang::String,14,"<init>","(Ljava/lang/StringBuilder;)V")
J2CPP_DEFINE_METHOD(java::lang::String,15,"charAt","(I)C")
J2CPP_DEFINE_METHOD(java::lang::String,16,"compareTo","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::lang::String,17,"compareToIgnoreCase","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::lang::String,18,"concat","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,19,"copyValueOf","([C)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,20,"copyValueOf","([CII)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,21,"endsWith","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,22,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,23,"equalsIgnoreCase","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,24,"getBytes","(II[BI)V")
J2CPP_DEFINE_METHOD(java::lang::String,25,"getBytes","()[B")
J2CPP_DEFINE_METHOD(java::lang::String,26,"getBytes","(Ljava/lang/String;)[B")
J2CPP_DEFINE_METHOD(java::lang::String,27,"getBytes","(Ljava/nio/charset/Charset;)[B")
J2CPP_DEFINE_METHOD(java::lang::String,28,"getChars","(II[CI)V")
J2CPP_DEFINE_METHOD(java::lang::String,29,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::lang::String,30,"indexOf","(I)I")
J2CPP_DEFINE_METHOD(java::lang::String,31,"indexOf","(II)I")
J2CPP_DEFINE_METHOD(java::lang::String,32,"indexOf","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::lang::String,33,"indexOf","(Ljava/lang/String;I)I")
J2CPP_DEFINE_METHOD(java::lang::String,34,"intern","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,35,"isEmpty","()Z")
J2CPP_DEFINE_METHOD(java::lang::String,36,"lastIndexOf","(I)I")
J2CPP_DEFINE_METHOD(java::lang::String,37,"lastIndexOf","(II)I")
J2CPP_DEFINE_METHOD(java::lang::String,38,"lastIndexOf","(Ljava/lang/String;)I")
J2CPP_DEFINE_METHOD(java::lang::String,39,"lastIndexOf","(Ljava/lang/String;I)I")
J2CPP_DEFINE_METHOD(java::lang::String,40,"length","()I")
J2CPP_DEFINE_METHOD(java::lang::String,41,"regionMatches","(ILjava/lang/String;II)Z")
J2CPP_DEFINE_METHOD(java::lang::String,42,"regionMatches","(ZILjava/lang/String;II)Z")
J2CPP_DEFINE_METHOD(java::lang::String,43,"replace","(CC)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,44,"replace","(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,45,"startsWith","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,46,"startsWith","(Ljava/lang/String;I)Z")
J2CPP_DEFINE_METHOD(java::lang::String,47,"substring","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,48,"substring","(II)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,49,"toCharArray","()[C")
J2CPP_DEFINE_METHOD(java::lang::String,50,"toLowerCase","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,51,"toLowerCase","(Ljava/util/Locale;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,52,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,53,"toUpperCase","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,54,"toUpperCase","(Ljava/util/Locale;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,55,"trim","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,56,"valueOf","([C)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,57,"valueOf","([CII)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,58,"valueOf","(C)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,59,"valueOf","(D)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,60,"valueOf","(F)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,61,"valueOf","(I)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,62,"valueOf","(J)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,63,"valueOf","(Ljava/lang/Object;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,64,"valueOf","(Z)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,65,"contentEquals","(Ljava/lang/StringBuffer;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,66,"contentEquals","(Ljava/lang/CharSequence;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,67,"matches","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,68,"replaceAll","(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,69,"replaceFirst","(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,70,"split","(Ljava/lang/String;)[java.lang.String")
J2CPP_DEFINE_METHOD(java::lang::String,71,"split","(Ljava/lang/String;I)[java.lang.String")
J2CPP_DEFINE_METHOD(java::lang::String,72,"subSequence","(II)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(java::lang::String,73,"codePointAt","(I)I")
J2CPP_DEFINE_METHOD(java::lang::String,74,"codePointBefore","(I)I")
J2CPP_DEFINE_METHOD(java::lang::String,75,"codePointCount","(II)I")
J2CPP_DEFINE_METHOD(java::lang::String,76,"contains","(Ljava/lang/CharSequence;)Z")
J2CPP_DEFINE_METHOD(java::lang::String,77,"offsetByCodePoints","(II)I")
J2CPP_DEFINE_METHOD(java::lang::String,78,"format","(Ljava/lang/String;[java.lang.Object)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,79,"format","(Ljava/util/Locale;Ljava/lang/String;[java.lang.Object)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::String,80,"compareTo","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(java::lang::String,81,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::lang::String,0,"CASE_INSENSITIVE_ORDER","Ljava/util/Comparator;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_STRING_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.lang.Number
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_NUMBER_HPP_DECL
#define J2CPP_JAVA_LANG_NUMBER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class Number;
	class Number
		: public object<Number>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		explicit Number(jobject jobj)
		: object<Number>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		Number();
		jbyte byteValue();
		jdouble doubleValue();
		jfloat floatValue();
		jint intValue();
		jlong longValue();
		jshort shortValue();
	}; //class Number

} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_NUMBER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_NUMBER_HPP_IMPL
#define J2CPP_JAVA_LANG_NUMBER_HPP_IMPL

namespace j2cpp {



java::lang::Number::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::lang::Number::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


java::lang::Number::Number()
: object<java::lang::Number>(
	call_new_object<
		java::lang::Number::J2CPP_CLASS_NAME,
		java::lang::Number::J2CPP_METHOD_NAME(0),
		java::lang::Number::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


jbyte java::lang::Number::byteValue()
{
	return call_method<
		java::lang::Number::J2CPP_CLASS_NAME,
		java::lang::Number::J2CPP_METHOD_NAME(1),
		java::lang::Number::J2CPP_METHOD_SIGNATURE(1), 
		jbyte
	>(get_jobject());
}

jdouble java::lang::Number::doubleValue()
{
	return call_method<
		java::lang::Number::J2CPP_CLASS_NAME,
		java::lang::Number::J2CPP_METHOD_NAME(2),
		java::lang::Number::J2CPP_METHOD_SIGNATURE(2), 
		jdouble
	>(get_jobject());
}

jfloat java::lang::Number::floatValue()
{
	return call_method<
		java::lang::Number::J2CPP_CLASS_NAME,
		java::lang::Number::J2CPP_METHOD_NAME(3),
		java::lang::Number::J2CPP_METHOD_SIGNATURE(3), 
		jfloat
	>(get_jobject());
}

jint java::lang::Number::intValue()
{
	return call_method<
		java::lang::Number::J2CPP_CLASS_NAME,
		java::lang::Number::J2CPP_METHOD_NAME(4),
		java::lang::Number::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject());
}

jlong java::lang::Number::longValue()
{
	return call_method<
		java::lang::Number::J2CPP_CLASS_NAME,
		java::lang::Number::J2CPP_METHOD_NAME(5),
		java::lang::Number::J2CPP_METHOD_SIGNATURE(5), 
		jlong
	>(get_jobject());
}

jshort java::lang::Number::shortValue()
{
	return call_method<
		java::lang::Number::J2CPP_CLASS_NAME,
		java::lang::Number::J2CPP_METHOD_NAME(6),
		java::lang::Number::J2CPP_METHOD_SIGNATURE(6), 
		jshort
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::lang::Number,"java/lang/Number")
J2CPP_DEFINE_METHOD(java::lang::Number,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::Number,1,"byteValue","()B")
J2CPP_DEFINE_METHOD(java::lang::Number,2,"doubleValue","()D")
J2CPP_DEFINE_METHOD(java::lang::Number,3,"floatValue","()F")
J2CPP_DEFINE_METHOD(java::lang::Number,4,"intValue","()I")
J2CPP_DEFINE_METHOD(java::lang::Number,5,"longValue","()J")
J2CPP_DEFINE_METHOD(java::lang::Number,6,"shortValue","()S")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_NUMBER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

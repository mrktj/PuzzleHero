/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.lang.Byte
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_BYTE_HPP_DECL
#define J2CPP_JAVA_LANG_BYTE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Number; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class Comparable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Class.hpp>
#include <java/lang/Comparable.hpp>
#include <java/lang/Number.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class Byte;
	class Byte
		: public object<Byte>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)

		explicit Byte(jobject jobj)
		: object<Byte>(jobj)
		{
		}

		operator local_ref<java::lang::Number>() const;
		operator local_ref<java::lang::Comparable>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		Byte(jbyte);
		Byte(local_ref< java::lang::String > const&);
		jbyte byteValue();
		jint compareTo(local_ref< java::lang::Byte >  const&);
		static local_ref< java::lang::Byte > decode(local_ref< java::lang::String >  const&);
		jdouble doubleValue();
		jboolean equals(local_ref< java::lang::Object >  const&);
		jfloat floatValue();
		jint hashCode();
		jint intValue();
		jlong longValue();
		static jbyte parseByte(local_ref< java::lang::String >  const&);
		static jbyte parseByte(local_ref< java::lang::String >  const&, jint);
		jshort shortValue();
		local_ref< java::lang::String > toString();
		static local_ref< java::lang::String > toString(jbyte);
		static local_ref< java::lang::Byte > valueOf(local_ref< java::lang::String >  const&);
		static local_ref< java::lang::Byte > valueOf(local_ref< java::lang::String >  const&, jint);
		static local_ref< java::lang::Byte > valueOf(jbyte);
		jint compareTo(local_ref< java::lang::Object >  const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jbyte > MAX_VALUE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jbyte > MIN_VALUE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > SIZE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), local_ref< java::lang::Class > > TYPE;
	}; //class Byte

} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_BYTE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_BYTE_HPP_IMPL
#define J2CPP_JAVA_LANG_BYTE_HPP_IMPL

namespace j2cpp {



java::lang::Byte::operator local_ref<java::lang::Number>() const
{
	return local_ref<java::lang::Number>(get_jobject());
}

java::lang::Byte::operator local_ref<java::lang::Comparable>() const
{
	return local_ref<java::lang::Comparable>(get_jobject());
}

java::lang::Byte::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::lang::Byte::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


java::lang::Byte::Byte(jbyte a0)
: object<java::lang::Byte>(
	call_new_object<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(0),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}



java::lang::Byte::Byte(local_ref< java::lang::String > const &a0)
: object<java::lang::Byte>(
	call_new_object<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(1),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}


jbyte java::lang::Byte::byteValue()
{
	return call_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(2),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(2), 
		jbyte
	>(get_jobject());
}

jint java::lang::Byte::compareTo(local_ref< java::lang::Byte > const &a0)
{
	return call_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(3),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(get_jobject(), a0);
}

local_ref< java::lang::Byte > java::lang::Byte::decode(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(4),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::lang::Byte >
	>(a0);
}

jdouble java::lang::Byte::doubleValue()
{
	return call_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(5),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(5), 
		jdouble
	>(get_jobject());
}

jboolean java::lang::Byte::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(6),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(6), 
		jboolean
	>(get_jobject(), a0);
}

jfloat java::lang::Byte::floatValue()
{
	return call_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(7),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(7), 
		jfloat
	>(get_jobject());
}

jint java::lang::Byte::hashCode()
{
	return call_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(8),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}

jint java::lang::Byte::intValue()
{
	return call_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(9),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(9), 
		jint
	>(get_jobject());
}

jlong java::lang::Byte::longValue()
{
	return call_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(10),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(10), 
		jlong
	>(get_jobject());
}

jbyte java::lang::Byte::parseByte(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(11),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(11), 
		jbyte
	>(a0);
}

jbyte java::lang::Byte::parseByte(local_ref< java::lang::String > const &a0, jint a1)
{
	return call_static_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(12),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(12), 
		jbyte
	>(a0, a1);
}

jshort java::lang::Byte::shortValue()
{
	return call_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(13),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(13), 
		jshort
	>(get_jobject());
}

local_ref< java::lang::String > java::lang::Byte::toString()
{
	return call_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(14),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(14), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::lang::Byte::toString(jbyte a0)
{
	return call_static_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(15),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(15), 
		local_ref< java::lang::String >
	>(a0);
}

local_ref< java::lang::Byte > java::lang::Byte::valueOf(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(16),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(16), 
		local_ref< java::lang::Byte >
	>(a0);
}

local_ref< java::lang::Byte > java::lang::Byte::valueOf(local_ref< java::lang::String > const &a0, jint a1)
{
	return call_static_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(17),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(17), 
		local_ref< java::lang::Byte >
	>(a0, a1);
}

local_ref< java::lang::Byte > java::lang::Byte::valueOf(jbyte a0)
{
	return call_static_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(18),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(18), 
		local_ref< java::lang::Byte >
	>(a0);
}

jint java::lang::Byte::compareTo(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::lang::Byte::J2CPP_CLASS_NAME,
		java::lang::Byte::J2CPP_METHOD_NAME(19),
		java::lang::Byte::J2CPP_METHOD_SIGNATURE(19), 
		jint
	>(get_jobject(), a0);
}



static_field<
	java::lang::Byte::J2CPP_CLASS_NAME,
	java::lang::Byte::J2CPP_FIELD_NAME(0),
	java::lang::Byte::J2CPP_FIELD_SIGNATURE(0),
	jbyte
> java::lang::Byte::MAX_VALUE;

static_field<
	java::lang::Byte::J2CPP_CLASS_NAME,
	java::lang::Byte::J2CPP_FIELD_NAME(1),
	java::lang::Byte::J2CPP_FIELD_SIGNATURE(1),
	jbyte
> java::lang::Byte::MIN_VALUE;

static_field<
	java::lang::Byte::J2CPP_CLASS_NAME,
	java::lang::Byte::J2CPP_FIELD_NAME(2),
	java::lang::Byte::J2CPP_FIELD_SIGNATURE(2),
	jint
> java::lang::Byte::SIZE;

static_field<
	java::lang::Byte::J2CPP_CLASS_NAME,
	java::lang::Byte::J2CPP_FIELD_NAME(3),
	java::lang::Byte::J2CPP_FIELD_SIGNATURE(3),
	local_ref< java::lang::Class >
> java::lang::Byte::TYPE;


J2CPP_DEFINE_CLASS(java::lang::Byte,"java/lang/Byte")
J2CPP_DEFINE_METHOD(java::lang::Byte,0,"<init>","(B)V")
J2CPP_DEFINE_METHOD(java::lang::Byte,1,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::lang::Byte,2,"byteValue","()B")
J2CPP_DEFINE_METHOD(java::lang::Byte,3,"compareTo","(Ljava/lang/Byte;)I")
J2CPP_DEFINE_METHOD(java::lang::Byte,4,"decode","(Ljava/lang/String;)Ljava/lang/Byte;")
J2CPP_DEFINE_METHOD(java::lang::Byte,5,"doubleValue","()D")
J2CPP_DEFINE_METHOD(java::lang::Byte,6,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::lang::Byte,7,"floatValue","()F")
J2CPP_DEFINE_METHOD(java::lang::Byte,8,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::lang::Byte,9,"intValue","()I")
J2CPP_DEFINE_METHOD(java::lang::Byte,10,"longValue","()J")
J2CPP_DEFINE_METHOD(java::lang::Byte,11,"parseByte","(Ljava/lang/String;)B")
J2CPP_DEFINE_METHOD(java::lang::Byte,12,"parseByte","(Ljava/lang/String;I)B")
J2CPP_DEFINE_METHOD(java::lang::Byte,13,"shortValue","()S")
J2CPP_DEFINE_METHOD(java::lang::Byte,14,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::Byte,15,"toString","(B)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::Byte,16,"valueOf","(Ljava/lang/String;)Ljava/lang/Byte;")
J2CPP_DEFINE_METHOD(java::lang::Byte,17,"valueOf","(Ljava/lang/String;I)Ljava/lang/Byte;")
J2CPP_DEFINE_METHOD(java::lang::Byte,18,"valueOf","(B)Ljava/lang/Byte;")
J2CPP_DEFINE_METHOD(java::lang::Byte,19,"compareTo","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(java::lang::Byte,20,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::lang::Byte,0,"MAX_VALUE","B")
J2CPP_DEFINE_FIELD(java::lang::Byte,1,"MIN_VALUE","B")
J2CPP_DEFINE_FIELD(java::lang::Byte,2,"SIZE","I")
J2CPP_DEFINE_FIELD(java::lang::Byte,3,"TYPE","Ljava/lang/Class;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_BYTE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

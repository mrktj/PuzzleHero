/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.lang.reflect.Constructor
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_CONSTRUCTOR_HPP_DECL
#define J2CPP_JAVA_LANG_REFLECT_CONSTRUCTOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { namespace annotation { class Annotation; } } } }
namespace j2cpp { namespace java { namespace lang { namespace reflect { class TypeVariable; } } } }
namespace j2cpp { namespace java { namespace lang { namespace reflect { class Member; } } } }
namespace j2cpp { namespace java { namespace lang { namespace reflect { class AnnotatedElement; } } } }
namespace j2cpp { namespace java { namespace lang { namespace reflect { class Type; } } } }
namespace j2cpp { namespace java { namespace lang { namespace reflect { class GenericDeclaration; } } } }
namespace j2cpp { namespace java { namespace lang { namespace reflect { class AccessibleObject; } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Class.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/annotation/Annotation.hpp>
#include <java/lang/reflect/AccessibleObject.hpp>
#include <java/lang/reflect/AnnotatedElement.hpp>
#include <java/lang/reflect/GenericDeclaration.hpp>
#include <java/lang/reflect/Member.hpp>
#include <java/lang/reflect/Type.hpp>
#include <java/lang/reflect/TypeVariable.hpp>


namespace j2cpp {

namespace java { namespace lang { namespace reflect {

	class Constructor;
	class Constructor
		: public object<Constructor>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)

		explicit Constructor(jobject jobj)
		: object<Constructor>(jobj)
		{
		}

		operator local_ref<java::lang::reflect::Member>() const;
		operator local_ref<java::lang::reflect::AnnotatedElement>() const;
		operator local_ref<java::lang::reflect::GenericDeclaration>() const;
		operator local_ref<java::lang::reflect::AccessibleObject>() const;
		operator local_ref<java::lang::Object>() const;


		local_ref< array< local_ref< java::lang::reflect::TypeVariable >, 1> > getTypeParameters();
		local_ref< java::lang::String > toGenericString();
		local_ref< array< local_ref< java::lang::reflect::Type >, 1> > getGenericParameterTypes();
		local_ref< array< local_ref< java::lang::reflect::Type >, 1> > getGenericExceptionTypes();
		local_ref< array< local_ref< java::lang::annotation::Annotation >, 1> > getDeclaredAnnotations();
		local_ref< array< local_ref< java::lang::annotation::Annotation >, 2> > getParameterAnnotations();
		jboolean isVarArgs();
		jboolean isSynthetic();
		jboolean equals(local_ref< java::lang::Object >  const&);
		local_ref< java::lang::Class > getDeclaringClass();
		local_ref< array< local_ref< java::lang::Class >, 1> > getExceptionTypes();
		jint getModifiers();
		local_ref< java::lang::String > getName();
		local_ref< array< local_ref< java::lang::Class >, 1> > getParameterTypes();
		jint hashCode();
		local_ref< java::lang::Object > newInstance(local_ref< array< local_ref< java::lang::Object >, 1> >  const&);
		local_ref< java::lang::String > toString();
	}; //class Constructor

} //namespace reflect
} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_CONSTRUCTOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_REFLECT_CONSTRUCTOR_HPP_IMPL
#define J2CPP_JAVA_LANG_REFLECT_CONSTRUCTOR_HPP_IMPL

namespace j2cpp {



java::lang::reflect::Constructor::operator local_ref<java::lang::reflect::Member>() const
{
	return local_ref<java::lang::reflect::Member>(get_jobject());
}

java::lang::reflect::Constructor::operator local_ref<java::lang::reflect::AnnotatedElement>() const
{
	return local_ref<java::lang::reflect::AnnotatedElement>(get_jobject());
}

java::lang::reflect::Constructor::operator local_ref<java::lang::reflect::GenericDeclaration>() const
{
	return local_ref<java::lang::reflect::GenericDeclaration>(get_jobject());
}

java::lang::reflect::Constructor::operator local_ref<java::lang::reflect::AccessibleObject>() const
{
	return local_ref<java::lang::reflect::AccessibleObject>(get_jobject());
}

java::lang::reflect::Constructor::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


local_ref< array< local_ref< java::lang::reflect::TypeVariable >, 1> > java::lang::reflect::Constructor::getTypeParameters()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(1),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< array< local_ref< java::lang::reflect::TypeVariable >, 1> >
	>(get_jobject());
}

local_ref< java::lang::String > java::lang::reflect::Constructor::toGenericString()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(2),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::reflect::Type >, 1> > java::lang::reflect::Constructor::getGenericParameterTypes()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(3),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< array< local_ref< java::lang::reflect::Type >, 1> >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::reflect::Type >, 1> > java::lang::reflect::Constructor::getGenericExceptionTypes()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(4),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< array< local_ref< java::lang::reflect::Type >, 1> >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::annotation::Annotation >, 1> > java::lang::reflect::Constructor::getDeclaredAnnotations()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(5),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< array< local_ref< java::lang::annotation::Annotation >, 1> >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::annotation::Annotation >, 2> > java::lang::reflect::Constructor::getParameterAnnotations()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(6),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< array< local_ref< java::lang::annotation::Annotation >, 2> >
	>(get_jobject());
}

jboolean java::lang::reflect::Constructor::isVarArgs()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(7),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject());
}

jboolean java::lang::reflect::Constructor::isSynthetic()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(8),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(8), 
		jboolean
	>(get_jobject());
}

jboolean java::lang::reflect::Constructor::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(9),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(9), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< java::lang::Class > java::lang::reflect::Constructor::getDeclaringClass()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(10),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::lang::Class >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::Class >, 1> > java::lang::reflect::Constructor::getExceptionTypes()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(11),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< array< local_ref< java::lang::Class >, 1> >
	>(get_jobject());
}

jint java::lang::reflect::Constructor::getModifiers()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(12),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(12), 
		jint
	>(get_jobject());
}

local_ref< java::lang::String > java::lang::reflect::Constructor::getName()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(13),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(13), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::Class >, 1> > java::lang::reflect::Constructor::getParameterTypes()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(14),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(14), 
		local_ref< array< local_ref< java::lang::Class >, 1> >
	>(get_jobject());
}

jint java::lang::reflect::Constructor::hashCode()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(15),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(15), 
		jint
	>(get_jobject());
}

local_ref< java::lang::Object > java::lang::reflect::Constructor::newInstance(local_ref< array< local_ref< java::lang::Object >, 1> > const &a0)
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(16),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(16), 
		local_ref< java::lang::Object >
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::lang::reflect::Constructor::toString()
{
	return call_method<
		java::lang::reflect::Constructor::J2CPP_CLASS_NAME,
		java::lang::reflect::Constructor::J2CPP_METHOD_NAME(17),
		java::lang::reflect::Constructor::J2CPP_METHOD_SIGNATURE(17), 
		local_ref< java::lang::String >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::lang::reflect::Constructor,"java/lang/reflect/Constructor")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,1,"getTypeParameters","()[java.lang.reflect.TypeVariable")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,2,"toGenericString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,3,"getGenericParameterTypes","()[java.lang.reflect.Type")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,4,"getGenericExceptionTypes","()[java.lang.reflect.Type")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,5,"getDeclaredAnnotations","()[java.lang.annotation.Annotation")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,6,"getParameterAnnotations","()[[java.lang.annotation.Annotation")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,7,"isVarArgs","()Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,8,"isSynthetic","()Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,9,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,10,"getDeclaringClass","()Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,11,"getExceptionTypes","()[java.lang.Class")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,12,"getModifiers","()I")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,13,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,14,"getParameterTypes","()[java.lang.Class")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,15,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,16,"newInstance","([java.lang.Object)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::lang::reflect::Constructor,17,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_REFLECT_CONSTRUCTOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

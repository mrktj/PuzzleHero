/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.lang.Process
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_PROCESS_HPP_DECL
#define J2CPP_JAVA_LANG_PROCESS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/InputStream.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace lang {

	class Process;
	class Process
		: public object<Process>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		explicit Process(jobject jobj)
		: object<Process>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		Process();
		void destroy();
		jint exitValue();
		local_ref< java::io::InputStream > getErrorStream();
		local_ref< java::io::InputStream > getInputStream();
		local_ref< java::io::OutputStream > getOutputStream();
		jint waitFor();
	}; //class Process

} //namespace lang
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_PROCESS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_LANG_PROCESS_HPP_IMPL
#define J2CPP_JAVA_LANG_PROCESS_HPP_IMPL

namespace j2cpp {



java::lang::Process::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::lang::Process::Process()
: object<java::lang::Process>(
	call_new_object<
		java::lang::Process::J2CPP_CLASS_NAME,
		java::lang::Process::J2CPP_METHOD_NAME(0),
		java::lang::Process::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


void java::lang::Process::destroy()
{
	return call_method<
		java::lang::Process::J2CPP_CLASS_NAME,
		java::lang::Process::J2CPP_METHOD_NAME(1),
		java::lang::Process::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject());
}

jint java::lang::Process::exitValue()
{
	return call_method<
		java::lang::Process::J2CPP_CLASS_NAME,
		java::lang::Process::J2CPP_METHOD_NAME(2),
		java::lang::Process::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(get_jobject());
}

local_ref< java::io::InputStream > java::lang::Process::getErrorStream()
{
	return call_method<
		java::lang::Process::J2CPP_CLASS_NAME,
		java::lang::Process::J2CPP_METHOD_NAME(3),
		java::lang::Process::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::io::InputStream >
	>(get_jobject());
}

local_ref< java::io::InputStream > java::lang::Process::getInputStream()
{
	return call_method<
		java::lang::Process::J2CPP_CLASS_NAME,
		java::lang::Process::J2CPP_METHOD_NAME(4),
		java::lang::Process::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::io::InputStream >
	>(get_jobject());
}

local_ref< java::io::OutputStream > java::lang::Process::getOutputStream()
{
	return call_method<
		java::lang::Process::J2CPP_CLASS_NAME,
		java::lang::Process::J2CPP_METHOD_NAME(5),
		java::lang::Process::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::io::OutputStream >
	>(get_jobject());
}

jint java::lang::Process::waitFor()
{
	return call_method<
		java::lang::Process::J2CPP_CLASS_NAME,
		java::lang::Process::J2CPP_METHOD_NAME(6),
		java::lang::Process::J2CPP_METHOD_SIGNATURE(6), 
		jint
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::lang::Process,"java/lang/Process")
J2CPP_DEFINE_METHOD(java::lang::Process,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::lang::Process,1,"destroy","()V")
J2CPP_DEFINE_METHOD(java::lang::Process,2,"exitValue","()I")
J2CPP_DEFINE_METHOD(java::lang::Process,3,"getErrorStream","()Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::lang::Process,4,"getInputStream","()Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::lang::Process,5,"getOutputStream","()Ljava/io/OutputStream;")
J2CPP_DEFINE_METHOD(java::lang::Process,6,"waitFor","()I")

} //namespace j2cpp

#endif //J2CPP_JAVA_LANG_PROCESS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

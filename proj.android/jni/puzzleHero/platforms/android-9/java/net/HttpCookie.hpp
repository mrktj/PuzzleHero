/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.net.HttpCookie
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_HTTPCOOKIE_HPP_DECL
#define J2CPP_JAVA_NET_HTTPCOOKIE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Cloneable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class List; } } }


#include <java/lang/Cloneable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/List.hpp>


namespace j2cpp {

namespace java { namespace net {

	class HttpCookie;
	class HttpCookie
		: public object<HttpCookie>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)

		explicit HttpCookie(jobject jobj)
		: object<HttpCookie>(jobj)
		{
		}

		operator local_ref<java::lang::Cloneable>() const;
		operator local_ref<java::lang::Object>() const;


		HttpCookie(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&);
		static jboolean domainMatches(local_ref< java::lang::String >  const&, local_ref< java::lang::String >  const&);
		static local_ref< java::util::List > parse(local_ref< java::lang::String >  const&);
		local_ref< java::lang::String > getComment();
		local_ref< java::lang::String > getCommentURL();
		jboolean getDiscard();
		local_ref< java::lang::String > getDomain();
		jlong getMaxAge();
		local_ref< java::lang::String > getName();
		local_ref< java::lang::String > getPath();
		local_ref< java::lang::String > getPortlist();
		jboolean getSecure();
		local_ref< java::lang::String > getValue();
		jint getVersion();
		jboolean hasExpired();
		void setComment(local_ref< java::lang::String >  const&);
		void setCommentURL(local_ref< java::lang::String >  const&);
		void setDiscard(jboolean);
		void setDomain(local_ref< java::lang::String >  const&);
		void setMaxAge(jlong);
		void setPath(local_ref< java::lang::String >  const&);
		void setPortlist(local_ref< java::lang::String >  const&);
		void setSecure(jboolean);
		void setValue(local_ref< java::lang::String >  const&);
		void setVersion(jint);
		local_ref< java::lang::Object > clone();
		jboolean equals(local_ref< java::lang::Object >  const&);
		jint hashCode();
		local_ref< java::lang::String > toString();
	}; //class HttpCookie

} //namespace net
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_HTTPCOOKIE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NET_HTTPCOOKIE_HPP_IMPL
#define J2CPP_JAVA_NET_HTTPCOOKIE_HPP_IMPL

namespace j2cpp {



java::net::HttpCookie::operator local_ref<java::lang::Cloneable>() const
{
	return local_ref<java::lang::Cloneable>(get_jobject());
}

java::net::HttpCookie::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::net::HttpCookie::HttpCookie(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
: object<java::net::HttpCookie>(
	call_new_object<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(0),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1)
)
{
}


jboolean java::net::HttpCookie::domainMatches(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return call_static_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(1),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(1), 
		jboolean
	>(a0, a1);
}

local_ref< java::util::List > java::net::HttpCookie::parse(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(2),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::util::List >
	>(a0);
}

local_ref< java::lang::String > java::net::HttpCookie::getComment()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(3),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::net::HttpCookie::getCommentURL()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(4),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean java::net::HttpCookie::getDiscard()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(5),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(5), 
		jboolean
	>(get_jobject());
}

local_ref< java::lang::String > java::net::HttpCookie::getDomain()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(6),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jlong java::net::HttpCookie::getMaxAge()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(7),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(7), 
		jlong
	>(get_jobject());
}

local_ref< java::lang::String > java::net::HttpCookie::getName()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(8),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::net::HttpCookie::getPath()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(9),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::net::HttpCookie::getPortlist()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(10),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean java::net::HttpCookie::getSecure()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(11),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(11), 
		jboolean
	>(get_jobject());
}

local_ref< java::lang::String > java::net::HttpCookie::getValue()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(12),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(12), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint java::net::HttpCookie::getVersion()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(13),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(13), 
		jint
	>(get_jobject());
}

jboolean java::net::HttpCookie::hasExpired()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(14),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(14), 
		jboolean
	>(get_jobject());
}

void java::net::HttpCookie::setComment(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(15),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(15), 
		void
	>(get_jobject(), a0);
}

void java::net::HttpCookie::setCommentURL(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(16),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(16), 
		void
	>(get_jobject(), a0);
}

void java::net::HttpCookie::setDiscard(jboolean a0)
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(17),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(17), 
		void
	>(get_jobject(), a0);
}

void java::net::HttpCookie::setDomain(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(18),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(18), 
		void
	>(get_jobject(), a0);
}

void java::net::HttpCookie::setMaxAge(jlong a0)
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(19),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(19), 
		void
	>(get_jobject(), a0);
}

void java::net::HttpCookie::setPath(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(20),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(20), 
		void
	>(get_jobject(), a0);
}

void java::net::HttpCookie::setPortlist(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(21),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(21), 
		void
	>(get_jobject(), a0);
}

void java::net::HttpCookie::setSecure(jboolean a0)
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(22),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(22), 
		void
	>(get_jobject(), a0);
}

void java::net::HttpCookie::setValue(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(23),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(23), 
		void
	>(get_jobject(), a0);
}

void java::net::HttpCookie::setVersion(jint a0)
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(24),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(24), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::Object > java::net::HttpCookie::clone()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(25),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(25), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jboolean java::net::HttpCookie::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(26),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(26), 
		jboolean
	>(get_jobject(), a0);
}

jint java::net::HttpCookie::hashCode()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(27),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(27), 
		jint
	>(get_jobject());
}

local_ref< java::lang::String > java::net::HttpCookie::toString()
{
	return call_method<
		java::net::HttpCookie::J2CPP_CLASS_NAME,
		java::net::HttpCookie::J2CPP_METHOD_NAME(28),
		java::net::HttpCookie::J2CPP_METHOD_SIGNATURE(28), 
		local_ref< java::lang::String >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::net::HttpCookie,"java/net/HttpCookie")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,0,"<init>","(Ljava/lang/String;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,1,"domainMatches","(Ljava/lang/String;Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,2,"parse","(Ljava/lang/String;)Ljava/util/List;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,3,"getComment","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,4,"getCommentURL","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,5,"getDiscard","()Z")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,6,"getDomain","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,7,"getMaxAge","()J")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,8,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,9,"getPath","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,10,"getPortlist","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,11,"getSecure","()Z")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,12,"getValue","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,13,"getVersion","()I")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,14,"hasExpired","()Z")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,15,"setComment","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,16,"setCommentURL","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,17,"setDiscard","(Z)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,18,"setDomain","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,19,"setMaxAge","(J)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,20,"setPath","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,21,"setPortlist","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,22,"setSecure","(Z)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,23,"setValue","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,24,"setVersion","(I)V")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,25,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,26,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,27,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::net::HttpCookie,28,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_NET_HTTPCOOKIE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

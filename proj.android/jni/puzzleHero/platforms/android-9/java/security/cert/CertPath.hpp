/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.security.cert.CertPath
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_CERTPATH_HPP_DECL
#define J2CPP_JAVA_SECURITY_CERT_CERTPATH_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }
namespace j2cpp { namespace java { namespace util { class List; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/List.hpp>


namespace j2cpp {

namespace java { namespace security { namespace cert {

	class CertPath;
	namespace CertPath_ {

		class CertPathRep;
		class CertPathRep
			: public object<CertPathRep>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			explicit CertPathRep(jobject jobj)
			: object<CertPathRep>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::io::Serializable>() const;


		}; //class CertPathRep

	} //namespace CertPath_

	class CertPath
		: public object<CertPath>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)

		typedef CertPath_::CertPathRep CertPathRep;

		explicit CertPath(jobject jobj)
		: object<CertPath>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		local_ref< java::lang::String > getType();
		jboolean equals(local_ref< java::lang::Object >  const&);
		jint hashCode();
		local_ref< java::lang::String > toString();
		local_ref< java::util::List > getCertificates();
		local_ref< array<jbyte,1> > getEncoded();
		local_ref< array<jbyte,1> > getEncoded(local_ref< java::lang::String >  const&);
		local_ref< java::util::Iterator > getEncodings();
	}; //class CertPath

} //namespace cert
} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_CERTPATH_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_CERTPATH_HPP_IMPL
#define J2CPP_JAVA_SECURITY_CERT_CERTPATH_HPP_IMPL

namespace j2cpp {




java::security::cert::CertPath_::CertPathRep::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::security::cert::CertPath_::CertPathRep::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}




J2CPP_DEFINE_CLASS(java::security::cert::CertPath_::CertPathRep,"java/security/cert/CertPath$CertPathRep")
J2CPP_DEFINE_METHOD(java::security::cert::CertPath_::CertPathRep,0,"<init>","(Ljava/lang/String;[B)V")
J2CPP_DEFINE_METHOD(java::security::cert::CertPath_::CertPathRep,1,"readResolve","()Ljava/lang/Object;")



java::security::cert::CertPath::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::security::cert::CertPath::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


local_ref< java::lang::String > java::security::cert::CertPath::getType()
{
	return call_method<
		java::security::cert::CertPath::J2CPP_CLASS_NAME,
		java::security::cert::CertPath::J2CPP_METHOD_NAME(1),
		java::security::cert::CertPath::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean java::security::cert::CertPath::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::security::cert::CertPath::J2CPP_CLASS_NAME,
		java::security::cert::CertPath::J2CPP_METHOD_NAME(2),
		java::security::cert::CertPath::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(get_jobject(), a0);
}

jint java::security::cert::CertPath::hashCode()
{
	return call_method<
		java::security::cert::CertPath::J2CPP_CLASS_NAME,
		java::security::cert::CertPath::J2CPP_METHOD_NAME(3),
		java::security::cert::CertPath::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(get_jobject());
}

local_ref< java::lang::String > java::security::cert::CertPath::toString()
{
	return call_method<
		java::security::cert::CertPath::J2CPP_CLASS_NAME,
		java::security::cert::CertPath::J2CPP_METHOD_NAME(4),
		java::security::cert::CertPath::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::util::List > java::security::cert::CertPath::getCertificates()
{
	return call_method<
		java::security::cert::CertPath::J2CPP_CLASS_NAME,
		java::security::cert::CertPath::J2CPP_METHOD_NAME(5),
		java::security::cert::CertPath::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::util::List >
	>(get_jobject());
}

local_ref< array<jbyte,1> > java::security::cert::CertPath::getEncoded()
{
	return call_method<
		java::security::cert::CertPath::J2CPP_CLASS_NAME,
		java::security::cert::CertPath::J2CPP_METHOD_NAME(6),
		java::security::cert::CertPath::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< array<jbyte,1> >
	>(get_jobject());
}

local_ref< array<jbyte,1> > java::security::cert::CertPath::getEncoded(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::security::cert::CertPath::J2CPP_CLASS_NAME,
		java::security::cert::CertPath::J2CPP_METHOD_NAME(7),
		java::security::cert::CertPath::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< array<jbyte,1> >
	>(get_jobject(), a0);
}

local_ref< java::util::Iterator > java::security::cert::CertPath::getEncodings()
{
	return call_method<
		java::security::cert::CertPath::J2CPP_CLASS_NAME,
		java::security::cert::CertPath::J2CPP_METHOD_NAME(8),
		java::security::cert::CertPath::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::util::Iterator >
	>(get_jobject());
}



J2CPP_DEFINE_CLASS(java::security::cert::CertPath,"java/security/cert/CertPath")
J2CPP_DEFINE_METHOD(java::security::cert::CertPath,0,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::security::cert::CertPath,1,"getType","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::cert::CertPath,2,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::security::cert::CertPath,3,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::security::cert::CertPath,4,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::cert::CertPath,5,"getCertificates","()Ljava/util/List;")
J2CPP_DEFINE_METHOD(java::security::cert::CertPath,6,"getEncoded","()[B")
J2CPP_DEFINE_METHOD(java::security::cert::CertPath,7,"getEncoded","(Ljava/lang/String;)[B")
J2CPP_DEFINE_METHOD(java::security::cert::CertPath,8,"getEncodings","()Ljava/util/Iterator;")
J2CPP_DEFINE_METHOD(java::security::cert::CertPath,9,"writeReplace","()Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_CERTPATH_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

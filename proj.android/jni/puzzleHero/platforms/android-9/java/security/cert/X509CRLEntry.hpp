/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.security.cert.X509CRLEntry
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_X509CRLENTRY_HPP_DECL
#define J2CPP_JAVA_SECURITY_CERT_X509CRLENTRY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace javax { namespace security { namespace auth { namespace x500 { class X500Principal; } } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class X509Extension; } } } }
namespace j2cpp { namespace java { namespace util { class Date; } } }
namespace j2cpp { namespace java { namespace math { class BigInteger; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/math/BigInteger.hpp>
#include <java/security/cert/X509Extension.hpp>
#include <java/util/Date.hpp>
#include <javax/security/auth/x500/X500Principal.hpp>


namespace j2cpp {

namespace java { namespace security { namespace cert {

	class X509CRLEntry;
	class X509CRLEntry
		: public object<X509CRLEntry>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit X509CRLEntry(jobject jobj)
		: object<X509CRLEntry>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::security::cert::X509Extension>() const;


		X509CRLEntry();
		jboolean equals(local_ref< java::lang::Object >  const&);
		jint hashCode();
		local_ref< array<jbyte,1> > getEncoded();
		local_ref< java::math::BigInteger > getSerialNumber();
		local_ref< javax::security::auth::x500::X500Principal > getCertificateIssuer();
		local_ref< java::util::Date > getRevocationDate();
		jboolean hasExtensions();
		local_ref< java::lang::String > toString();
	}; //class X509CRLEntry

} //namespace cert
} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_X509CRLENTRY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_X509CRLENTRY_HPP_IMPL
#define J2CPP_JAVA_SECURITY_CERT_X509CRLENTRY_HPP_IMPL

namespace j2cpp {



java::security::cert::X509CRLEntry::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::security::cert::X509CRLEntry::operator local_ref<java::security::cert::X509Extension>() const
{
	return local_ref<java::security::cert::X509Extension>(get_jobject());
}


java::security::cert::X509CRLEntry::X509CRLEntry()
: object<java::security::cert::X509CRLEntry>(
	call_new_object<
		java::security::cert::X509CRLEntry::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLEntry::J2CPP_METHOD_NAME(0),
		java::security::cert::X509CRLEntry::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


jboolean java::security::cert::X509CRLEntry::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::security::cert::X509CRLEntry::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLEntry::J2CPP_METHOD_NAME(1),
		java::security::cert::X509CRLEntry::J2CPP_METHOD_SIGNATURE(1), 
		jboolean
	>(get_jobject(), a0);
}

jint java::security::cert::X509CRLEntry::hashCode()
{
	return call_method<
		java::security::cert::X509CRLEntry::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLEntry::J2CPP_METHOD_NAME(2),
		java::security::cert::X509CRLEntry::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(get_jobject());
}

local_ref< array<jbyte,1> > java::security::cert::X509CRLEntry::getEncoded()
{
	return call_method<
		java::security::cert::X509CRLEntry::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLEntry::J2CPP_METHOD_NAME(3),
		java::security::cert::X509CRLEntry::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< array<jbyte,1> >
	>(get_jobject());
}

local_ref< java::math::BigInteger > java::security::cert::X509CRLEntry::getSerialNumber()
{
	return call_method<
		java::security::cert::X509CRLEntry::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLEntry::J2CPP_METHOD_NAME(4),
		java::security::cert::X509CRLEntry::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::math::BigInteger >
	>(get_jobject());
}

local_ref< javax::security::auth::x500::X500Principal > java::security::cert::X509CRLEntry::getCertificateIssuer()
{
	return call_method<
		java::security::cert::X509CRLEntry::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLEntry::J2CPP_METHOD_NAME(5),
		java::security::cert::X509CRLEntry::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< javax::security::auth::x500::X500Principal >
	>(get_jobject());
}

local_ref< java::util::Date > java::security::cert::X509CRLEntry::getRevocationDate()
{
	return call_method<
		java::security::cert::X509CRLEntry::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLEntry::J2CPP_METHOD_NAME(6),
		java::security::cert::X509CRLEntry::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::util::Date >
	>(get_jobject());
}

jboolean java::security::cert::X509CRLEntry::hasExtensions()
{
	return call_method<
		java::security::cert::X509CRLEntry::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLEntry::J2CPP_METHOD_NAME(7),
		java::security::cert::X509CRLEntry::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject());
}

local_ref< java::lang::String > java::security::cert::X509CRLEntry::toString()
{
	return call_method<
		java::security::cert::X509CRLEntry::J2CPP_CLASS_NAME,
		java::security::cert::X509CRLEntry::J2CPP_METHOD_NAME(8),
		java::security::cert::X509CRLEntry::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::lang::String >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::security::cert::X509CRLEntry,"java/security/cert/X509CRLEntry")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLEntry,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLEntry,1,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLEntry,2,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLEntry,3,"getEncoded","()[B")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLEntry,4,"getSerialNumber","()Ljava/math/BigInteger;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLEntry,5,"getCertificateIssuer","()Ljavax/security/auth/x500/X500Principal;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLEntry,6,"getRevocationDate","()Ljava/util/Date;")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLEntry,7,"hasExtensions","()Z")
J2CPP_DEFINE_METHOD(java::security::cert::X509CRLEntry,8,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_X509CRLENTRY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

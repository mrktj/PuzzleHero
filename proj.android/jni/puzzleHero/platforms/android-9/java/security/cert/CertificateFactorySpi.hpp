/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.security.cert.CertificateFactorySpi
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_CERTIFICATEFACTORYSPI_HPP_DECL
#define J2CPP_JAVA_SECURITY_CERT_CERTIFICATEFACTORYSPI_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class CertPath; } } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class Certificate; } } } }
namespace j2cpp { namespace java { namespace security { namespace cert { class CRL; } } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { class List; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }


#include <java/io/InputStream.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/security/cert/CRL.hpp>
#include <java/security/cert/CertPath.hpp>
#include <java/security/cert/Certificate.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/List.hpp>


namespace j2cpp {

namespace java { namespace security { namespace cert {

	class CertificateFactorySpi;
	class CertificateFactorySpi
		: public object<CertificateFactorySpi>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit CertificateFactorySpi(jobject jobj)
		: object<CertificateFactorySpi>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		CertificateFactorySpi();
		local_ref< java::security::cert::Certificate > engineGenerateCertificate(local_ref< java::io::InputStream >  const&);
		local_ref< java::util::Collection > engineGenerateCertificates(local_ref< java::io::InputStream >  const&);
		local_ref< java::security::cert::CRL > engineGenerateCRL(local_ref< java::io::InputStream >  const&);
		local_ref< java::util::Collection > engineGenerateCRLs(local_ref< java::io::InputStream >  const&);
		local_ref< java::security::cert::CertPath > engineGenerateCertPath(local_ref< java::io::InputStream >  const&);
		local_ref< java::security::cert::CertPath > engineGenerateCertPath(local_ref< java::io::InputStream >  const&, local_ref< java::lang::String >  const&);
		local_ref< java::security::cert::CertPath > engineGenerateCertPath(local_ref< java::util::List >  const&);
		local_ref< java::util::Iterator > engineGetCertPathEncodings();
	}; //class CertificateFactorySpi

} //namespace cert
} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_CERTIFICATEFACTORYSPI_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_CERT_CERTIFICATEFACTORYSPI_HPP_IMPL
#define J2CPP_JAVA_SECURITY_CERT_CERTIFICATEFACTORYSPI_HPP_IMPL

namespace j2cpp {



java::security::cert::CertificateFactorySpi::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::security::cert::CertificateFactorySpi::CertificateFactorySpi()
: object<java::security::cert::CertificateFactorySpi>(
	call_new_object<
		java::security::cert::CertificateFactorySpi::J2CPP_CLASS_NAME,
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_NAME(0),
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


local_ref< java::security::cert::Certificate > java::security::cert::CertificateFactorySpi::engineGenerateCertificate(local_ref< java::io::InputStream > const &a0)
{
	return call_method<
		java::security::cert::CertificateFactorySpi::J2CPP_CLASS_NAME,
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_NAME(1),
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::security::cert::Certificate >
	>(get_jobject(), a0);
}

local_ref< java::util::Collection > java::security::cert::CertificateFactorySpi::engineGenerateCertificates(local_ref< java::io::InputStream > const &a0)
{
	return call_method<
		java::security::cert::CertificateFactorySpi::J2CPP_CLASS_NAME,
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_NAME(2),
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::util::Collection >
	>(get_jobject(), a0);
}

local_ref< java::security::cert::CRL > java::security::cert::CertificateFactorySpi::engineGenerateCRL(local_ref< java::io::InputStream > const &a0)
{
	return call_method<
		java::security::cert::CertificateFactorySpi::J2CPP_CLASS_NAME,
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_NAME(3),
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::security::cert::CRL >
	>(get_jobject(), a0);
}

local_ref< java::util::Collection > java::security::cert::CertificateFactorySpi::engineGenerateCRLs(local_ref< java::io::InputStream > const &a0)
{
	return call_method<
		java::security::cert::CertificateFactorySpi::J2CPP_CLASS_NAME,
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_NAME(4),
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::util::Collection >
	>(get_jobject(), a0);
}

local_ref< java::security::cert::CertPath > java::security::cert::CertificateFactorySpi::engineGenerateCertPath(local_ref< java::io::InputStream > const &a0)
{
	return call_method<
		java::security::cert::CertificateFactorySpi::J2CPP_CLASS_NAME,
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_NAME(5),
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::security::cert::CertPath >
	>(get_jobject(), a0);
}

local_ref< java::security::cert::CertPath > java::security::cert::CertificateFactorySpi::engineGenerateCertPath(local_ref< java::io::InputStream > const &a0, local_ref< java::lang::String > const &a1)
{
	return call_method<
		java::security::cert::CertificateFactorySpi::J2CPP_CLASS_NAME,
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_NAME(6),
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::security::cert::CertPath >
	>(get_jobject(), a0, a1);
}

local_ref< java::security::cert::CertPath > java::security::cert::CertificateFactorySpi::engineGenerateCertPath(local_ref< java::util::List > const &a0)
{
	return call_method<
		java::security::cert::CertificateFactorySpi::J2CPP_CLASS_NAME,
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_NAME(7),
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::security::cert::CertPath >
	>(get_jobject(), a0);
}

local_ref< java::util::Iterator > java::security::cert::CertificateFactorySpi::engineGetCertPathEncodings()
{
	return call_method<
		java::security::cert::CertificateFactorySpi::J2CPP_CLASS_NAME,
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_NAME(8),
		java::security::cert::CertificateFactorySpi::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::util::Iterator >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::security::cert::CertificateFactorySpi,"java/security/cert/CertificateFactorySpi")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactorySpi,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactorySpi,1,"engineGenerateCertificate","(Ljava/io/InputStream;)Ljava/security/cert/Certificate;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactorySpi,2,"engineGenerateCertificates","(Ljava/io/InputStream;)Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactorySpi,3,"engineGenerateCRL","(Ljava/io/InputStream;)Ljava/security/cert/CRL;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactorySpi,4,"engineGenerateCRLs","(Ljava/io/InputStream;)Ljava/util/Collection;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactorySpi,5,"engineGenerateCertPath","(Ljava/io/InputStream;)Ljava/security/cert/CertPath;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactorySpi,6,"engineGenerateCertPath","(Ljava/io/InputStream;Ljava/lang/String;)Ljava/security/cert/CertPath;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactorySpi,7,"engineGenerateCertPath","(Ljava/util/List;)Ljava/security/cert/CertPath;")
J2CPP_DEFINE_METHOD(java::security::cert::CertificateFactorySpi,8,"engineGetCertPathEncodings","()Ljava/util/Iterator;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_CERT_CERTIFICATEFACTORYSPI_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

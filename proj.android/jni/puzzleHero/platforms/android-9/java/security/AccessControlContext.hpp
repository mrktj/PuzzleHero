/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.security.AccessControlContext
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_ACCESSCONTROLCONTEXT_HPP_DECL
#define J2CPP_JAVA_SECURITY_ACCESSCONTROLCONTEXT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { class ProtectionDomain; } } }
namespace j2cpp { namespace java { namespace security { class DomainCombiner; } } }
namespace j2cpp { namespace java { namespace security { class Permission; } } }


#include <java/lang/Object.hpp>
#include <java/security/DomainCombiner.hpp>
#include <java/security/Permission.hpp>
#include <java/security/ProtectionDomain.hpp>


namespace j2cpp {

namespace java { namespace security {

	class AccessControlContext;
	class AccessControlContext
		: public object<AccessControlContext>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		explicit AccessControlContext(jobject jobj)
		: object<AccessControlContext>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		AccessControlContext(local_ref< java::security::AccessControlContext > const&, local_ref< java::security::DomainCombiner > const&);
		AccessControlContext(local_ref< array< local_ref< java::security::ProtectionDomain >, 1> > const&);
		void checkPermission(local_ref< java::security::Permission >  const&);
		jboolean equals(local_ref< java::lang::Object >  const&);
		local_ref< java::security::DomainCombiner > getDomainCombiner();
		jint hashCode();
	}; //class AccessControlContext

} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_ACCESSCONTROLCONTEXT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_ACCESSCONTROLCONTEXT_HPP_IMPL
#define J2CPP_JAVA_SECURITY_ACCESSCONTROLCONTEXT_HPP_IMPL

namespace j2cpp {



java::security::AccessControlContext::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::security::AccessControlContext::AccessControlContext(local_ref< java::security::AccessControlContext > const &a0, local_ref< java::security::DomainCombiner > const &a1)
: object<java::security::AccessControlContext>(
	call_new_object<
		java::security::AccessControlContext::J2CPP_CLASS_NAME,
		java::security::AccessControlContext::J2CPP_METHOD_NAME(0),
		java::security::AccessControlContext::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1)
)
{
}



java::security::AccessControlContext::AccessControlContext(local_ref< array< local_ref< java::security::ProtectionDomain >, 1> > const &a0)
: object<java::security::AccessControlContext>(
	call_new_object<
		java::security::AccessControlContext::J2CPP_CLASS_NAME,
		java::security::AccessControlContext::J2CPP_METHOD_NAME(1),
		java::security::AccessControlContext::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}


void java::security::AccessControlContext::checkPermission(local_ref< java::security::Permission > const &a0)
{
	return call_method<
		java::security::AccessControlContext::J2CPP_CLASS_NAME,
		java::security::AccessControlContext::J2CPP_METHOD_NAME(2),
		java::security::AccessControlContext::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0);
}

jboolean java::security::AccessControlContext::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::security::AccessControlContext::J2CPP_CLASS_NAME,
		java::security::AccessControlContext::J2CPP_METHOD_NAME(3),
		java::security::AccessControlContext::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< java::security::DomainCombiner > java::security::AccessControlContext::getDomainCombiner()
{
	return call_method<
		java::security::AccessControlContext::J2CPP_CLASS_NAME,
		java::security::AccessControlContext::J2CPP_METHOD_NAME(4),
		java::security::AccessControlContext::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::security::DomainCombiner >
	>(get_jobject());
}

jint java::security::AccessControlContext::hashCode()
{
	return call_method<
		java::security::AccessControlContext::J2CPP_CLASS_NAME,
		java::security::AccessControlContext::J2CPP_METHOD_NAME(5),
		java::security::AccessControlContext::J2CPP_METHOD_SIGNATURE(5), 
		jint
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::security::AccessControlContext,"java/security/AccessControlContext")
J2CPP_DEFINE_METHOD(java::security::AccessControlContext,0,"<init>","(Ljava/security/AccessControlContext;Ljava/security/DomainCombiner;)V")
J2CPP_DEFINE_METHOD(java::security::AccessControlContext,1,"<init>","([java.security.ProtectionDomain)V")
J2CPP_DEFINE_METHOD(java::security::AccessControlContext,2,"checkPermission","(Ljava/security/Permission;)V")
J2CPP_DEFINE_METHOD(java::security::AccessControlContext,3,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::security::AccessControlContext,4,"getDomainCombiner","()Ljava/security/DomainCombiner;")
J2CPP_DEFINE_METHOD(java::security::AccessControlContext,5,"hashCode","()I")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_ACCESSCONTROLCONTEXT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

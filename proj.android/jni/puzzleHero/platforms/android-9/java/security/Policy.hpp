/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.security.Policy
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_POLICY_HPP_DECL
#define J2CPP_JAVA_SECURITY_POLICY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { namespace Policy_ { class Parameters; } } } }
namespace j2cpp { namespace java { namespace security { class ProtectionDomain; } } }
namespace j2cpp { namespace java { namespace security { class Permission; } } }
namespace j2cpp { namespace java { namespace security { class PermissionCollection; } } }
namespace j2cpp { namespace java { namespace security { class Provider; } } }
namespace j2cpp { namespace java { namespace security { class CodeSource; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/security/CodeSource.hpp>
#include <java/security/Permission.hpp>
#include <java/security/PermissionCollection.hpp>
#include <java/security/Policy.hpp>
#include <java/security/ProtectionDomain.hpp>
#include <java/security/Provider.hpp>


namespace j2cpp {

namespace java { namespace security {

	class Policy;
	namespace Policy_ {

		class Parameters;
		class Parameters
			: public object<Parameters>
		{
		public:

			J2CPP_DECLARE_CLASS


			explicit Parameters(jobject jobj)
			: object<Parameters>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;

		}; //class Parameters

	} //namespace Policy_

	class Policy
		: public object<Policy>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_FIELD(0)

		typedef Policy_::Parameters Parameters;

		explicit Policy(jobject jobj)
		: object<Policy>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		Policy();
		static local_ref< java::security::Policy > getInstance(local_ref< java::lang::String >  const&, local_ref< java::security::Policy_::Parameters >  const&);
		static local_ref< java::security::Policy > getInstance(local_ref< java::lang::String >  const&, local_ref< java::security::Policy_::Parameters >  const&, local_ref< java::lang::String >  const&);
		static local_ref< java::security::Policy > getInstance(local_ref< java::lang::String >  const&, local_ref< java::security::Policy_::Parameters >  const&, local_ref< java::security::Provider >  const&);
		local_ref< java::security::Policy_::Parameters > getParameters();
		local_ref< java::security::Provider > getProvider();
		local_ref< java::lang::String > getType();
		local_ref< java::security::PermissionCollection > getPermissions(local_ref< java::security::CodeSource >  const&);
		void refresh();
		local_ref< java::security::PermissionCollection > getPermissions(local_ref< java::security::ProtectionDomain >  const&);
		jboolean implies(local_ref< java::security::ProtectionDomain >  const&, local_ref< java::security::Permission >  const&);
		static local_ref< java::security::Policy > getPolicy();
		static void setPolicy(local_ref< java::security::Policy >  const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::security::PermissionCollection > > UNSUPPORTED_EMPTY_COLLECTION;
	}; //class Policy

} //namespace security
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_POLICY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_SECURITY_POLICY_HPP_IMPL
#define J2CPP_JAVA_SECURITY_POLICY_HPP_IMPL

namespace j2cpp {




java::security::Policy_::Parameters::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

J2CPP_DEFINE_CLASS(java::security::Policy_::Parameters,"java/security/Policy$Parameters")



java::security::Policy::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::security::Policy::Policy()
: object<java::security::Policy>(
	call_new_object<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(0),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


local_ref< java::security::Policy > java::security::Policy::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::security::Policy_::Parameters > const &a1)
{
	return call_static_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(1),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::security::Policy >
	>(a0, a1);
}

local_ref< java::security::Policy > java::security::Policy::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::security::Policy_::Parameters > const &a1, local_ref< java::lang::String > const &a2)
{
	return call_static_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(2),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::security::Policy >
	>(a0, a1, a2);
}

local_ref< java::security::Policy > java::security::Policy::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::security::Policy_::Parameters > const &a1, local_ref< java::security::Provider > const &a2)
{
	return call_static_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(3),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::security::Policy >
	>(a0, a1, a2);
}

local_ref< java::security::Policy_::Parameters > java::security::Policy::getParameters()
{
	return call_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(4),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::security::Policy_::Parameters >
	>(get_jobject());
}

local_ref< java::security::Provider > java::security::Policy::getProvider()
{
	return call_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(5),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::security::Provider >
	>(get_jobject());
}

local_ref< java::lang::String > java::security::Policy::getType()
{
	return call_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(6),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::security::PermissionCollection > java::security::Policy::getPermissions(local_ref< java::security::CodeSource > const &a0)
{
	return call_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(7),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::security::PermissionCollection >
	>(get_jobject(), a0);
}

void java::security::Policy::refresh()
{
	return call_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(8),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject());
}

local_ref< java::security::PermissionCollection > java::security::Policy::getPermissions(local_ref< java::security::ProtectionDomain > const &a0)
{
	return call_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(9),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::security::PermissionCollection >
	>(get_jobject(), a0);
}

jboolean java::security::Policy::implies(local_ref< java::security::ProtectionDomain > const &a0, local_ref< java::security::Permission > const &a1)
{
	return call_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(10),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(10), 
		jboolean
	>(get_jobject(), a0, a1);
}

local_ref< java::security::Policy > java::security::Policy::getPolicy()
{
	return call_static_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(11),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< java::security::Policy >
	>();
}

void java::security::Policy::setPolicy(local_ref< java::security::Policy > const &a0)
{
	return call_static_method<
		java::security::Policy::J2CPP_CLASS_NAME,
		java::security::Policy::J2CPP_METHOD_NAME(12),
		java::security::Policy::J2CPP_METHOD_SIGNATURE(12), 
		void
	>(a0);
}



static_field<
	java::security::Policy::J2CPP_CLASS_NAME,
	java::security::Policy::J2CPP_FIELD_NAME(0),
	java::security::Policy::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::security::PermissionCollection >
> java::security::Policy::UNSUPPORTED_EMPTY_COLLECTION;


J2CPP_DEFINE_CLASS(java::security::Policy,"java/security/Policy")
J2CPP_DEFINE_METHOD(java::security::Policy,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::security::Policy,1,"getInstance","(Ljava/lang/String;Ljava/security/Policy$Parameters;)Ljava/security/Policy;")
J2CPP_DEFINE_METHOD(java::security::Policy,2,"getInstance","(Ljava/lang/String;Ljava/security/Policy$Parameters;Ljava/lang/String;)Ljava/security/Policy;")
J2CPP_DEFINE_METHOD(java::security::Policy,3,"getInstance","(Ljava/lang/String;Ljava/security/Policy$Parameters;Ljava/security/Provider;)Ljava/security/Policy;")
J2CPP_DEFINE_METHOD(java::security::Policy,4,"getParameters","()Ljava/security/Policy$Parameters;")
J2CPP_DEFINE_METHOD(java::security::Policy,5,"getProvider","()Ljava/security/Provider;")
J2CPP_DEFINE_METHOD(java::security::Policy,6,"getType","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::security::Policy,7,"getPermissions","(Ljava/security/CodeSource;)Ljava/security/PermissionCollection;")
J2CPP_DEFINE_METHOD(java::security::Policy,8,"refresh","()V")
J2CPP_DEFINE_METHOD(java::security::Policy,9,"getPermissions","(Ljava/security/ProtectionDomain;)Ljava/security/PermissionCollection;")
J2CPP_DEFINE_METHOD(java::security::Policy,10,"implies","(Ljava/security/ProtectionDomain;Ljava/security/Permission;)Z")
J2CPP_DEFINE_METHOD(java::security::Policy,11,"getPolicy","()Ljava/security/Policy;")
J2CPP_DEFINE_METHOD(java::security::Policy,12,"setPolicy","(Ljava/security/Policy;)V")
J2CPP_DEFINE_METHOD(java::security::Policy,13,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::security::Policy,0,"UNSUPPORTED_EMPTY_COLLECTION","Ljava/security/PermissionCollection;")

} //namespace j2cpp

#endif //J2CPP_JAVA_SECURITY_POLICY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

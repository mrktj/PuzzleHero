/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.text.CollationElementIterator
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_COLLATIONELEMENTITERATOR_HPP_DECL
#define J2CPP_JAVA_TEXT_COLLATIONELEMENTITERATOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace text { class CharacterIterator; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/text/CharacterIterator.hpp>


namespace j2cpp {

namespace java { namespace text {

	class CollationElementIterator;
	class CollationElementIterator
		: public object<CollationElementIterator>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_FIELD(0)

		explicit CollationElementIterator(jobject jobj)
		: object<CollationElementIterator>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		jint getMaxExpansion(jint);
		jint getOffset();
		jint next();
		jint previous();
		static jint primaryOrder(jint);
		void reset();
		static jshort secondaryOrder(jint);
		void setOffset(jint);
		void setText(local_ref< java::text::CharacterIterator >  const&);
		void setText(local_ref< java::lang::String >  const&);
		static jshort tertiaryOrder(jint);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > NULLORDER;
	}; //class CollationElementIterator

} //namespace text
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_COLLATIONELEMENTITERATOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_COLLATIONELEMENTITERATOR_HPP_IMPL
#define J2CPP_JAVA_TEXT_COLLATIONELEMENTITERATOR_HPP_IMPL

namespace j2cpp {



java::text::CollationElementIterator::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


jint java::text::CollationElementIterator::getMaxExpansion(jint a0)
{
	return call_method<
		java::text::CollationElementIterator::J2CPP_CLASS_NAME,
		java::text::CollationElementIterator::J2CPP_METHOD_NAME(1),
		java::text::CollationElementIterator::J2CPP_METHOD_SIGNATURE(1), 
		jint
	>(get_jobject(), a0);
}

jint java::text::CollationElementIterator::getOffset()
{
	return call_method<
		java::text::CollationElementIterator::J2CPP_CLASS_NAME,
		java::text::CollationElementIterator::J2CPP_METHOD_NAME(2),
		java::text::CollationElementIterator::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(get_jobject());
}

jint java::text::CollationElementIterator::next()
{
	return call_method<
		java::text::CollationElementIterator::J2CPP_CLASS_NAME,
		java::text::CollationElementIterator::J2CPP_METHOD_NAME(3),
		java::text::CollationElementIterator::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(get_jobject());
}

jint java::text::CollationElementIterator::previous()
{
	return call_method<
		java::text::CollationElementIterator::J2CPP_CLASS_NAME,
		java::text::CollationElementIterator::J2CPP_METHOD_NAME(4),
		java::text::CollationElementIterator::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject());
}

jint java::text::CollationElementIterator::primaryOrder(jint a0)
{
	return call_static_method<
		java::text::CollationElementIterator::J2CPP_CLASS_NAME,
		java::text::CollationElementIterator::J2CPP_METHOD_NAME(5),
		java::text::CollationElementIterator::J2CPP_METHOD_SIGNATURE(5), 
		jint
	>(a0);
}

void java::text::CollationElementIterator::reset()
{
	return call_method<
		java::text::CollationElementIterator::J2CPP_CLASS_NAME,
		java::text::CollationElementIterator::J2CPP_METHOD_NAME(6),
		java::text::CollationElementIterator::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject());
}

jshort java::text::CollationElementIterator::secondaryOrder(jint a0)
{
	return call_static_method<
		java::text::CollationElementIterator::J2CPP_CLASS_NAME,
		java::text::CollationElementIterator::J2CPP_METHOD_NAME(7),
		java::text::CollationElementIterator::J2CPP_METHOD_SIGNATURE(7), 
		jshort
	>(a0);
}

void java::text::CollationElementIterator::setOffset(jint a0)
{
	return call_method<
		java::text::CollationElementIterator::J2CPP_CLASS_NAME,
		java::text::CollationElementIterator::J2CPP_METHOD_NAME(8),
		java::text::CollationElementIterator::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}

void java::text::CollationElementIterator::setText(local_ref< java::text::CharacterIterator > const &a0)
{
	return call_method<
		java::text::CollationElementIterator::J2CPP_CLASS_NAME,
		java::text::CollationElementIterator::J2CPP_METHOD_NAME(9),
		java::text::CollationElementIterator::J2CPP_METHOD_SIGNATURE(9), 
		void
	>(get_jobject(), a0);
}

void java::text::CollationElementIterator::setText(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::text::CollationElementIterator::J2CPP_CLASS_NAME,
		java::text::CollationElementIterator::J2CPP_METHOD_NAME(10),
		java::text::CollationElementIterator::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject(), a0);
}

jshort java::text::CollationElementIterator::tertiaryOrder(jint a0)
{
	return call_static_method<
		java::text::CollationElementIterator::J2CPP_CLASS_NAME,
		java::text::CollationElementIterator::J2CPP_METHOD_NAME(11),
		java::text::CollationElementIterator::J2CPP_METHOD_SIGNATURE(11), 
		jshort
	>(a0);
}


static_field<
	java::text::CollationElementIterator::J2CPP_CLASS_NAME,
	java::text::CollationElementIterator::J2CPP_FIELD_NAME(0),
	java::text::CollationElementIterator::J2CPP_FIELD_SIGNATURE(0),
	jint
> java::text::CollationElementIterator::NULLORDER;


J2CPP_DEFINE_CLASS(java::text::CollationElementIterator,"java/text/CollationElementIterator")
J2CPP_DEFINE_METHOD(java::text::CollationElementIterator,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::text::CollationElementIterator,1,"getMaxExpansion","(I)I")
J2CPP_DEFINE_METHOD(java::text::CollationElementIterator,2,"getOffset","()I")
J2CPP_DEFINE_METHOD(java::text::CollationElementIterator,3,"next","()I")
J2CPP_DEFINE_METHOD(java::text::CollationElementIterator,4,"previous","()I")
J2CPP_DEFINE_METHOD(java::text::CollationElementIterator,5,"primaryOrder","(I)I")
J2CPP_DEFINE_METHOD(java::text::CollationElementIterator,6,"reset","()V")
J2CPP_DEFINE_METHOD(java::text::CollationElementIterator,7,"secondaryOrder","(I)S")
J2CPP_DEFINE_METHOD(java::text::CollationElementIterator,8,"setOffset","(I)V")
J2CPP_DEFINE_METHOD(java::text::CollationElementIterator,9,"setText","(Ljava/text/CharacterIterator;)V")
J2CPP_DEFINE_METHOD(java::text::CollationElementIterator,10,"setText","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::text::CollationElementIterator,11,"tertiaryOrder","(I)S")
J2CPP_DEFINE_FIELD(java::text::CollationElementIterator,0,"NULLORDER","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_COLLATIONELEMENTITERATOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.text.Normalizer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_NORMALIZER_HPP_DECL
#define J2CPP_JAVA_TEXT_NORMALIZER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class Comparable; } } }
namespace j2cpp { namespace java { namespace lang { class Enum; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }
namespace j2cpp { namespace java { namespace text { namespace Normalizer_ { class Form; } } } }


#include <java/io/Serializable.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/Comparable.hpp>
#include <java/lang/Enum.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/text/Normalizer.hpp>


namespace j2cpp {

namespace java { namespace text {

	class Normalizer;
	namespace Normalizer_ {

		class Form;
		class Form
			: public object<Form>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)
			J2CPP_DECLARE_FIELD(4)

			explicit Form(jobject jobj)
			: object<Form>(jobj)
			{
			}

			operator local_ref<java::lang::Comparable>() const;
			operator local_ref<java::lang::Enum>() const;
			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::io::Serializable>() const;


			static local_ref< array< local_ref< java::text::Normalizer_::Form >, 1> > values();
			static local_ref< java::text::Normalizer_::Form > valueOf(local_ref< java::lang::String >  const&);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::text::Normalizer_::Form > > NFC;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::text::Normalizer_::Form > > NFD;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< java::text::Normalizer_::Form > > NFKC;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), local_ref< java::text::Normalizer_::Form > > NFKD;
		}; //class Form

	} //namespace Normalizer_

	class Normalizer
		: public object<Normalizer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		typedef Normalizer_::Form Form;

		explicit Normalizer(jobject jobj)
		: object<Normalizer>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static jboolean isNormalized(local_ref< java::lang::CharSequence >  const&, local_ref< java::text::Normalizer_::Form >  const&);
		static local_ref< java::lang::String > normalize(local_ref< java::lang::CharSequence >  const&, local_ref< java::text::Normalizer_::Form >  const&);
	}; //class Normalizer

} //namespace text
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_NORMALIZER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_TEXT_NORMALIZER_HPP_IMPL
#define J2CPP_JAVA_TEXT_NORMALIZER_HPP_IMPL

namespace j2cpp {




java::text::Normalizer_::Form::operator local_ref<java::lang::Comparable>() const
{
	return local_ref<java::lang::Comparable>(get_jobject());
}

java::text::Normalizer_::Form::operator local_ref<java::lang::Enum>() const
{
	return local_ref<java::lang::Enum>(get_jobject());
}

java::text::Normalizer_::Form::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::text::Normalizer_::Form::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}

local_ref< array< local_ref< java::text::Normalizer_::Form >, 1> > java::text::Normalizer_::Form::values()
{
	return call_static_method<
		java::text::Normalizer_::Form::J2CPP_CLASS_NAME,
		java::text::Normalizer_::Form::J2CPP_METHOD_NAME(0),
		java::text::Normalizer_::Form::J2CPP_METHOD_SIGNATURE(0), 
		local_ref< array< local_ref< java::text::Normalizer_::Form >, 1> >
	>();
}

local_ref< java::text::Normalizer_::Form > java::text::Normalizer_::Form::valueOf(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		java::text::Normalizer_::Form::J2CPP_CLASS_NAME,
		java::text::Normalizer_::Form::J2CPP_METHOD_NAME(1),
		java::text::Normalizer_::Form::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::text::Normalizer_::Form >
	>(a0);
}




static_field<
	java::text::Normalizer_::Form::J2CPP_CLASS_NAME,
	java::text::Normalizer_::Form::J2CPP_FIELD_NAME(0),
	java::text::Normalizer_::Form::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::text::Normalizer_::Form >
> java::text::Normalizer_::Form::NFC;

static_field<
	java::text::Normalizer_::Form::J2CPP_CLASS_NAME,
	java::text::Normalizer_::Form::J2CPP_FIELD_NAME(1),
	java::text::Normalizer_::Form::J2CPP_FIELD_SIGNATURE(1),
	local_ref< java::text::Normalizer_::Form >
> java::text::Normalizer_::Form::NFD;

static_field<
	java::text::Normalizer_::Form::J2CPP_CLASS_NAME,
	java::text::Normalizer_::Form::J2CPP_FIELD_NAME(2),
	java::text::Normalizer_::Form::J2CPP_FIELD_SIGNATURE(2),
	local_ref< java::text::Normalizer_::Form >
> java::text::Normalizer_::Form::NFKC;

static_field<
	java::text::Normalizer_::Form::J2CPP_CLASS_NAME,
	java::text::Normalizer_::Form::J2CPP_FIELD_NAME(3),
	java::text::Normalizer_::Form::J2CPP_FIELD_SIGNATURE(3),
	local_ref< java::text::Normalizer_::Form >
> java::text::Normalizer_::Form::NFKD;


J2CPP_DEFINE_CLASS(java::text::Normalizer_::Form,"java/text/Normalizer$Form")
J2CPP_DEFINE_METHOD(java::text::Normalizer_::Form,0,"values","()[java.text.Normalizer.Form")
J2CPP_DEFINE_METHOD(java::text::Normalizer_::Form,1,"valueOf","(Ljava/lang/String;)Ljava/text/Normalizer$Form;")
J2CPP_DEFINE_METHOD(java::text::Normalizer_::Form,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::text::Normalizer_::Form,3,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::text::Normalizer_::Form,0,"NFC","Ljava/text/Normalizer$Form;")
J2CPP_DEFINE_FIELD(java::text::Normalizer_::Form,1,"NFD","Ljava/text/Normalizer$Form;")
J2CPP_DEFINE_FIELD(java::text::Normalizer_::Form,2,"NFKC","Ljava/text/Normalizer$Form;")
J2CPP_DEFINE_FIELD(java::text::Normalizer_::Form,3,"NFKD","Ljava/text/Normalizer$Form;")
J2CPP_DEFINE_FIELD(java::text::Normalizer_::Form,4,"$VALUES","[java.text.Normalizer.Form")



java::text::Normalizer::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


jboolean java::text::Normalizer::isNormalized(local_ref< java::lang::CharSequence > const &a0, local_ref< java::text::Normalizer_::Form > const &a1)
{
	return call_static_method<
		java::text::Normalizer::J2CPP_CLASS_NAME,
		java::text::Normalizer::J2CPP_METHOD_NAME(1),
		java::text::Normalizer::J2CPP_METHOD_SIGNATURE(1), 
		jboolean
	>(a0, a1);
}

local_ref< java::lang::String > java::text::Normalizer::normalize(local_ref< java::lang::CharSequence > const &a0, local_ref< java::text::Normalizer_::Form > const &a1)
{
	return call_static_method<
		java::text::Normalizer::J2CPP_CLASS_NAME,
		java::text::Normalizer::J2CPP_METHOD_NAME(2),
		java::text::Normalizer::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::lang::String >
	>(a0, a1);
}


J2CPP_DEFINE_CLASS(java::text::Normalizer,"java/text/Normalizer")
J2CPP_DEFINE_METHOD(java::text::Normalizer,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::text::Normalizer,1,"isNormalized","(Ljava/lang/CharSequence;Ljava/text/Normalizer$Form;)Z")
J2CPP_DEFINE_METHOD(java::text::Normalizer,2,"normalize","(Ljava/lang/CharSequence;Ljava/text/Normalizer$Form;)Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_TEXT_NORMALIZER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

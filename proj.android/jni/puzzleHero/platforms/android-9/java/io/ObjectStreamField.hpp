/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.io.ObjectStreamField
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_OBJECTSTREAMFIELD_HPP_DECL
#define J2CPP_JAVA_IO_OBJECTSTREAMFIELD_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class Comparable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Class.hpp>
#include <java/lang/Comparable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace io {

	class ObjectStreamField;
	class ObjectStreamField
		: public object<ObjectStreamField>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)

		explicit ObjectStreamField(jobject jobj)
		: object<ObjectStreamField>(jobj)
		{
		}

		operator local_ref<java::lang::Comparable>() const;
		operator local_ref<java::lang::Object>() const;


		ObjectStreamField(local_ref< java::lang::String > const&, local_ref< java::lang::Class > const&);
		ObjectStreamField(local_ref< java::lang::String > const&, local_ref< java::lang::Class > const&, jboolean);
		jint compareTo(local_ref< java::lang::Object >  const&);
		local_ref< java::lang::String > getName();
		jint getOffset();
		local_ref< java::lang::Class > getType();
		jchar getTypeCode();
		local_ref< java::lang::String > getTypeString();
		jboolean isPrimitive();
		local_ref< java::lang::String > toString();
		jboolean isUnshared();
	}; //class ObjectStreamField

} //namespace io
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_OBJECTSTREAMFIELD_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_OBJECTSTREAMFIELD_HPP_IMPL
#define J2CPP_JAVA_IO_OBJECTSTREAMFIELD_HPP_IMPL

namespace j2cpp {



java::io::ObjectStreamField::operator local_ref<java::lang::Comparable>() const
{
	return local_ref<java::lang::Comparable>(get_jobject());
}

java::io::ObjectStreamField::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::io::ObjectStreamField::ObjectStreamField(local_ref< java::lang::String > const &a0, local_ref< java::lang::Class > const &a1)
: object<java::io::ObjectStreamField>(
	call_new_object<
		java::io::ObjectStreamField::J2CPP_CLASS_NAME,
		java::io::ObjectStreamField::J2CPP_METHOD_NAME(0),
		java::io::ObjectStreamField::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1)
)
{
}



java::io::ObjectStreamField::ObjectStreamField(local_ref< java::lang::String > const &a0, local_ref< java::lang::Class > const &a1, jboolean a2)
: object<java::io::ObjectStreamField>(
	call_new_object<
		java::io::ObjectStreamField::J2CPP_CLASS_NAME,
		java::io::ObjectStreamField::J2CPP_METHOD_NAME(1),
		java::io::ObjectStreamField::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1, a2)
)
{
}


jint java::io::ObjectStreamField::compareTo(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::io::ObjectStreamField::J2CPP_CLASS_NAME,
		java::io::ObjectStreamField::J2CPP_METHOD_NAME(2),
		java::io::ObjectStreamField::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::io::ObjectStreamField::getName()
{
	return call_method<
		java::io::ObjectStreamField::J2CPP_CLASS_NAME,
		java::io::ObjectStreamField::J2CPP_METHOD_NAME(3),
		java::io::ObjectStreamField::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint java::io::ObjectStreamField::getOffset()
{
	return call_method<
		java::io::ObjectStreamField::J2CPP_CLASS_NAME,
		java::io::ObjectStreamField::J2CPP_METHOD_NAME(4),
		java::io::ObjectStreamField::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject());
}

local_ref< java::lang::Class > java::io::ObjectStreamField::getType()
{
	return call_method<
		java::io::ObjectStreamField::J2CPP_CLASS_NAME,
		java::io::ObjectStreamField::J2CPP_METHOD_NAME(5),
		java::io::ObjectStreamField::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::Class >
	>(get_jobject());
}

jchar java::io::ObjectStreamField::getTypeCode()
{
	return call_method<
		java::io::ObjectStreamField::J2CPP_CLASS_NAME,
		java::io::ObjectStreamField::J2CPP_METHOD_NAME(6),
		java::io::ObjectStreamField::J2CPP_METHOD_SIGNATURE(6), 
		jchar
	>(get_jobject());
}

local_ref< java::lang::String > java::io::ObjectStreamField::getTypeString()
{
	return call_method<
		java::io::ObjectStreamField::J2CPP_CLASS_NAME,
		java::io::ObjectStreamField::J2CPP_METHOD_NAME(7),
		java::io::ObjectStreamField::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean java::io::ObjectStreamField::isPrimitive()
{
	return call_method<
		java::io::ObjectStreamField::J2CPP_CLASS_NAME,
		java::io::ObjectStreamField::J2CPP_METHOD_NAME(8),
		java::io::ObjectStreamField::J2CPP_METHOD_SIGNATURE(8), 
		jboolean
	>(get_jobject());
}


local_ref< java::lang::String > java::io::ObjectStreamField::toString()
{
	return call_method<
		java::io::ObjectStreamField::J2CPP_CLASS_NAME,
		java::io::ObjectStreamField::J2CPP_METHOD_NAME(10),
		java::io::ObjectStreamField::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean java::io::ObjectStreamField::isUnshared()
{
	return call_method<
		java::io::ObjectStreamField::J2CPP_CLASS_NAME,
		java::io::ObjectStreamField::J2CPP_METHOD_NAME(11),
		java::io::ObjectStreamField::J2CPP_METHOD_SIGNATURE(11), 
		jboolean
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::io::ObjectStreamField,"java/io/ObjectStreamField")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,0,"<init>","(Ljava/lang/String;Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,1,"<init>","(Ljava/lang/String;Ljava/lang/Class;Z)V")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,2,"compareTo","(Ljava/lang/Object;)I")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,3,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,4,"getOffset","()I")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,5,"getType","()Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,6,"getTypeCode","()C")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,7,"getTypeString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,8,"isPrimitive","()Z")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,9,"setOffset","(I)V")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,10,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::io::ObjectStreamField,11,"isUnshared","()Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_OBJECTSTREAMFIELD_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

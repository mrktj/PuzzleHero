/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.io.FilterWriter
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_FILTERWRITER_HPP_DECL
#define J2CPP_JAVA_IO_FILTERWRITER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Appendable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class Closeable; } } }
namespace j2cpp { namespace java { namespace io { class Flushable; } } }
namespace j2cpp { namespace java { namespace io { class Writer; } } }


#include <java/io/Closeable.hpp>
#include <java/io/Flushable.hpp>
#include <java/io/Writer.hpp>
#include <java/lang/Appendable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace io {

	class FilterWriter;
	class FilterWriter
		: public object<FilterWriter>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_FIELD(0)

		explicit FilterWriter(jobject jobj)
		: object<FilterWriter>(jobj)
		{
		}

		operator local_ref<java::lang::Appendable>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Closeable>() const;
		operator local_ref<java::io::Flushable>() const;
		operator local_ref<java::io::Writer>() const;


		void close();
		void flush();
		void write(local_ref< array<jchar,1> >  const&, jint, jint);
		void write(jint);
		void write(local_ref< java::lang::String >  const&, jint, jint);

	}; //class FilterWriter

} //namespace io
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_FILTERWRITER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_FILTERWRITER_HPP_IMPL
#define J2CPP_JAVA_IO_FILTERWRITER_HPP_IMPL

namespace j2cpp {



java::io::FilterWriter::operator local_ref<java::lang::Appendable>() const
{
	return local_ref<java::lang::Appendable>(get_jobject());
}

java::io::FilterWriter::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::io::FilterWriter::operator local_ref<java::io::Closeable>() const
{
	return local_ref<java::io::Closeable>(get_jobject());
}

java::io::FilterWriter::operator local_ref<java::io::Flushable>() const
{
	return local_ref<java::io::Flushable>(get_jobject());
}

java::io::FilterWriter::operator local_ref<java::io::Writer>() const
{
	return local_ref<java::io::Writer>(get_jobject());
}


void java::io::FilterWriter::close()
{
	return call_method<
		java::io::FilterWriter::J2CPP_CLASS_NAME,
		java::io::FilterWriter::J2CPP_METHOD_NAME(1),
		java::io::FilterWriter::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject());
}

void java::io::FilterWriter::flush()
{
	return call_method<
		java::io::FilterWriter::J2CPP_CLASS_NAME,
		java::io::FilterWriter::J2CPP_METHOD_NAME(2),
		java::io::FilterWriter::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject());
}

void java::io::FilterWriter::write(local_ref< array<jchar,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::io::FilterWriter::J2CPP_CLASS_NAME,
		java::io::FilterWriter::J2CPP_METHOD_NAME(3),
		java::io::FilterWriter::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0, a1, a2);
}

void java::io::FilterWriter::write(jint a0)
{
	return call_method<
		java::io::FilterWriter::J2CPP_CLASS_NAME,
		java::io::FilterWriter::J2CPP_METHOD_NAME(4),
		java::io::FilterWriter::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}

void java::io::FilterWriter::write(local_ref< java::lang::String > const &a0, jint a1, jint a2)
{
	return call_method<
		java::io::FilterWriter::J2CPP_CLASS_NAME,
		java::io::FilterWriter::J2CPP_METHOD_NAME(5),
		java::io::FilterWriter::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject(), a0, a1, a2);
}



J2CPP_DEFINE_CLASS(java::io::FilterWriter,"java/io/FilterWriter")
J2CPP_DEFINE_METHOD(java::io::FilterWriter,0,"<init>","(Ljava/io/Writer;)V")
J2CPP_DEFINE_METHOD(java::io::FilterWriter,1,"close","()V")
J2CPP_DEFINE_METHOD(java::io::FilterWriter,2,"flush","()V")
J2CPP_DEFINE_METHOD(java::io::FilterWriter,3,"write","([CII)V")
J2CPP_DEFINE_METHOD(java::io::FilterWriter,4,"write","(I)V")
J2CPP_DEFINE_METHOD(java::io::FilterWriter,5,"write","(Ljava/lang/String;II)V")
J2CPP_DEFINE_FIELD(java::io::FilterWriter,0,"out","Ljava/io/Writer;")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_FILTERWRITER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

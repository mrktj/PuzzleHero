/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.io.DataOutput
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_DATAOUTPUT_HPP_DECL
#define J2CPP_JAVA_IO_DATAOUTPUT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace io {

	class DataOutput;
	class DataOutput
		: public object<DataOutput>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)

		explicit DataOutput(jobject jobj)
		: object<DataOutput>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		void write(local_ref< array<jbyte,1> >  const&);
		void write(local_ref< array<jbyte,1> >  const&, jint, jint);
		void write(jint);
		void writeBoolean(jboolean);
		void writeByte(jint);
		void writeBytes(local_ref< java::lang::String >  const&);
		void writeChar(jint);
		void writeChars(local_ref< java::lang::String >  const&);
		void writeDouble(jdouble);
		void writeFloat(jfloat);
		void writeInt(jint);
		void writeLong(jlong);
		void writeShort(jint);
		void writeUTF(local_ref< java::lang::String >  const&);
	}; //class DataOutput

} //namespace io
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_DATAOUTPUT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_IO_DATAOUTPUT_HPP_IMPL
#define J2CPP_JAVA_IO_DATAOUTPUT_HPP_IMPL

namespace j2cpp {



java::io::DataOutput::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

void java::io::DataOutput::write(local_ref< array<jbyte,1> > const &a0)
{
	return call_method<
		java::io::DataOutput::J2CPP_CLASS_NAME,
		java::io::DataOutput::J2CPP_METHOD_NAME(0),
		java::io::DataOutput::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutput::write(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::io::DataOutput::J2CPP_CLASS_NAME,
		java::io::DataOutput::J2CPP_METHOD_NAME(1),
		java::io::DataOutput::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0, a1, a2);
}

void java::io::DataOutput::write(jint a0)
{
	return call_method<
		java::io::DataOutput::J2CPP_CLASS_NAME,
		java::io::DataOutput::J2CPP_METHOD_NAME(2),
		java::io::DataOutput::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutput::writeBoolean(jboolean a0)
{
	return call_method<
		java::io::DataOutput::J2CPP_CLASS_NAME,
		java::io::DataOutput::J2CPP_METHOD_NAME(3),
		java::io::DataOutput::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutput::writeByte(jint a0)
{
	return call_method<
		java::io::DataOutput::J2CPP_CLASS_NAME,
		java::io::DataOutput::J2CPP_METHOD_NAME(4),
		java::io::DataOutput::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutput::writeBytes(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::io::DataOutput::J2CPP_CLASS_NAME,
		java::io::DataOutput::J2CPP_METHOD_NAME(5),
		java::io::DataOutput::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutput::writeChar(jint a0)
{
	return call_method<
		java::io::DataOutput::J2CPP_CLASS_NAME,
		java::io::DataOutput::J2CPP_METHOD_NAME(6),
		java::io::DataOutput::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutput::writeChars(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::io::DataOutput::J2CPP_CLASS_NAME,
		java::io::DataOutput::J2CPP_METHOD_NAME(7),
		java::io::DataOutput::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutput::writeDouble(jdouble a0)
{
	return call_method<
		java::io::DataOutput::J2CPP_CLASS_NAME,
		java::io::DataOutput::J2CPP_METHOD_NAME(8),
		java::io::DataOutput::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutput::writeFloat(jfloat a0)
{
	return call_method<
		java::io::DataOutput::J2CPP_CLASS_NAME,
		java::io::DataOutput::J2CPP_METHOD_NAME(9),
		java::io::DataOutput::J2CPP_METHOD_SIGNATURE(9), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutput::writeInt(jint a0)
{
	return call_method<
		java::io::DataOutput::J2CPP_CLASS_NAME,
		java::io::DataOutput::J2CPP_METHOD_NAME(10),
		java::io::DataOutput::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutput::writeLong(jlong a0)
{
	return call_method<
		java::io::DataOutput::J2CPP_CLASS_NAME,
		java::io::DataOutput::J2CPP_METHOD_NAME(11),
		java::io::DataOutput::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutput::writeShort(jint a0)
{
	return call_method<
		java::io::DataOutput::J2CPP_CLASS_NAME,
		java::io::DataOutput::J2CPP_METHOD_NAME(12),
		java::io::DataOutput::J2CPP_METHOD_SIGNATURE(12), 
		void
	>(get_jobject(), a0);
}

void java::io::DataOutput::writeUTF(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::io::DataOutput::J2CPP_CLASS_NAME,
		java::io::DataOutput::J2CPP_METHOD_NAME(13),
		java::io::DataOutput::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::io::DataOutput,"java/io/DataOutput")
J2CPP_DEFINE_METHOD(java::io::DataOutput,0,"write","([B)V")
J2CPP_DEFINE_METHOD(java::io::DataOutput,1,"write","([BII)V")
J2CPP_DEFINE_METHOD(java::io::DataOutput,2,"write","(I)V")
J2CPP_DEFINE_METHOD(java::io::DataOutput,3,"writeBoolean","(Z)V")
J2CPP_DEFINE_METHOD(java::io::DataOutput,4,"writeByte","(I)V")
J2CPP_DEFINE_METHOD(java::io::DataOutput,5,"writeBytes","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::io::DataOutput,6,"writeChar","(I)V")
J2CPP_DEFINE_METHOD(java::io::DataOutput,7,"writeChars","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::io::DataOutput,8,"writeDouble","(D)V")
J2CPP_DEFINE_METHOD(java::io::DataOutput,9,"writeFloat","(F)V")
J2CPP_DEFINE_METHOD(java::io::DataOutput,10,"writeInt","(I)V")
J2CPP_DEFINE_METHOD(java::io::DataOutput,11,"writeLong","(J)V")
J2CPP_DEFINE_METHOD(java::io::DataOutput,12,"writeShort","(I)V")
J2CPP_DEFINE_METHOD(java::io::DataOutput,13,"writeUTF","(Ljava/lang/String;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_IO_DATAOUTPUT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

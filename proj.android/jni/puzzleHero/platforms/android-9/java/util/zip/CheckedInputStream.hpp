/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.zip.CheckedInputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_CHECKEDINPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_UTIL_ZIP_CHECKEDINPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { namespace zip { class Checksum; } } } }
namespace j2cpp { namespace java { namespace io { class Closeable; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class FilterInputStream; } } }


#include <java/io/Closeable.hpp>
#include <java/io/FilterInputStream.hpp>
#include <java/io/InputStream.hpp>
#include <java/lang/Object.hpp>
#include <java/util/zip/Checksum.hpp>


namespace j2cpp {

namespace java { namespace util { namespace zip {

	class CheckedInputStream;
	class CheckedInputStream
		: public object<CheckedInputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		explicit CheckedInputStream(jobject jobj)
		: object<CheckedInputStream>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Closeable>() const;
		operator local_ref<java::io::InputStream>() const;
		operator local_ref<java::io::FilterInputStream>() const;


		CheckedInputStream(local_ref< java::io::InputStream > const&, local_ref< java::util::zip::Checksum > const&);
		jint read();
		jint read(local_ref< array<jbyte,1> >  const&, jint, jint);
		local_ref< java::util::zip::Checksum > getChecksum();
		jlong skip(jlong);
	}; //class CheckedInputStream

} //namespace zip
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_CHECKEDINPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_CHECKEDINPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_UTIL_ZIP_CHECKEDINPUTSTREAM_HPP_IMPL

namespace j2cpp {



java::util::zip::CheckedInputStream::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::zip::CheckedInputStream::operator local_ref<java::io::Closeable>() const
{
	return local_ref<java::io::Closeable>(get_jobject());
}

java::util::zip::CheckedInputStream::operator local_ref<java::io::InputStream>() const
{
	return local_ref<java::io::InputStream>(get_jobject());
}

java::util::zip::CheckedInputStream::operator local_ref<java::io::FilterInputStream>() const
{
	return local_ref<java::io::FilterInputStream>(get_jobject());
}


java::util::zip::CheckedInputStream::CheckedInputStream(local_ref< java::io::InputStream > const &a0, local_ref< java::util::zip::Checksum > const &a1)
: object<java::util::zip::CheckedInputStream>(
	call_new_object<
		java::util::zip::CheckedInputStream::J2CPP_CLASS_NAME,
		java::util::zip::CheckedInputStream::J2CPP_METHOD_NAME(0),
		java::util::zip::CheckedInputStream::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1)
)
{
}


jint java::util::zip::CheckedInputStream::read()
{
	return call_method<
		java::util::zip::CheckedInputStream::J2CPP_CLASS_NAME,
		java::util::zip::CheckedInputStream::J2CPP_METHOD_NAME(1),
		java::util::zip::CheckedInputStream::J2CPP_METHOD_SIGNATURE(1), 
		jint
	>(get_jobject());
}

jint java::util::zip::CheckedInputStream::read(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::util::zip::CheckedInputStream::J2CPP_CLASS_NAME,
		java::util::zip::CheckedInputStream::J2CPP_METHOD_NAME(2),
		java::util::zip::CheckedInputStream::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(get_jobject(), a0, a1, a2);
}

local_ref< java::util::zip::Checksum > java::util::zip::CheckedInputStream::getChecksum()
{
	return call_method<
		java::util::zip::CheckedInputStream::J2CPP_CLASS_NAME,
		java::util::zip::CheckedInputStream::J2CPP_METHOD_NAME(3),
		java::util::zip::CheckedInputStream::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::util::zip::Checksum >
	>(get_jobject());
}

jlong java::util::zip::CheckedInputStream::skip(jlong a0)
{
	return call_method<
		java::util::zip::CheckedInputStream::J2CPP_CLASS_NAME,
		java::util::zip::CheckedInputStream::J2CPP_METHOD_NAME(4),
		java::util::zip::CheckedInputStream::J2CPP_METHOD_SIGNATURE(4), 
		jlong
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::util::zip::CheckedInputStream,"java/util/zip/CheckedInputStream")
J2CPP_DEFINE_METHOD(java::util::zip::CheckedInputStream,0,"<init>","(Ljava/io/InputStream;Ljava/util/zip/Checksum;)V")
J2CPP_DEFINE_METHOD(java::util::zip::CheckedInputStream,1,"read","()I")
J2CPP_DEFINE_METHOD(java::util::zip::CheckedInputStream,2,"read","([BII)I")
J2CPP_DEFINE_METHOD(java::util::zip::CheckedInputStream,3,"getChecksum","()Ljava/util/zip/Checksum;")
J2CPP_DEFINE_METHOD(java::util::zip::CheckedInputStream,4,"skip","(J)J")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_CHECKEDINPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.zip.ZipFile
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_ZIPFILE_HPP_DECL
#define J2CPP_JAVA_UTIL_ZIP_ZIPFILE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Enumeration; } } }
namespace j2cpp { namespace java { namespace util { namespace zip { class ZipEntry; } } } }
namespace j2cpp { namespace java { namespace io { class File; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }


#include <java/io/File.hpp>
#include <java/io/InputStream.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Enumeration.hpp>
#include <java/util/zip/ZipEntry.hpp>


namespace j2cpp {

namespace java { namespace util { namespace zip {

	class ZipFile;
	class ZipFile
		: public object<ZipFile>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		explicit ZipFile(jobject jobj)
		: object<ZipFile>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		ZipFile(local_ref< java::io::File > const&);
		ZipFile(local_ref< java::io::File > const&, jint);
		ZipFile(local_ref< java::lang::String > const&);
		void close();
		local_ref< java::util::Enumeration > entries();
		local_ref< java::util::zip::ZipEntry > getEntry(local_ref< java::lang::String >  const&);
		local_ref< java::io::InputStream > getInputStream(local_ref< java::util::zip::ZipEntry >  const&);
		local_ref< java::lang::String > getName();
		jint size();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > OPEN_READ;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > OPEN_DELETE;
	}; //class ZipFile

} //namespace zip
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_ZIPFILE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_ZIPFILE_HPP_IMPL
#define J2CPP_JAVA_UTIL_ZIP_ZIPFILE_HPP_IMPL

namespace j2cpp {



java::util::zip::ZipFile::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::util::zip::ZipFile::ZipFile(local_ref< java::io::File > const &a0)
: object<java::util::zip::ZipFile>(
	call_new_object<
		java::util::zip::ZipFile::J2CPP_CLASS_NAME,
		java::util::zip::ZipFile::J2CPP_METHOD_NAME(0),
		java::util::zip::ZipFile::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}



java::util::zip::ZipFile::ZipFile(local_ref< java::io::File > const &a0, jint a1)
: object<java::util::zip::ZipFile>(
	call_new_object<
		java::util::zip::ZipFile::J2CPP_CLASS_NAME,
		java::util::zip::ZipFile::J2CPP_METHOD_NAME(1),
		java::util::zip::ZipFile::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1)
)
{
}



java::util::zip::ZipFile::ZipFile(local_ref< java::lang::String > const &a0)
: object<java::util::zip::ZipFile>(
	call_new_object<
		java::util::zip::ZipFile::J2CPP_CLASS_NAME,
		java::util::zip::ZipFile::J2CPP_METHOD_NAME(2),
		java::util::zip::ZipFile::J2CPP_METHOD_SIGNATURE(2)
	>(a0)
)
{
}



void java::util::zip::ZipFile::close()
{
	return call_method<
		java::util::zip::ZipFile::J2CPP_CLASS_NAME,
		java::util::zip::ZipFile::J2CPP_METHOD_NAME(4),
		java::util::zip::ZipFile::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject());
}

local_ref< java::util::Enumeration > java::util::zip::ZipFile::entries()
{
	return call_method<
		java::util::zip::ZipFile::J2CPP_CLASS_NAME,
		java::util::zip::ZipFile::J2CPP_METHOD_NAME(5),
		java::util::zip::ZipFile::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::util::Enumeration >
	>(get_jobject());
}

local_ref< java::util::zip::ZipEntry > java::util::zip::ZipFile::getEntry(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::util::zip::ZipFile::J2CPP_CLASS_NAME,
		java::util::zip::ZipFile::J2CPP_METHOD_NAME(6),
		java::util::zip::ZipFile::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::util::zip::ZipEntry >
	>(get_jobject(), a0);
}

local_ref< java::io::InputStream > java::util::zip::ZipFile::getInputStream(local_ref< java::util::zip::ZipEntry > const &a0)
{
	return call_method<
		java::util::zip::ZipFile::J2CPP_CLASS_NAME,
		java::util::zip::ZipFile::J2CPP_METHOD_NAME(7),
		java::util::zip::ZipFile::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::io::InputStream >
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::util::zip::ZipFile::getName()
{
	return call_method<
		java::util::zip::ZipFile::J2CPP_CLASS_NAME,
		java::util::zip::ZipFile::J2CPP_METHOD_NAME(8),
		java::util::zip::ZipFile::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint java::util::zip::ZipFile::size()
{
	return call_method<
		java::util::zip::ZipFile::J2CPP_CLASS_NAME,
		java::util::zip::ZipFile::J2CPP_METHOD_NAME(9),
		java::util::zip::ZipFile::J2CPP_METHOD_SIGNATURE(9), 
		jint
	>(get_jobject());
}


static_field<
	java::util::zip::ZipFile::J2CPP_CLASS_NAME,
	java::util::zip::ZipFile::J2CPP_FIELD_NAME(0),
	java::util::zip::ZipFile::J2CPP_FIELD_SIGNATURE(0),
	jint
> java::util::zip::ZipFile::OPEN_READ;

static_field<
	java::util::zip::ZipFile::J2CPP_CLASS_NAME,
	java::util::zip::ZipFile::J2CPP_FIELD_NAME(1),
	java::util::zip::ZipFile::J2CPP_FIELD_SIGNATURE(1),
	jint
> java::util::zip::ZipFile::OPEN_DELETE;


J2CPP_DEFINE_CLASS(java::util::zip::ZipFile,"java/util/zip/ZipFile")
J2CPP_DEFINE_METHOD(java::util::zip::ZipFile,0,"<init>","(Ljava/io/File;)V")
J2CPP_DEFINE_METHOD(java::util::zip::ZipFile,1,"<init>","(Ljava/io/File;I)V")
J2CPP_DEFINE_METHOD(java::util::zip::ZipFile,2,"<init>","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::zip::ZipFile,3,"finalize","()V")
J2CPP_DEFINE_METHOD(java::util::zip::ZipFile,4,"close","()V")
J2CPP_DEFINE_METHOD(java::util::zip::ZipFile,5,"entries","()Ljava/util/Enumeration;")
J2CPP_DEFINE_METHOD(java::util::zip::ZipFile,6,"getEntry","(Ljava/lang/String;)Ljava/util/zip/ZipEntry;")
J2CPP_DEFINE_METHOD(java::util::zip::ZipFile,7,"getInputStream","(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;")
J2CPP_DEFINE_METHOD(java::util::zip::ZipFile,8,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::zip::ZipFile,9,"size","()I")
J2CPP_DEFINE_FIELD(java::util::zip::ZipFile,0,"OPEN_READ","I")
J2CPP_DEFINE_FIELD(java::util::zip::ZipFile,1,"OPEN_DELETE","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_ZIPFILE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.zip.DeflaterInputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_DEFLATERINPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_UTIL_ZIP_DEFLATERINPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { namespace zip { class Deflater; } } } }
namespace j2cpp { namespace java { namespace io { class Closeable; } } }
namespace j2cpp { namespace java { namespace io { class InputStream; } } }
namespace j2cpp { namespace java { namespace io { class FilterInputStream; } } }


#include <java/io/Closeable.hpp>
#include <java/io/FilterInputStream.hpp>
#include <java/io/InputStream.hpp>
#include <java/lang/Object.hpp>
#include <java/util/zip/Deflater.hpp>


namespace j2cpp {

namespace java { namespace util { namespace zip {

	class DeflaterInputStream;
	class DeflaterInputStream
		: public object<DeflaterInputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		explicit DeflaterInputStream(jobject jobj)
		: object<DeflaterInputStream>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Closeable>() const;
		operator local_ref<java::io::InputStream>() const;
		operator local_ref<java::io::FilterInputStream>() const;


		DeflaterInputStream(local_ref< java::io::InputStream > const&);
		DeflaterInputStream(local_ref< java::io::InputStream > const&, local_ref< java::util::zip::Deflater > const&);
		DeflaterInputStream(local_ref< java::io::InputStream > const&, local_ref< java::util::zip::Deflater > const&, jint);
		void close();
		jint read();
		jint read(local_ref< array<jbyte,1> >  const&, jint, jint);
		jlong skip(jlong);
		jint available();
		jboolean markSupported();
		void mark(jint);
		void reset();

	}; //class DeflaterInputStream

} //namespace zip
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_DEFLATERINPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_ZIP_DEFLATERINPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_UTIL_ZIP_DEFLATERINPUTSTREAM_HPP_IMPL

namespace j2cpp {



java::util::zip::DeflaterInputStream::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::zip::DeflaterInputStream::operator local_ref<java::io::Closeable>() const
{
	return local_ref<java::io::Closeable>(get_jobject());
}

java::util::zip::DeflaterInputStream::operator local_ref<java::io::InputStream>() const
{
	return local_ref<java::io::InputStream>(get_jobject());
}

java::util::zip::DeflaterInputStream::operator local_ref<java::io::FilterInputStream>() const
{
	return local_ref<java::io::FilterInputStream>(get_jobject());
}


java::util::zip::DeflaterInputStream::DeflaterInputStream(local_ref< java::io::InputStream > const &a0)
: object<java::util::zip::DeflaterInputStream>(
	call_new_object<
		java::util::zip::DeflaterInputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_NAME(0),
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}



java::util::zip::DeflaterInputStream::DeflaterInputStream(local_ref< java::io::InputStream > const &a0, local_ref< java::util::zip::Deflater > const &a1)
: object<java::util::zip::DeflaterInputStream>(
	call_new_object<
		java::util::zip::DeflaterInputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_NAME(1),
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1)
)
{
}



java::util::zip::DeflaterInputStream::DeflaterInputStream(local_ref< java::io::InputStream > const &a0, local_ref< java::util::zip::Deflater > const &a1, jint a2)
: object<java::util::zip::DeflaterInputStream>(
	call_new_object<
		java::util::zip::DeflaterInputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_NAME(2),
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_SIGNATURE(2)
	>(a0, a1, a2)
)
{
}


void java::util::zip::DeflaterInputStream::close()
{
	return call_method<
		java::util::zip::DeflaterInputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_NAME(3),
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject());
}

jint java::util::zip::DeflaterInputStream::read()
{
	return call_method<
		java::util::zip::DeflaterInputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_NAME(4),
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject());
}

jint java::util::zip::DeflaterInputStream::read(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::util::zip::DeflaterInputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_NAME(5),
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_SIGNATURE(5), 
		jint
	>(get_jobject(), a0, a1, a2);
}

jlong java::util::zip::DeflaterInputStream::skip(jlong a0)
{
	return call_method<
		java::util::zip::DeflaterInputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_NAME(6),
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_SIGNATURE(6), 
		jlong
	>(get_jobject(), a0);
}

jint java::util::zip::DeflaterInputStream::available()
{
	return call_method<
		java::util::zip::DeflaterInputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_NAME(7),
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_SIGNATURE(7), 
		jint
	>(get_jobject());
}

jboolean java::util::zip::DeflaterInputStream::markSupported()
{
	return call_method<
		java::util::zip::DeflaterInputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_NAME(8),
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_SIGNATURE(8), 
		jboolean
	>(get_jobject());
}

void java::util::zip::DeflaterInputStream::mark(jint a0)
{
	return call_method<
		java::util::zip::DeflaterInputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_NAME(9),
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_SIGNATURE(9), 
		void
	>(get_jobject(), a0);
}

void java::util::zip::DeflaterInputStream::reset()
{
	return call_method<
		java::util::zip::DeflaterInputStream::J2CPP_CLASS_NAME,
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_NAME(10),
		java::util::zip::DeflaterInputStream::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject());
}



J2CPP_DEFINE_CLASS(java::util::zip::DeflaterInputStream,"java/util/zip/DeflaterInputStream")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterInputStream,0,"<init>","(Ljava/io/InputStream;)V")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterInputStream,1,"<init>","(Ljava/io/InputStream;Ljava/util/zip/Deflater;)V")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterInputStream,2,"<init>","(Ljava/io/InputStream;Ljava/util/zip/Deflater;I)V")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterInputStream,3,"close","()V")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterInputStream,4,"read","()I")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterInputStream,5,"read","([BII)I")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterInputStream,6,"skip","(J)J")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterInputStream,7,"available","()I")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterInputStream,8,"markSupported","()Z")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterInputStream,9,"mark","(I)V")
J2CPP_DEFINE_METHOD(java::util::zip::DeflaterInputStream,10,"reset","()V")
J2CPP_DEFINE_FIELD(java::util::zip::DeflaterInputStream,0,"def","Ljava/util/zip/Deflater;")
J2CPP_DEFINE_FIELD(java::util::zip::DeflaterInputStream,1,"buf","[B")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_ZIP_DEFLATERINPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.FormattableFlags
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_FORMATTABLEFLAGS_HPP_DECL
#define J2CPP_JAVA_UTIL_FORMATTABLEFLAGS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace util {

	class FormattableFlags;
	class FormattableFlags
		: public object<FormattableFlags>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)

		explicit FormattableFlags(jobject jobj)
		: object<FormattableFlags>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;



		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > LEFT_JUSTIFY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > UPPERCASE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > ALTERNATE;
	}; //class FormattableFlags

} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_FORMATTABLEFLAGS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_FORMATTABLEFLAGS_HPP_IMPL
#define J2CPP_JAVA_UTIL_FORMATTABLEFLAGS_HPP_IMPL

namespace j2cpp {



java::util::FormattableFlags::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}



static_field<
	java::util::FormattableFlags::J2CPP_CLASS_NAME,
	java::util::FormattableFlags::J2CPP_FIELD_NAME(0),
	java::util::FormattableFlags::J2CPP_FIELD_SIGNATURE(0),
	jint
> java::util::FormattableFlags::LEFT_JUSTIFY;

static_field<
	java::util::FormattableFlags::J2CPP_CLASS_NAME,
	java::util::FormattableFlags::J2CPP_FIELD_NAME(1),
	java::util::FormattableFlags::J2CPP_FIELD_SIGNATURE(1),
	jint
> java::util::FormattableFlags::UPPERCASE;

static_field<
	java::util::FormattableFlags::J2CPP_CLASS_NAME,
	java::util::FormattableFlags::J2CPP_FIELD_NAME(2),
	java::util::FormattableFlags::J2CPP_FIELD_SIGNATURE(2),
	jint
> java::util::FormattableFlags::ALTERNATE;


J2CPP_DEFINE_CLASS(java::util::FormattableFlags,"java/util/FormattableFlags")
J2CPP_DEFINE_METHOD(java::util::FormattableFlags,0,"<init>","()V")
J2CPP_DEFINE_FIELD(java::util::FormattableFlags,0,"LEFT_JUSTIFY","I")
J2CPP_DEFINE_FIELD(java::util::FormattableFlags,1,"UPPERCASE","I")
J2CPP_DEFINE_FIELD(java::util::FormattableFlags,2,"ALTERNATE","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_FORMATTABLEFLAGS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

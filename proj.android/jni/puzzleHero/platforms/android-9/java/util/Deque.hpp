/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.Deque
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_DEQUE_HPP_DECL
#define J2CPP_JAVA_UTIL_DEQUE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Iterable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }
namespace j2cpp { namespace java { namespace util { class Queue; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }


#include <java/lang/Iterable.hpp>
#include <java/lang/Object.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/Queue.hpp>


namespace j2cpp {

namespace java { namespace util {

	class Deque;
	class Deque
		: public object<Deque>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)

		explicit Deque(jobject jobj)
		: object<Deque>(jobj)
		{
		}

		operator local_ref<java::lang::Iterable>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::util::Queue>() const;
		operator local_ref<java::util::Collection>() const;


		void addFirst(local_ref< java::lang::Object >  const&);
		void addLast(local_ref< java::lang::Object >  const&);
		jboolean offerFirst(local_ref< java::lang::Object >  const&);
		jboolean offerLast(local_ref< java::lang::Object >  const&);
		local_ref< java::lang::Object > removeFirst();
		local_ref< java::lang::Object > removeLast();
		local_ref< java::lang::Object > pollFirst();
		local_ref< java::lang::Object > pollLast();
		local_ref< java::lang::Object > getFirst();
		local_ref< java::lang::Object > getLast();
		local_ref< java::lang::Object > peekFirst();
		local_ref< java::lang::Object > peekLast();
		jboolean removeFirstOccurrence(local_ref< java::lang::Object >  const&);
		jboolean removeLastOccurrence(local_ref< java::lang::Object >  const&);
		void push(local_ref< java::lang::Object >  const&);
		local_ref< java::lang::Object > pop();
		local_ref< java::util::Iterator > descendingIterator();
	}; //class Deque

} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_DEQUE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_DEQUE_HPP_IMPL
#define J2CPP_JAVA_UTIL_DEQUE_HPP_IMPL

namespace j2cpp {



java::util::Deque::operator local_ref<java::lang::Iterable>() const
{
	return local_ref<java::lang::Iterable>(get_jobject());
}

java::util::Deque::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::Deque::operator local_ref<java::util::Queue>() const
{
	return local_ref<java::util::Queue>(get_jobject());
}

java::util::Deque::operator local_ref<java::util::Collection>() const
{
	return local_ref<java::util::Collection>(get_jobject());
}

void java::util::Deque::addFirst(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(0),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0);
}

void java::util::Deque::addLast(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(1),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0);
}

jboolean java::util::Deque::offerFirst(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(2),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::Deque::offerLast(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(3),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< java::lang::Object > java::util::Deque::removeFirst()
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(4),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::Deque::removeLast()
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(5),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::Deque::pollFirst()
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(6),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::Deque::pollLast()
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(7),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::Deque::getFirst()
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(8),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::Deque::getLast()
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(9),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::Deque::peekFirst()
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(10),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::Deque::peekLast()
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(11),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jboolean java::util::Deque::removeFirstOccurrence(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(12),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(12), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::Deque::removeLastOccurrence(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(13),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(13), 
		jboolean
	>(get_jobject(), a0);
}

void java::util::Deque::push(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(14),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(14), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::Object > java::util::Deque::pop()
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(15),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(15), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::util::Iterator > java::util::Deque::descendingIterator()
{
	return call_method<
		java::util::Deque::J2CPP_CLASS_NAME,
		java::util::Deque::J2CPP_METHOD_NAME(16),
		java::util::Deque::J2CPP_METHOD_SIGNATURE(16), 
		local_ref< java::util::Iterator >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::util::Deque,"java/util/Deque")
J2CPP_DEFINE_METHOD(java::util::Deque,0,"addFirst","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::Deque,1,"addLast","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::Deque,2,"offerFirst","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::Deque,3,"offerLast","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::Deque,4,"removeFirst","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Deque,5,"removeLast","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Deque,6,"pollFirst","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Deque,7,"pollLast","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Deque,8,"getFirst","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Deque,9,"getLast","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Deque,10,"peekFirst","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Deque,11,"peekLast","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Deque,12,"removeFirstOccurrence","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::Deque,13,"removeLastOccurrence","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::Deque,14,"push","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::Deque,15,"pop","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::Deque,16,"descendingIterator","()Ljava/util/Iterator;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_DEQUE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

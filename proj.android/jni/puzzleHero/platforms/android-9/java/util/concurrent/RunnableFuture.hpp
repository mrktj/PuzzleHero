/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.RunnableFuture
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLEFUTURE_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLEFUTURE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Runnable; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class Future; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/Runnable.hpp>
#include <java/util/concurrent/Future.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class RunnableFuture;
	class RunnableFuture
		: public object<RunnableFuture>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)

		explicit RunnableFuture(jobject jobj)
		: object<RunnableFuture>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Runnable>() const;
		operator local_ref<java::util::concurrent::Future>() const;


		void run();
	}; //class RunnableFuture

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLEFUTURE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLEFUTURE_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLEFUTURE_HPP_IMPL

namespace j2cpp {



java::util::concurrent::RunnableFuture::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::concurrent::RunnableFuture::operator local_ref<java::lang::Runnable>() const
{
	return local_ref<java::lang::Runnable>(get_jobject());
}

java::util::concurrent::RunnableFuture::operator local_ref<java::util::concurrent::Future>() const
{
	return local_ref<java::util::concurrent::Future>(get_jobject());
}

void java::util::concurrent::RunnableFuture::run()
{
	return call_method<
		java::util::concurrent::RunnableFuture::J2CPP_CLASS_NAME,
		java::util::concurrent::RunnableFuture::J2CPP_METHOD_NAME(0),
		java::util::concurrent::RunnableFuture::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::util::concurrent::RunnableFuture,"java/util/concurrent/RunnableFuture")
J2CPP_DEFINE_METHOD(java::util::concurrent::RunnableFuture,0,"run","()V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLEFUTURE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

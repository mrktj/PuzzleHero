/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.TimeUnit
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_TIMEUNIT_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_TIMEUNIT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Thread; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Comparable; } } }
namespace j2cpp { namespace java { namespace lang { class Enum; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Comparable.hpp>
#include <java/lang/Enum.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/Thread.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class TimeUnit;
	class TimeUnit
		: public object<TimeUnit>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)

		explicit TimeUnit(jobject jobj)
		: object<TimeUnit>(jobj)
		{
		}

		operator local_ref<java::lang::Comparable>() const;
		operator local_ref<java::lang::Enum>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		static local_ref< array< local_ref< java::util::concurrent::TimeUnit >, 1> > values();
		static local_ref< java::util::concurrent::TimeUnit > valueOf(local_ref< java::lang::String >  const&);
		jlong convert(jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		jlong toNanos(jlong);
		jlong toMicros(jlong);
		jlong toMillis(jlong);
		jlong toSeconds(jlong);
		jlong toMinutes(jlong);
		jlong toHours(jlong);
		jlong toDays(jlong);
		void timedWait(local_ref< java::lang::Object >  const&, jlong);
		void timedJoin(local_ref< java::lang::Thread >  const&, jlong);
		void sleep(jlong);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::util::concurrent::TimeUnit > > DAYS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::util::concurrent::TimeUnit > > HOURS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< java::util::concurrent::TimeUnit > > MICROSECONDS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), local_ref< java::util::concurrent::TimeUnit > > MILLISECONDS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), local_ref< java::util::concurrent::TimeUnit > > MINUTES;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), local_ref< java::util::concurrent::TimeUnit > > NANOSECONDS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), local_ref< java::util::concurrent::TimeUnit > > SECONDS;
	}; //class TimeUnit

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_TIMEUNIT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_TIMEUNIT_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_TIMEUNIT_HPP_IMPL

namespace j2cpp {



java::util::concurrent::TimeUnit::operator local_ref<java::lang::Comparable>() const
{
	return local_ref<java::lang::Comparable>(get_jobject());
}

java::util::concurrent::TimeUnit::operator local_ref<java::lang::Enum>() const
{
	return local_ref<java::lang::Enum>(get_jobject());
}

java::util::concurrent::TimeUnit::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::concurrent::TimeUnit::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}

local_ref< array< local_ref< java::util::concurrent::TimeUnit >, 1> > java::util::concurrent::TimeUnit::values()
{
	return call_static_method<
		java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
		java::util::concurrent::TimeUnit::J2CPP_METHOD_NAME(0),
		java::util::concurrent::TimeUnit::J2CPP_METHOD_SIGNATURE(0), 
		local_ref< array< local_ref< java::util::concurrent::TimeUnit >, 1> >
	>();
}

local_ref< java::util::concurrent::TimeUnit > java::util::concurrent::TimeUnit::valueOf(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
		java::util::concurrent::TimeUnit::J2CPP_METHOD_NAME(1),
		java::util::concurrent::TimeUnit::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::util::concurrent::TimeUnit >
	>(a0);
}


jlong java::util::concurrent::TimeUnit::convert(jlong a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return call_method<
		java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
		java::util::concurrent::TimeUnit::J2CPP_METHOD_NAME(3),
		java::util::concurrent::TimeUnit::J2CPP_METHOD_SIGNATURE(3), 
		jlong
	>(get_jobject(), a0, a1);
}

jlong java::util::concurrent::TimeUnit::toNanos(jlong a0)
{
	return call_method<
		java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
		java::util::concurrent::TimeUnit::J2CPP_METHOD_NAME(4),
		java::util::concurrent::TimeUnit::J2CPP_METHOD_SIGNATURE(4), 
		jlong
	>(get_jobject(), a0);
}

jlong java::util::concurrent::TimeUnit::toMicros(jlong a0)
{
	return call_method<
		java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
		java::util::concurrent::TimeUnit::J2CPP_METHOD_NAME(5),
		java::util::concurrent::TimeUnit::J2CPP_METHOD_SIGNATURE(5), 
		jlong
	>(get_jobject(), a0);
}

jlong java::util::concurrent::TimeUnit::toMillis(jlong a0)
{
	return call_method<
		java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
		java::util::concurrent::TimeUnit::J2CPP_METHOD_NAME(6),
		java::util::concurrent::TimeUnit::J2CPP_METHOD_SIGNATURE(6), 
		jlong
	>(get_jobject(), a0);
}

jlong java::util::concurrent::TimeUnit::toSeconds(jlong a0)
{
	return call_method<
		java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
		java::util::concurrent::TimeUnit::J2CPP_METHOD_NAME(7),
		java::util::concurrent::TimeUnit::J2CPP_METHOD_SIGNATURE(7), 
		jlong
	>(get_jobject(), a0);
}

jlong java::util::concurrent::TimeUnit::toMinutes(jlong a0)
{
	return call_method<
		java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
		java::util::concurrent::TimeUnit::J2CPP_METHOD_NAME(8),
		java::util::concurrent::TimeUnit::J2CPP_METHOD_SIGNATURE(8), 
		jlong
	>(get_jobject(), a0);
}

jlong java::util::concurrent::TimeUnit::toHours(jlong a0)
{
	return call_method<
		java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
		java::util::concurrent::TimeUnit::J2CPP_METHOD_NAME(9),
		java::util::concurrent::TimeUnit::J2CPP_METHOD_SIGNATURE(9), 
		jlong
	>(get_jobject(), a0);
}

jlong java::util::concurrent::TimeUnit::toDays(jlong a0)
{
	return call_method<
		java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
		java::util::concurrent::TimeUnit::J2CPP_METHOD_NAME(10),
		java::util::concurrent::TimeUnit::J2CPP_METHOD_SIGNATURE(10), 
		jlong
	>(get_jobject(), a0);
}

void java::util::concurrent::TimeUnit::timedWait(local_ref< java::lang::Object > const &a0, jlong a1)
{
	return call_method<
		java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
		java::util::concurrent::TimeUnit::J2CPP_METHOD_NAME(11),
		java::util::concurrent::TimeUnit::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject(), a0, a1);
}

void java::util::concurrent::TimeUnit::timedJoin(local_ref< java::lang::Thread > const &a0, jlong a1)
{
	return call_method<
		java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
		java::util::concurrent::TimeUnit::J2CPP_METHOD_NAME(12),
		java::util::concurrent::TimeUnit::J2CPP_METHOD_SIGNATURE(12), 
		void
	>(get_jobject(), a0, a1);
}

void java::util::concurrent::TimeUnit::sleep(jlong a0)
{
	return call_method<
		java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
		java::util::concurrent::TimeUnit::J2CPP_METHOD_NAME(13),
		java::util::concurrent::TimeUnit::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject(), a0);
}



static_field<
	java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
	java::util::concurrent::TimeUnit::J2CPP_FIELD_NAME(0),
	java::util::concurrent::TimeUnit::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::util::concurrent::TimeUnit >
> java::util::concurrent::TimeUnit::DAYS;

static_field<
	java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
	java::util::concurrent::TimeUnit::J2CPP_FIELD_NAME(1),
	java::util::concurrent::TimeUnit::J2CPP_FIELD_SIGNATURE(1),
	local_ref< java::util::concurrent::TimeUnit >
> java::util::concurrent::TimeUnit::HOURS;

static_field<
	java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
	java::util::concurrent::TimeUnit::J2CPP_FIELD_NAME(2),
	java::util::concurrent::TimeUnit::J2CPP_FIELD_SIGNATURE(2),
	local_ref< java::util::concurrent::TimeUnit >
> java::util::concurrent::TimeUnit::MICROSECONDS;

static_field<
	java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
	java::util::concurrent::TimeUnit::J2CPP_FIELD_NAME(3),
	java::util::concurrent::TimeUnit::J2CPP_FIELD_SIGNATURE(3),
	local_ref< java::util::concurrent::TimeUnit >
> java::util::concurrent::TimeUnit::MILLISECONDS;

static_field<
	java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
	java::util::concurrent::TimeUnit::J2CPP_FIELD_NAME(4),
	java::util::concurrent::TimeUnit::J2CPP_FIELD_SIGNATURE(4),
	local_ref< java::util::concurrent::TimeUnit >
> java::util::concurrent::TimeUnit::MINUTES;

static_field<
	java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
	java::util::concurrent::TimeUnit::J2CPP_FIELD_NAME(5),
	java::util::concurrent::TimeUnit::J2CPP_FIELD_SIGNATURE(5),
	local_ref< java::util::concurrent::TimeUnit >
> java::util::concurrent::TimeUnit::NANOSECONDS;

static_field<
	java::util::concurrent::TimeUnit::J2CPP_CLASS_NAME,
	java::util::concurrent::TimeUnit::J2CPP_FIELD_NAME(6),
	java::util::concurrent::TimeUnit::J2CPP_FIELD_SIGNATURE(6),
	local_ref< java::util::concurrent::TimeUnit >
> java::util::concurrent::TimeUnit::SECONDS;


J2CPP_DEFINE_CLASS(java::util::concurrent::TimeUnit,"java/util/concurrent/TimeUnit")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,0,"values","()[java.util.concurrent.TimeUnit")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,1,"valueOf","(Ljava/lang/String;)Ljava/util/concurrent/TimeUnit;")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,3,"convert","(JLjava/util/concurrent/TimeUnit;)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,4,"toNanos","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,5,"toMicros","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,6,"toMillis","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,7,"toSeconds","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,8,"toMinutes","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,9,"toHours","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,10,"toDays","(J)J")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,11,"timedWait","(Ljava/lang/Object;J)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,12,"timedJoin","(Ljava/lang/Thread;J)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,13,"sleep","(J)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::TimeUnit,14,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::util::concurrent::TimeUnit,0,"DAYS","Ljava/util/concurrent/TimeUnit;")
J2CPP_DEFINE_FIELD(java::util::concurrent::TimeUnit,1,"HOURS","Ljava/util/concurrent/TimeUnit;")
J2CPP_DEFINE_FIELD(java::util::concurrent::TimeUnit,2,"MICROSECONDS","Ljava/util/concurrent/TimeUnit;")
J2CPP_DEFINE_FIELD(java::util::concurrent::TimeUnit,3,"MILLISECONDS","Ljava/util/concurrent/TimeUnit;")
J2CPP_DEFINE_FIELD(java::util::concurrent::TimeUnit,4,"MINUTES","Ljava/util/concurrent/TimeUnit;")
J2CPP_DEFINE_FIELD(java::util::concurrent::TimeUnit,5,"NANOSECONDS","Ljava/util/concurrent/TimeUnit;")
J2CPP_DEFINE_FIELD(java::util::concurrent::TimeUnit,6,"SECONDS","Ljava/util/concurrent/TimeUnit;")
J2CPP_DEFINE_FIELD(java::util::concurrent::TimeUnit,7,"$VALUES","[java.util.concurrent.TimeUnit")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_TIMEUNIT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.RunnableScheduledFuture
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLESCHEDULEDFUTURE_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLESCHEDULEDFUTURE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Comparable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Runnable; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class RunnableFuture; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class Future; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class ScheduledFuture; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class Delayed; } } } }


#include <java/lang/Comparable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/Runnable.hpp>
#include <java/util/concurrent/Delayed.hpp>
#include <java/util/concurrent/Future.hpp>
#include <java/util/concurrent/RunnableFuture.hpp>
#include <java/util/concurrent/ScheduledFuture.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class RunnableScheduledFuture;
	class RunnableScheduledFuture
		: public object<RunnableScheduledFuture>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)

		explicit RunnableScheduledFuture(jobject jobj)
		: object<RunnableScheduledFuture>(jobj)
		{
		}

		operator local_ref<java::lang::Comparable>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::lang::Runnable>() const;
		operator local_ref<java::util::concurrent::RunnableFuture>() const;
		operator local_ref<java::util::concurrent::Future>() const;
		operator local_ref<java::util::concurrent::ScheduledFuture>() const;
		operator local_ref<java::util::concurrent::Delayed>() const;


		jboolean isPeriodic();
	}; //class RunnableScheduledFuture

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLESCHEDULEDFUTURE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLESCHEDULEDFUTURE_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLESCHEDULEDFUTURE_HPP_IMPL

namespace j2cpp {



java::util::concurrent::RunnableScheduledFuture::operator local_ref<java::lang::Comparable>() const
{
	return local_ref<java::lang::Comparable>(get_jobject());
}

java::util::concurrent::RunnableScheduledFuture::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::concurrent::RunnableScheduledFuture::operator local_ref<java::lang::Runnable>() const
{
	return local_ref<java::lang::Runnable>(get_jobject());
}

java::util::concurrent::RunnableScheduledFuture::operator local_ref<java::util::concurrent::RunnableFuture>() const
{
	return local_ref<java::util::concurrent::RunnableFuture>(get_jobject());
}

java::util::concurrent::RunnableScheduledFuture::operator local_ref<java::util::concurrent::Future>() const
{
	return local_ref<java::util::concurrent::Future>(get_jobject());
}

java::util::concurrent::RunnableScheduledFuture::operator local_ref<java::util::concurrent::ScheduledFuture>() const
{
	return local_ref<java::util::concurrent::ScheduledFuture>(get_jobject());
}

java::util::concurrent::RunnableScheduledFuture::operator local_ref<java::util::concurrent::Delayed>() const
{
	return local_ref<java::util::concurrent::Delayed>(get_jobject());
}

jboolean java::util::concurrent::RunnableScheduledFuture::isPeriodic()
{
	return call_method<
		java::util::concurrent::RunnableScheduledFuture::J2CPP_CLASS_NAME,
		java::util::concurrent::RunnableScheduledFuture::J2CPP_METHOD_NAME(0),
		java::util::concurrent::RunnableScheduledFuture::J2CPP_METHOD_SIGNATURE(0), 
		jboolean
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::util::concurrent::RunnableScheduledFuture,"java/util/concurrent/RunnableScheduledFuture")
J2CPP_DEFINE_METHOD(java::util::concurrent::RunnableScheduledFuture,0,"isPeriodic","()Z")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_RUNNABLESCHEDULEDFUTURE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

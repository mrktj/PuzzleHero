/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.CyclicBarrier
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CYCLICBARRIER_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_CYCLICBARRIER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Runnable; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/Runnable.hpp>
#include <java/util/concurrent/TimeUnit.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class CyclicBarrier;
	class CyclicBarrier
		: public object<CyclicBarrier>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)

		explicit CyclicBarrier(jobject jobj)
		: object<CyclicBarrier>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		CyclicBarrier(jint, local_ref< java::lang::Runnable > const&);
		CyclicBarrier(jint);
		jint getParties();
		jint await();
		jint await(jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		jboolean isBroken();
		void reset();
		jint getNumberWaiting();
	}; //class CyclicBarrier

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CYCLICBARRIER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CYCLICBARRIER_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_CYCLICBARRIER_HPP_IMPL

namespace j2cpp {



java::util::concurrent::CyclicBarrier::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::util::concurrent::CyclicBarrier::CyclicBarrier(jint a0, local_ref< java::lang::Runnable > const &a1)
: object<java::util::concurrent::CyclicBarrier>(
	call_new_object<
		java::util::concurrent::CyclicBarrier::J2CPP_CLASS_NAME,
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_NAME(0),
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1)
)
{
}



java::util::concurrent::CyclicBarrier::CyclicBarrier(jint a0)
: object<java::util::concurrent::CyclicBarrier>(
	call_new_object<
		java::util::concurrent::CyclicBarrier::J2CPP_CLASS_NAME,
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_NAME(1),
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}


jint java::util::concurrent::CyclicBarrier::getParties()
{
	return call_method<
		java::util::concurrent::CyclicBarrier::J2CPP_CLASS_NAME,
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_NAME(2),
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(get_jobject());
}

jint java::util::concurrent::CyclicBarrier::await()
{
	return call_method<
		java::util::concurrent::CyclicBarrier::J2CPP_CLASS_NAME,
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_NAME(3),
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(get_jobject());
}

jint java::util::concurrent::CyclicBarrier::await(jlong a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return call_method<
		java::util::concurrent::CyclicBarrier::J2CPP_CLASS_NAME,
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_NAME(4),
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject(), a0, a1);
}

jboolean java::util::concurrent::CyclicBarrier::isBroken()
{
	return call_method<
		java::util::concurrent::CyclicBarrier::J2CPP_CLASS_NAME,
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_NAME(5),
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_SIGNATURE(5), 
		jboolean
	>(get_jobject());
}

void java::util::concurrent::CyclicBarrier::reset()
{
	return call_method<
		java::util::concurrent::CyclicBarrier::J2CPP_CLASS_NAME,
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_NAME(6),
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject());
}

jint java::util::concurrent::CyclicBarrier::getNumberWaiting()
{
	return call_method<
		java::util::concurrent::CyclicBarrier::J2CPP_CLASS_NAME,
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_NAME(7),
		java::util::concurrent::CyclicBarrier::J2CPP_METHOD_SIGNATURE(7), 
		jint
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::util::concurrent::CyclicBarrier,"java/util/concurrent/CyclicBarrier")
J2CPP_DEFINE_METHOD(java::util::concurrent::CyclicBarrier,0,"<init>","(ILjava/lang/Runnable;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::CyclicBarrier,1,"<init>","(I)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::CyclicBarrier,2,"getParties","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::CyclicBarrier,3,"await","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::CyclicBarrier,4,"await","(JLjava/util/concurrent/TimeUnit;)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::CyclicBarrier,5,"isBroken","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::CyclicBarrier,6,"reset","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::CyclicBarrier,7,"getNumberWaiting","()I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CYCLICBARRIER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.BlockingDeque
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Iterable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }
namespace j2cpp { namespace java { namespace util { class Queue; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class BlockingQueue; } } } }
namespace j2cpp { namespace java { namespace util { class Deque; } } }


#include <java/lang/Iterable.hpp>
#include <java/lang/Object.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Deque.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/Queue.hpp>
#include <java/util/concurrent/BlockingQueue.hpp>
#include <java/util/concurrent/TimeUnit.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class BlockingDeque;
	class BlockingDeque
		: public object<BlockingDeque>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)

		explicit BlockingDeque(jobject jobj)
		: object<BlockingDeque>(jobj)
		{
		}

		operator local_ref<java::lang::Iterable>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::util::Queue>() const;
		operator local_ref<java::util::Collection>() const;
		operator local_ref<java::util::concurrent::BlockingQueue>() const;
		operator local_ref<java::util::Deque>() const;


		void addFirst(local_ref< java::lang::Object >  const&);
		void addLast(local_ref< java::lang::Object >  const&);
		jboolean offerFirst(local_ref< java::lang::Object >  const&);
		jboolean offerLast(local_ref< java::lang::Object >  const&);
		void putFirst(local_ref< java::lang::Object >  const&);
		void putLast(local_ref< java::lang::Object >  const&);
		jboolean offerFirst(local_ref< java::lang::Object >  const&, jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		jboolean offerLast(local_ref< java::lang::Object >  const&, jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		local_ref< java::lang::Object > takeFirst();
		local_ref< java::lang::Object > takeLast();
		local_ref< java::lang::Object > pollFirst(jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		local_ref< java::lang::Object > pollLast(jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		jboolean removeFirstOccurrence(local_ref< java::lang::Object >  const&);
		jboolean removeLastOccurrence(local_ref< java::lang::Object >  const&);
		jboolean add(local_ref< java::lang::Object >  const&);
		jboolean offer(local_ref< java::lang::Object >  const&);
		void put(local_ref< java::lang::Object >  const&);
		jboolean offer(local_ref< java::lang::Object >  const&, jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		local_ref< java::lang::Object > remove();
		local_ref< java::lang::Object > poll();
		local_ref< java::lang::Object > take();
		local_ref< java::lang::Object > poll(jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		local_ref< java::lang::Object > element();
		local_ref< java::lang::Object > peek();
		jboolean remove(local_ref< java::lang::Object >  const&);
		jboolean contains(local_ref< java::lang::Object >  const&);
		jint size();
		local_ref< java::util::Iterator > iterator();
		void push(local_ref< java::lang::Object >  const&);
	}; //class BlockingDeque

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_HPP_IMPL

namespace j2cpp {



java::util::concurrent::BlockingDeque::operator local_ref<java::lang::Iterable>() const
{
	return local_ref<java::lang::Iterable>(get_jobject());
}

java::util::concurrent::BlockingDeque::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::concurrent::BlockingDeque::operator local_ref<java::util::Queue>() const
{
	return local_ref<java::util::Queue>(get_jobject());
}

java::util::concurrent::BlockingDeque::operator local_ref<java::util::Collection>() const
{
	return local_ref<java::util::Collection>(get_jobject());
}

java::util::concurrent::BlockingDeque::operator local_ref<java::util::concurrent::BlockingQueue>() const
{
	return local_ref<java::util::concurrent::BlockingQueue>(get_jobject());
}

java::util::concurrent::BlockingDeque::operator local_ref<java::util::Deque>() const
{
	return local_ref<java::util::Deque>(get_jobject());
}

void java::util::concurrent::BlockingDeque::addFirst(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(0),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0);
}

void java::util::concurrent::BlockingDeque::addLast(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(1),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::BlockingDeque::offerFirst(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(2),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::BlockingDeque::offerLast(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(3),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(get_jobject(), a0);
}

void java::util::concurrent::BlockingDeque::putFirst(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(4),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}

void java::util::concurrent::BlockingDeque::putLast(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(5),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::BlockingDeque::offerFirst(local_ref< java::lang::Object > const &a0, jlong a1, local_ref< java::util::concurrent::TimeUnit > const &a2)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(6),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(6), 
		jboolean
	>(get_jobject(), a0, a1, a2);
}

jboolean java::util::concurrent::BlockingDeque::offerLast(local_ref< java::lang::Object > const &a0, jlong a1, local_ref< java::util::concurrent::TimeUnit > const &a2)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(7),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject(), a0, a1, a2);
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::takeFirst()
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(8),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::takeLast()
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(9),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::pollFirst(jlong a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(10),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::lang::Object >
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::pollLast(jlong a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(11),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< java::lang::Object >
	>(get_jobject(), a0, a1);
}

jboolean java::util::concurrent::BlockingDeque::removeFirstOccurrence(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(12),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(12), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::BlockingDeque::removeLastOccurrence(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(13),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(13), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::BlockingDeque::add(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(14),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(14), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::BlockingDeque::offer(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(15),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(15), 
		jboolean
	>(get_jobject(), a0);
}

void java::util::concurrent::BlockingDeque::put(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(16),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(16), 
		void
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::BlockingDeque::offer(local_ref< java::lang::Object > const &a0, jlong a1, local_ref< java::util::concurrent::TimeUnit > const &a2)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(17),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(17), 
		jboolean
	>(get_jobject(), a0, a1, a2);
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::remove()
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(18),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(18), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::poll()
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(19),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(19), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::take()
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(20),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(20), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::poll(jlong a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(21),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(21), 
		local_ref< java::lang::Object >
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::element()
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(22),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(22), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::concurrent::BlockingDeque::peek()
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(23),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(23), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jboolean java::util::concurrent::BlockingDeque::remove(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(24),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(24), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::BlockingDeque::contains(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(25),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(25), 
		jboolean
	>(get_jobject(), a0);
}

jint java::util::concurrent::BlockingDeque::size()
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(26),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(26), 
		jint
	>(get_jobject());
}

local_ref< java::util::Iterator > java::util::concurrent::BlockingDeque::iterator()
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(27),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(27), 
		local_ref< java::util::Iterator >
	>(get_jobject());
}

void java::util::concurrent::BlockingDeque::push(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::BlockingDeque::J2CPP_CLASS_NAME,
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_NAME(28),
		java::util::concurrent::BlockingDeque::J2CPP_METHOD_SIGNATURE(28), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::BlockingDeque,"java/util/concurrent/BlockingDeque")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,0,"addFirst","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,1,"addLast","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,2,"offerFirst","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,3,"offerLast","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,4,"putFirst","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,5,"putLast","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,6,"offerFirst","(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,7,"offerLast","(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,8,"takeFirst","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,9,"takeLast","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,10,"pollFirst","(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,11,"pollLast","(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,12,"removeFirstOccurrence","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,13,"removeLastOccurrence","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,14,"add","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,15,"offer","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,16,"put","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,17,"offer","(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,18,"remove","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,19,"poll","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,20,"take","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,21,"poll","(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,22,"element","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,23,"peek","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,24,"remove","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,25,"contains","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,26,"size","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,27,"iterator","()Ljava/util/Iterator;")
J2CPP_DEFINE_METHOD(java::util::concurrent::BlockingDeque,28,"push","(Ljava/lang/Object;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_BLOCKINGDEQUE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

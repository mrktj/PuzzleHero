/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.Executors
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_EXECUTORS_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_EXECUTORS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Runnable; } } }
namespace j2cpp { namespace java { namespace security { class PrivilegedExceptionAction; } } }
namespace j2cpp { namespace java { namespace security { class PrivilegedAction; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class Callable; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class ThreadFactory; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class ExecutorService; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class ScheduledExecutorService; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/Runnable.hpp>
#include <java/security/PrivilegedAction.hpp>
#include <java/security/PrivilegedExceptionAction.hpp>
#include <java/util/concurrent/Callable.hpp>
#include <java/util/concurrent/ExecutorService.hpp>
#include <java/util/concurrent/ScheduledExecutorService.hpp>
#include <java/util/concurrent/ThreadFactory.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class Executors;
	class Executors
		: public object<Executors>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)

		explicit Executors(jobject jobj)
		: object<Executors>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static local_ref< java::util::concurrent::ExecutorService > newFixedThreadPool(jint);
		static local_ref< java::util::concurrent::ExecutorService > newFixedThreadPool(jint, local_ref< java::util::concurrent::ThreadFactory >  const&);
		static local_ref< java::util::concurrent::ExecutorService > newSingleThreadExecutor();
		static local_ref< java::util::concurrent::ExecutorService > newSingleThreadExecutor(local_ref< java::util::concurrent::ThreadFactory >  const&);
		static local_ref< java::util::concurrent::ExecutorService > newCachedThreadPool();
		static local_ref< java::util::concurrent::ExecutorService > newCachedThreadPool(local_ref< java::util::concurrent::ThreadFactory >  const&);
		static local_ref< java::util::concurrent::ScheduledExecutorService > newSingleThreadScheduledExecutor();
		static local_ref< java::util::concurrent::ScheduledExecutorService > newSingleThreadScheduledExecutor(local_ref< java::util::concurrent::ThreadFactory >  const&);
		static local_ref< java::util::concurrent::ScheduledExecutorService > newScheduledThreadPool(jint);
		static local_ref< java::util::concurrent::ScheduledExecutorService > newScheduledThreadPool(jint, local_ref< java::util::concurrent::ThreadFactory >  const&);
		static local_ref< java::util::concurrent::ExecutorService > unconfigurableExecutorService(local_ref< java::util::concurrent::ExecutorService >  const&);
		static local_ref< java::util::concurrent::ScheduledExecutorService > unconfigurableScheduledExecutorService(local_ref< java::util::concurrent::ScheduledExecutorService >  const&);
		static local_ref< java::util::concurrent::ThreadFactory > defaultThreadFactory();
		static local_ref< java::util::concurrent::ThreadFactory > privilegedThreadFactory();
		static local_ref< java::util::concurrent::Callable > callable(local_ref< java::lang::Runnable >  const&, local_ref< java::lang::Object >  const&);
		static local_ref< java::util::concurrent::Callable > callable(local_ref< java::lang::Runnable >  const&);
		static local_ref< java::util::concurrent::Callable > callable(local_ref< java::security::PrivilegedAction >  const&);
		static local_ref< java::util::concurrent::Callable > callable(local_ref< java::security::PrivilegedExceptionAction >  const&);
		static local_ref< java::util::concurrent::Callable > privilegedCallable(local_ref< java::util::concurrent::Callable >  const&);
		static local_ref< java::util::concurrent::Callable > privilegedCallableUsingCurrentClassLoader(local_ref< java::util::concurrent::Callable >  const&);
	}; //class Executors

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_EXECUTORS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_EXECUTORS_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_EXECUTORS_HPP_IMPL

namespace j2cpp {



java::util::concurrent::Executors::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


local_ref< java::util::concurrent::ExecutorService > java::util::concurrent::Executors::newFixedThreadPool(jint a0)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(1),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::util::concurrent::ExecutorService >
	>(a0);
}

local_ref< java::util::concurrent::ExecutorService > java::util::concurrent::Executors::newFixedThreadPool(jint a0, local_ref< java::util::concurrent::ThreadFactory > const &a1)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(2),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::util::concurrent::ExecutorService >
	>(a0, a1);
}

local_ref< java::util::concurrent::ExecutorService > java::util::concurrent::Executors::newSingleThreadExecutor()
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(3),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::util::concurrent::ExecutorService >
	>();
}

local_ref< java::util::concurrent::ExecutorService > java::util::concurrent::Executors::newSingleThreadExecutor(local_ref< java::util::concurrent::ThreadFactory > const &a0)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(4),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::util::concurrent::ExecutorService >
	>(a0);
}

local_ref< java::util::concurrent::ExecutorService > java::util::concurrent::Executors::newCachedThreadPool()
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(5),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::util::concurrent::ExecutorService >
	>();
}

local_ref< java::util::concurrent::ExecutorService > java::util::concurrent::Executors::newCachedThreadPool(local_ref< java::util::concurrent::ThreadFactory > const &a0)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(6),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::util::concurrent::ExecutorService >
	>(a0);
}

local_ref< java::util::concurrent::ScheduledExecutorService > java::util::concurrent::Executors::newSingleThreadScheduledExecutor()
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(7),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::util::concurrent::ScheduledExecutorService >
	>();
}

local_ref< java::util::concurrent::ScheduledExecutorService > java::util::concurrent::Executors::newSingleThreadScheduledExecutor(local_ref< java::util::concurrent::ThreadFactory > const &a0)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(8),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::util::concurrent::ScheduledExecutorService >
	>(a0);
}

local_ref< java::util::concurrent::ScheduledExecutorService > java::util::concurrent::Executors::newScheduledThreadPool(jint a0)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(9),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::util::concurrent::ScheduledExecutorService >
	>(a0);
}

local_ref< java::util::concurrent::ScheduledExecutorService > java::util::concurrent::Executors::newScheduledThreadPool(jint a0, local_ref< java::util::concurrent::ThreadFactory > const &a1)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(10),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::util::concurrent::ScheduledExecutorService >
	>(a0, a1);
}

local_ref< java::util::concurrent::ExecutorService > java::util::concurrent::Executors::unconfigurableExecutorService(local_ref< java::util::concurrent::ExecutorService > const &a0)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(11),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< java::util::concurrent::ExecutorService >
	>(a0);
}

local_ref< java::util::concurrent::ScheduledExecutorService > java::util::concurrent::Executors::unconfigurableScheduledExecutorService(local_ref< java::util::concurrent::ScheduledExecutorService > const &a0)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(12),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(12), 
		local_ref< java::util::concurrent::ScheduledExecutorService >
	>(a0);
}

local_ref< java::util::concurrent::ThreadFactory > java::util::concurrent::Executors::defaultThreadFactory()
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(13),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(13), 
		local_ref< java::util::concurrent::ThreadFactory >
	>();
}

local_ref< java::util::concurrent::ThreadFactory > java::util::concurrent::Executors::privilegedThreadFactory()
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(14),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(14), 
		local_ref< java::util::concurrent::ThreadFactory >
	>();
}

local_ref< java::util::concurrent::Callable > java::util::concurrent::Executors::callable(local_ref< java::lang::Runnable > const &a0, local_ref< java::lang::Object > const &a1)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(15),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(15), 
		local_ref< java::util::concurrent::Callable >
	>(a0, a1);
}

local_ref< java::util::concurrent::Callable > java::util::concurrent::Executors::callable(local_ref< java::lang::Runnable > const &a0)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(16),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(16), 
		local_ref< java::util::concurrent::Callable >
	>(a0);
}

local_ref< java::util::concurrent::Callable > java::util::concurrent::Executors::callable(local_ref< java::security::PrivilegedAction > const &a0)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(17),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(17), 
		local_ref< java::util::concurrent::Callable >
	>(a0);
}

local_ref< java::util::concurrent::Callable > java::util::concurrent::Executors::callable(local_ref< java::security::PrivilegedExceptionAction > const &a0)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(18),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(18), 
		local_ref< java::util::concurrent::Callable >
	>(a0);
}

local_ref< java::util::concurrent::Callable > java::util::concurrent::Executors::privilegedCallable(local_ref< java::util::concurrent::Callable > const &a0)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(19),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(19), 
		local_ref< java::util::concurrent::Callable >
	>(a0);
}

local_ref< java::util::concurrent::Callable > java::util::concurrent::Executors::privilegedCallableUsingCurrentClassLoader(local_ref< java::util::concurrent::Callable > const &a0)
{
	return call_static_method<
		java::util::concurrent::Executors::J2CPP_CLASS_NAME,
		java::util::concurrent::Executors::J2CPP_METHOD_NAME(20),
		java::util::concurrent::Executors::J2CPP_METHOD_SIGNATURE(20), 
		local_ref< java::util::concurrent::Callable >
	>(a0);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::Executors,"java/util/concurrent/Executors")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,1,"newFixedThreadPool","(I)Ljava/util/concurrent/ExecutorService;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,2,"newFixedThreadPool","(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,3,"newSingleThreadExecutor","()Ljava/util/concurrent/ExecutorService;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,4,"newSingleThreadExecutor","(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,5,"newCachedThreadPool","()Ljava/util/concurrent/ExecutorService;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,6,"newCachedThreadPool","(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,7,"newSingleThreadScheduledExecutor","()Ljava/util/concurrent/ScheduledExecutorService;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,8,"newSingleThreadScheduledExecutor","(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,9,"newScheduledThreadPool","(I)Ljava/util/concurrent/ScheduledExecutorService;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,10,"newScheduledThreadPool","(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,11,"unconfigurableExecutorService","(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,12,"unconfigurableScheduledExecutorService","(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,13,"defaultThreadFactory","()Ljava/util/concurrent/ThreadFactory;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,14,"privilegedThreadFactory","()Ljava/util/concurrent/ThreadFactory;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,15,"callable","(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,16,"callable","(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,17,"callable","(Ljava/security/PrivilegedAction;)Ljava/util/concurrent/Callable;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,18,"callable","(Ljava/security/PrivilegedExceptionAction;)Ljava/util/concurrent/Callable;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,19,"privilegedCallable","(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;")
J2CPP_DEFINE_METHOD(java::util::concurrent::Executors,20,"privilegedCallableUsingCurrentClassLoader","(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_EXECUTORS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

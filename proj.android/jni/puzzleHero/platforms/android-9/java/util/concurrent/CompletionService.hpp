/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.CompletionService
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_COMPLETIONSERVICE_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_COMPLETIONSERVICE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace lang { class Runnable; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class Callable; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class Future; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/Runnable.hpp>
#include <java/util/concurrent/Callable.hpp>
#include <java/util/concurrent/Future.hpp>
#include <java/util/concurrent/TimeUnit.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class CompletionService;
	class CompletionService
		: public object<CompletionService>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		explicit CompletionService(jobject jobj)
		: object<CompletionService>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		local_ref< java::util::concurrent::Future > submit(local_ref< java::util::concurrent::Callable >  const&);
		local_ref< java::util::concurrent::Future > submit(local_ref< java::lang::Runnable >  const&, local_ref< java::lang::Object >  const&);
		local_ref< java::util::concurrent::Future > take();
		local_ref< java::util::concurrent::Future > poll();
		local_ref< java::util::concurrent::Future > poll(jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
	}; //class CompletionService

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_COMPLETIONSERVICE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_COMPLETIONSERVICE_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_COMPLETIONSERVICE_HPP_IMPL

namespace j2cpp {



java::util::concurrent::CompletionService::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

local_ref< java::util::concurrent::Future > java::util::concurrent::CompletionService::submit(local_ref< java::util::concurrent::Callable > const &a0)
{
	return call_method<
		java::util::concurrent::CompletionService::J2CPP_CLASS_NAME,
		java::util::concurrent::CompletionService::J2CPP_METHOD_NAME(0),
		java::util::concurrent::CompletionService::J2CPP_METHOD_SIGNATURE(0), 
		local_ref< java::util::concurrent::Future >
	>(get_jobject(), a0);
}

local_ref< java::util::concurrent::Future > java::util::concurrent::CompletionService::submit(local_ref< java::lang::Runnable > const &a0, local_ref< java::lang::Object > const &a1)
{
	return call_method<
		java::util::concurrent::CompletionService::J2CPP_CLASS_NAME,
		java::util::concurrent::CompletionService::J2CPP_METHOD_NAME(1),
		java::util::concurrent::CompletionService::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::util::concurrent::Future >
	>(get_jobject(), a0, a1);
}

local_ref< java::util::concurrent::Future > java::util::concurrent::CompletionService::take()
{
	return call_method<
		java::util::concurrent::CompletionService::J2CPP_CLASS_NAME,
		java::util::concurrent::CompletionService::J2CPP_METHOD_NAME(2),
		java::util::concurrent::CompletionService::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::util::concurrent::Future >
	>(get_jobject());
}

local_ref< java::util::concurrent::Future > java::util::concurrent::CompletionService::poll()
{
	return call_method<
		java::util::concurrent::CompletionService::J2CPP_CLASS_NAME,
		java::util::concurrent::CompletionService::J2CPP_METHOD_NAME(3),
		java::util::concurrent::CompletionService::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::util::concurrent::Future >
	>(get_jobject());
}

local_ref< java::util::concurrent::Future > java::util::concurrent::CompletionService::poll(jlong a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return call_method<
		java::util::concurrent::CompletionService::J2CPP_CLASS_NAME,
		java::util::concurrent::CompletionService::J2CPP_METHOD_NAME(4),
		java::util::concurrent::CompletionService::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::util::concurrent::Future >
	>(get_jobject(), a0, a1);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::CompletionService,"java/util/concurrent/CompletionService")
J2CPP_DEFINE_METHOD(java::util::concurrent::CompletionService,0,"submit","(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;")
J2CPP_DEFINE_METHOD(java::util::concurrent::CompletionService,1,"submit","(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;")
J2CPP_DEFINE_METHOD(java::util::concurrent::CompletionService,2,"take","()Ljava/util/concurrent/Future;")
J2CPP_DEFINE_METHOD(java::util::concurrent::CompletionService,3,"poll","()Ljava/util/concurrent/Future;")
J2CPP_DEFINE_METHOD(java::util::concurrent::CompletionService,4,"poll","(JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/Future;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_COMPLETIONSERVICE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

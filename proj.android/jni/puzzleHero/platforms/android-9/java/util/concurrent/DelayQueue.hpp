/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.DelayQueue
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_DELAYQUEUE_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_DELAYQUEUE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Iterable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }
namespace j2cpp { namespace java { namespace util { class Queue; } } }
namespace j2cpp { namespace java { namespace util { class AbstractQueue; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class Delayed; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class TimeUnit; } } } }
namespace j2cpp { namespace java { namespace util { namespace concurrent { class BlockingQueue; } } } }
namespace j2cpp { namespace java { namespace util { class AbstractCollection; } } }


#include <java/lang/Iterable.hpp>
#include <java/lang/Object.hpp>
#include <java/util/AbstractCollection.hpp>
#include <java/util/AbstractQueue.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/Queue.hpp>
#include <java/util/concurrent/BlockingQueue.hpp>
#include <java/util/concurrent/Delayed.hpp>
#include <java/util/concurrent/TimeUnit.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class DelayQueue;
	class DelayQueue
		: public object<DelayQueue>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)

		explicit DelayQueue(jobject jobj)
		: object<DelayQueue>(jobj)
		{
		}

		operator local_ref<java::lang::Iterable>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::util::Queue>() const;
		operator local_ref<java::util::AbstractQueue>() const;
		operator local_ref<java::util::Collection>() const;
		operator local_ref<java::util::concurrent::BlockingQueue>() const;
		operator local_ref<java::util::AbstractCollection>() const;


		DelayQueue();
		DelayQueue(local_ref< java::util::Collection > const&);
		jboolean add(local_ref< java::util::concurrent::Delayed >  const&);
		jboolean offer(local_ref< java::util::concurrent::Delayed >  const&);
		void put(local_ref< java::util::concurrent::Delayed >  const&);
		jboolean offer(local_ref< java::util::concurrent::Delayed >  const&, jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		local_ref< java::util::concurrent::Delayed > poll();
		local_ref< java::util::concurrent::Delayed > take();
		local_ref< java::util::concurrent::Delayed > poll(jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		local_ref< java::util::concurrent::Delayed > peek();
		jint size();
		jint drainTo(local_ref< java::util::Collection >  const&);
		jint drainTo(local_ref< java::util::Collection >  const&, jint);
		void clear();
		jint remainingCapacity();
		local_ref< array< local_ref< java::lang::Object >, 1> > toArray();
		local_ref< array< local_ref< java::lang::Object >, 1> > toArray(local_ref< array< local_ref< java::lang::Object >, 1> >  const&);
		jboolean remove(local_ref< java::lang::Object >  const&);
		local_ref< java::util::Iterator > iterator();
		jboolean add(local_ref< java::lang::Object >  const&);
		local_ref< java::lang::Object > peek_1();
		local_ref< java::lang::Object > poll_1();
		jboolean offer(local_ref< java::lang::Object >  const&);
		local_ref< java::lang::Object > poll_1(jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		local_ref< java::lang::Object > take_1();
		jboolean offer(local_ref< java::lang::Object >  const&, jlong, local_ref< java::util::concurrent::TimeUnit >  const&);
		void put(local_ref< java::lang::Object >  const&);
	}; //class DelayQueue

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_DELAYQUEUE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_DELAYQUEUE_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_DELAYQUEUE_HPP_IMPL

namespace j2cpp {



java::util::concurrent::DelayQueue::operator local_ref<java::lang::Iterable>() const
{
	return local_ref<java::lang::Iterable>(get_jobject());
}

java::util::concurrent::DelayQueue::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::concurrent::DelayQueue::operator local_ref<java::util::Queue>() const
{
	return local_ref<java::util::Queue>(get_jobject());
}

java::util::concurrent::DelayQueue::operator local_ref<java::util::AbstractQueue>() const
{
	return local_ref<java::util::AbstractQueue>(get_jobject());
}

java::util::concurrent::DelayQueue::operator local_ref<java::util::Collection>() const
{
	return local_ref<java::util::Collection>(get_jobject());
}

java::util::concurrent::DelayQueue::operator local_ref<java::util::concurrent::BlockingQueue>() const
{
	return local_ref<java::util::concurrent::BlockingQueue>(get_jobject());
}

java::util::concurrent::DelayQueue::operator local_ref<java::util::AbstractCollection>() const
{
	return local_ref<java::util::AbstractCollection>(get_jobject());
}


java::util::concurrent::DelayQueue::DelayQueue()
: object<java::util::concurrent::DelayQueue>(
	call_new_object<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(0),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}



java::util::concurrent::DelayQueue::DelayQueue(local_ref< java::util::Collection > const &a0)
: object<java::util::concurrent::DelayQueue>(
	call_new_object<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(1),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}


jboolean java::util::concurrent::DelayQueue::add(local_ref< java::util::concurrent::Delayed > const &a0)
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(2),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::DelayQueue::offer(local_ref< java::util::concurrent::Delayed > const &a0)
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(3),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(get_jobject(), a0);
}

void java::util::concurrent::DelayQueue::put(local_ref< java::util::concurrent::Delayed > const &a0)
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(4),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::DelayQueue::offer(local_ref< java::util::concurrent::Delayed > const &a0, jlong a1, local_ref< java::util::concurrent::TimeUnit > const &a2)
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(5),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(5), 
		jboolean
	>(get_jobject(), a0, a1, a2);
}

local_ref< java::util::concurrent::Delayed > java::util::concurrent::DelayQueue::poll()
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(6),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::util::concurrent::Delayed >
	>(get_jobject());
}

local_ref< java::util::concurrent::Delayed > java::util::concurrent::DelayQueue::take()
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(7),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::util::concurrent::Delayed >
	>(get_jobject());
}

local_ref< java::util::concurrent::Delayed > java::util::concurrent::DelayQueue::poll(jlong a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(8),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::util::concurrent::Delayed >
	>(get_jobject(), a0, a1);
}

local_ref< java::util::concurrent::Delayed > java::util::concurrent::DelayQueue::peek()
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(9),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::util::concurrent::Delayed >
	>(get_jobject());
}

jint java::util::concurrent::DelayQueue::size()
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(10),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(10), 
		jint
	>(get_jobject());
}

jint java::util::concurrent::DelayQueue::drainTo(local_ref< java::util::Collection > const &a0)
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(11),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(11), 
		jint
	>(get_jobject(), a0);
}

jint java::util::concurrent::DelayQueue::drainTo(local_ref< java::util::Collection > const &a0, jint a1)
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(12),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(12), 
		jint
	>(get_jobject(), a0, a1);
}

void java::util::concurrent::DelayQueue::clear()
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(13),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject());
}

jint java::util::concurrent::DelayQueue::remainingCapacity()
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(14),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(14), 
		jint
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::Object >, 1> > java::util::concurrent::DelayQueue::toArray()
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(15),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(15), 
		local_ref< array< local_ref< java::lang::Object >, 1> >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::Object >, 1> > java::util::concurrent::DelayQueue::toArray(local_ref< array< local_ref< java::lang::Object >, 1> > const &a0)
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(16),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(16), 
		local_ref< array< local_ref< java::lang::Object >, 1> >
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::DelayQueue::remove(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(17),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(17), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< java::util::Iterator > java::util::concurrent::DelayQueue::iterator()
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(18),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(18), 
		local_ref< java::util::Iterator >
	>(get_jobject());
}

jboolean java::util::concurrent::DelayQueue::add(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(19),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(19), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< java::lang::Object > java::util::concurrent::DelayQueue::peek_1()
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(20),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(20), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::concurrent::DelayQueue::poll_1()
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(21),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(21), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jboolean java::util::concurrent::DelayQueue::offer(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(22),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(22), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< java::lang::Object > java::util::concurrent::DelayQueue::poll_1(jlong a0, local_ref< java::util::concurrent::TimeUnit > const &a1)
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(23),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(23), 
		local_ref< java::lang::Object >
	>(get_jobject(), a0, a1);
}

local_ref< java::lang::Object > java::util::concurrent::DelayQueue::take_1()
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(24),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(24), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jboolean java::util::concurrent::DelayQueue::offer(local_ref< java::lang::Object > const &a0, jlong a1, local_ref< java::util::concurrent::TimeUnit > const &a2)
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(25),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(25), 
		jboolean
	>(get_jobject(), a0, a1, a2);
}

void java::util::concurrent::DelayQueue::put(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::DelayQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::DelayQueue::J2CPP_METHOD_NAME(26),
		java::util::concurrent::DelayQueue::J2CPP_METHOD_SIGNATURE(26), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::DelayQueue,"java/util/concurrent/DelayQueue")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,1,"<init>","(Ljava/util/Collection;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,2,"add","(Ljava/util/concurrent/Delayed;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,3,"offer","(Ljava/util/concurrent/Delayed;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,4,"put","(Ljava/util/concurrent/Delayed;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,5,"offer","(Ljava/util/concurrent/Delayed;JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,6,"poll","()Ljava/util/concurrent/Delayed;")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,7,"take","()Ljava/util/concurrent/Delayed;")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,8,"poll","(JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/Delayed;")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,9,"peek","()Ljava/util/concurrent/Delayed;")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,10,"size","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,11,"drainTo","(Ljava/util/Collection;)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,12,"drainTo","(Ljava/util/Collection;I)I")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,13,"clear","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,14,"remainingCapacity","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,15,"toArray","()[java.lang.Object")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,16,"toArray","([java.lang.Object)[java.lang.Object")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,17,"remove","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,18,"iterator","()Ljava/util/Iterator;")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,19,"add","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,20,"peek","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,21,"poll","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,22,"offer","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,23,"poll","(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,24,"take","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,25,"offer","(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::DelayQueue,26,"put","(Ljava/lang/Object;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_DELAYQUEUE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

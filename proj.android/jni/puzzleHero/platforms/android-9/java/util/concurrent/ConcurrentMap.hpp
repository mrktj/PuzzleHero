/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.ConcurrentMap
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Map; } } }


#include <java/lang/Object.hpp>
#include <java/util/Map.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class ConcurrentMap;
	class ConcurrentMap
		: public object<ConcurrentMap>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)

		explicit ConcurrentMap(jobject jobj)
		: object<ConcurrentMap>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::util::Map>() const;


		local_ref< java::lang::Object > putIfAbsent(local_ref< java::lang::Object >  const&, local_ref< java::lang::Object >  const&);
		jboolean remove(local_ref< java::lang::Object >  const&, local_ref< java::lang::Object >  const&);
		jboolean replace(local_ref< java::lang::Object >  const&, local_ref< java::lang::Object >  const&, local_ref< java::lang::Object >  const&);
		local_ref< java::lang::Object > replace(local_ref< java::lang::Object >  const&, local_ref< java::lang::Object >  const&);
	}; //class ConcurrentMap

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_HPP_IMPL

namespace j2cpp {



java::util::concurrent::ConcurrentMap::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::concurrent::ConcurrentMap::operator local_ref<java::util::Map>() const
{
	return local_ref<java::util::Map>(get_jobject());
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentMap::putIfAbsent(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return call_method<
		java::util::concurrent::ConcurrentMap::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentMap::J2CPP_METHOD_NAME(0),
		java::util::concurrent::ConcurrentMap::J2CPP_METHOD_SIGNATURE(0), 
		local_ref< java::lang::Object >
	>(get_jobject(), a0, a1);
}

jboolean java::util::concurrent::ConcurrentMap::remove(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return call_method<
		java::util::concurrent::ConcurrentMap::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentMap::J2CPP_METHOD_NAME(1),
		java::util::concurrent::ConcurrentMap::J2CPP_METHOD_SIGNATURE(1), 
		jboolean
	>(get_jobject(), a0, a1);
}

jboolean java::util::concurrent::ConcurrentMap::replace(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1, local_ref< java::lang::Object > const &a2)
{
	return call_method<
		java::util::concurrent::ConcurrentMap::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentMap::J2CPP_METHOD_NAME(2),
		java::util::concurrent::ConcurrentMap::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(get_jobject(), a0, a1, a2);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentMap::replace(local_ref< java::lang::Object > const &a0, local_ref< java::lang::Object > const &a1)
{
	return call_method<
		java::util::concurrent::ConcurrentMap::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentMap::J2CPP_METHOD_NAME(3),
		java::util::concurrent::ConcurrentMap::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::Object >
	>(get_jobject(), a0, a1);
}


J2CPP_DEFINE_CLASS(java::util::concurrent::ConcurrentMap,"java/util/concurrent/ConcurrentMap")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentMap,0,"putIfAbsent","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentMap,1,"remove","(Ljava/lang/Object;Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentMap,2,"replace","(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentMap,3,"replace","(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTMAP_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

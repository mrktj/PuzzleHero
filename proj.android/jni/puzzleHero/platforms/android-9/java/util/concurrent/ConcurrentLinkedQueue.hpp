/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.concurrent.ConcurrentLinkedQueue
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTLINKEDQUEUE_HPP_DECL
#define J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTLINKEDQUEUE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Iterable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }
namespace j2cpp { namespace java { namespace util { class Queue; } } }
namespace j2cpp { namespace java { namespace util { class AbstractQueue; } } }
namespace j2cpp { namespace java { namespace util { class Collection; } } }
namespace j2cpp { namespace java { namespace util { class AbstractCollection; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Iterable.hpp>
#include <java/lang/Object.hpp>
#include <java/util/AbstractCollection.hpp>
#include <java/util/AbstractQueue.hpp>
#include <java/util/Collection.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/Queue.hpp>


namespace j2cpp {

namespace java { namespace util { namespace concurrent {

	class ConcurrentLinkedQueue;
	class ConcurrentLinkedQueue
		: public object<ConcurrentLinkedQueue>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)

		explicit ConcurrentLinkedQueue(jobject jobj)
		: object<ConcurrentLinkedQueue>(jobj)
		{
		}

		operator local_ref<java::lang::Iterable>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::util::Queue>() const;
		operator local_ref<java::util::AbstractQueue>() const;
		operator local_ref<java::util::Collection>() const;
		operator local_ref<java::util::AbstractCollection>() const;
		operator local_ref<java::io::Serializable>() const;


		ConcurrentLinkedQueue();
		ConcurrentLinkedQueue(local_ref< java::util::Collection > const&);
		jboolean add(local_ref< java::lang::Object >  const&);
		jboolean offer(local_ref< java::lang::Object >  const&);
		local_ref< java::lang::Object > poll();
		local_ref< java::lang::Object > peek();
		jboolean isEmpty();
		jint size();
		jboolean contains(local_ref< java::lang::Object >  const&);
		jboolean remove(local_ref< java::lang::Object >  const&);
		local_ref< array< local_ref< java::lang::Object >, 1> > toArray();
		local_ref< array< local_ref< java::lang::Object >, 1> > toArray(local_ref< array< local_ref< java::lang::Object >, 1> >  const&);
		local_ref< java::util::Iterator > iterator();
	}; //class ConcurrentLinkedQueue

} //namespace concurrent
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTLINKEDQUEUE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTLINKEDQUEUE_HPP_IMPL
#define J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTLINKEDQUEUE_HPP_IMPL

namespace j2cpp {



java::util::concurrent::ConcurrentLinkedQueue::operator local_ref<java::lang::Iterable>() const
{
	return local_ref<java::lang::Iterable>(get_jobject());
}

java::util::concurrent::ConcurrentLinkedQueue::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::concurrent::ConcurrentLinkedQueue::operator local_ref<java::util::Queue>() const
{
	return local_ref<java::util::Queue>(get_jobject());
}

java::util::concurrent::ConcurrentLinkedQueue::operator local_ref<java::util::AbstractQueue>() const
{
	return local_ref<java::util::AbstractQueue>(get_jobject());
}

java::util::concurrent::ConcurrentLinkedQueue::operator local_ref<java::util::Collection>() const
{
	return local_ref<java::util::Collection>(get_jobject());
}

java::util::concurrent::ConcurrentLinkedQueue::operator local_ref<java::util::AbstractCollection>() const
{
	return local_ref<java::util::AbstractCollection>(get_jobject());
}

java::util::concurrent::ConcurrentLinkedQueue::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


java::util::concurrent::ConcurrentLinkedQueue::ConcurrentLinkedQueue()
: object<java::util::concurrent::ConcurrentLinkedQueue>(
	call_new_object<
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(0),
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}



java::util::concurrent::ConcurrentLinkedQueue::ConcurrentLinkedQueue(local_ref< java::util::Collection > const &a0)
: object<java::util::concurrent::ConcurrentLinkedQueue>(
	call_new_object<
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(1),
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}


jboolean java::util::concurrent::ConcurrentLinkedQueue::add(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(2),
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::ConcurrentLinkedQueue::offer(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(3),
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentLinkedQueue::poll()
{
	return call_method<
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(4),
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::concurrent::ConcurrentLinkedQueue::peek()
{
	return call_method<
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(5),
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jboolean java::util::concurrent::ConcurrentLinkedQueue::isEmpty()
{
	return call_method<
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(6),
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(6), 
		jboolean
	>(get_jobject());
}

jint java::util::concurrent::ConcurrentLinkedQueue::size()
{
	return call_method<
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(7),
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(7), 
		jint
	>(get_jobject());
}

jboolean java::util::concurrent::ConcurrentLinkedQueue::contains(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(8),
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(8), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::util::concurrent::ConcurrentLinkedQueue::remove(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(9),
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(9), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< array< local_ref< java::lang::Object >, 1> > java::util::concurrent::ConcurrentLinkedQueue::toArray()
{
	return call_method<
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(10),
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< array< local_ref< java::lang::Object >, 1> >
	>(get_jobject());
}

local_ref< array< local_ref< java::lang::Object >, 1> > java::util::concurrent::ConcurrentLinkedQueue::toArray(local_ref< array< local_ref< java::lang::Object >, 1> > const &a0)
{
	return call_method<
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(11),
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< array< local_ref< java::lang::Object >, 1> >
	>(get_jobject(), a0);
}

local_ref< java::util::Iterator > java::util::concurrent::ConcurrentLinkedQueue::iterator()
{
	return call_method<
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_CLASS_NAME,
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_NAME(12),
		java::util::concurrent::ConcurrentLinkedQueue::J2CPP_METHOD_SIGNATURE(12), 
		local_ref< java::util::Iterator >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::util::concurrent::ConcurrentLinkedQueue,"java/util/concurrent/ConcurrentLinkedQueue")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,1,"<init>","(Ljava/util/Collection;)V")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,2,"add","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,3,"offer","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,4,"poll","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,5,"peek","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,6,"isEmpty","()Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,7,"size","()I")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,8,"contains","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,9,"remove","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,10,"toArray","()[java.lang.Object")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,11,"toArray","([java.lang.Object)[java.lang.Object")
J2CPP_DEFINE_METHOD(java::util::concurrent::ConcurrentLinkedQueue,12,"iterator","()Ljava/util/Iterator;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_CONCURRENT_CONCURRENTLINKEDQUEUE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

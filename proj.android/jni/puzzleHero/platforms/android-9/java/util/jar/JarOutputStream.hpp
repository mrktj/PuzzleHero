/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.jar.JarOutputStream
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_JAR_JAROUTPUTSTREAM_HPP_DECL
#define J2CPP_JAVA_UTIL_JAR_JAROUTPUTSTREAM_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { namespace jar { class Manifest; } } } }
namespace j2cpp { namespace java { namespace util { namespace zip { class DeflaterOutputStream; } } } }
namespace j2cpp { namespace java { namespace util { namespace zip { class ZipEntry; } } } }
namespace j2cpp { namespace java { namespace util { namespace zip { class ZipOutputStream; } } } }
namespace j2cpp { namespace java { namespace io { class Closeable; } } }
namespace j2cpp { namespace java { namespace io { class Flushable; } } }
namespace j2cpp { namespace java { namespace io { class FilterOutputStream; } } }
namespace j2cpp { namespace java { namespace io { class OutputStream; } } }


#include <java/io/Closeable.hpp>
#include <java/io/FilterOutputStream.hpp>
#include <java/io/Flushable.hpp>
#include <java/io/OutputStream.hpp>
#include <java/lang/Object.hpp>
#include <java/util/jar/Manifest.hpp>
#include <java/util/zip/DeflaterOutputStream.hpp>
#include <java/util/zip/ZipEntry.hpp>
#include <java/util/zip/ZipOutputStream.hpp>


namespace j2cpp {

namespace java { namespace util { namespace jar {

	class JarOutputStream;
	class JarOutputStream
		: public object<JarOutputStream>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		explicit JarOutputStream(jobject jobj)
		: object<JarOutputStream>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::util::zip::DeflaterOutputStream>() const;
		operator local_ref<java::util::zip::ZipOutputStream>() const;
		operator local_ref<java::io::Closeable>() const;
		operator local_ref<java::io::Flushable>() const;
		operator local_ref<java::io::FilterOutputStream>() const;
		operator local_ref<java::io::OutputStream>() const;


		JarOutputStream(local_ref< java::io::OutputStream > const&, local_ref< java::util::jar::Manifest > const&);
		JarOutputStream(local_ref< java::io::OutputStream > const&);
		void putNextEntry(local_ref< java::util::zip::ZipEntry >  const&);
	}; //class JarOutputStream

} //namespace jar
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_JAR_JAROUTPUTSTREAM_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_JAR_JAROUTPUTSTREAM_HPP_IMPL
#define J2CPP_JAVA_UTIL_JAR_JAROUTPUTSTREAM_HPP_IMPL

namespace j2cpp {



java::util::jar::JarOutputStream::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::jar::JarOutputStream::operator local_ref<java::util::zip::DeflaterOutputStream>() const
{
	return local_ref<java::util::zip::DeflaterOutputStream>(get_jobject());
}

java::util::jar::JarOutputStream::operator local_ref<java::util::zip::ZipOutputStream>() const
{
	return local_ref<java::util::zip::ZipOutputStream>(get_jobject());
}

java::util::jar::JarOutputStream::operator local_ref<java::io::Closeable>() const
{
	return local_ref<java::io::Closeable>(get_jobject());
}

java::util::jar::JarOutputStream::operator local_ref<java::io::Flushable>() const
{
	return local_ref<java::io::Flushable>(get_jobject());
}

java::util::jar::JarOutputStream::operator local_ref<java::io::FilterOutputStream>() const
{
	return local_ref<java::io::FilterOutputStream>(get_jobject());
}

java::util::jar::JarOutputStream::operator local_ref<java::io::OutputStream>() const
{
	return local_ref<java::io::OutputStream>(get_jobject());
}


java::util::jar::JarOutputStream::JarOutputStream(local_ref< java::io::OutputStream > const &a0, local_ref< java::util::jar::Manifest > const &a1)
: object<java::util::jar::JarOutputStream>(
	call_new_object<
		java::util::jar::JarOutputStream::J2CPP_CLASS_NAME,
		java::util::jar::JarOutputStream::J2CPP_METHOD_NAME(0),
		java::util::jar::JarOutputStream::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1)
)
{
}



java::util::jar::JarOutputStream::JarOutputStream(local_ref< java::io::OutputStream > const &a0)
: object<java::util::jar::JarOutputStream>(
	call_new_object<
		java::util::jar::JarOutputStream::J2CPP_CLASS_NAME,
		java::util::jar::JarOutputStream::J2CPP_METHOD_NAME(1),
		java::util::jar::JarOutputStream::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}


void java::util::jar::JarOutputStream::putNextEntry(local_ref< java::util::zip::ZipEntry > const &a0)
{
	return call_method<
		java::util::jar::JarOutputStream::J2CPP_CLASS_NAME,
		java::util::jar::JarOutputStream::J2CPP_METHOD_NAME(2),
		java::util::jar::JarOutputStream::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::util::jar::JarOutputStream,"java/util/jar/JarOutputStream")
J2CPP_DEFINE_METHOD(java::util::jar::JarOutputStream,0,"<init>","(Ljava/io/OutputStream;Ljava/util/jar/Manifest;)V")
J2CPP_DEFINE_METHOD(java::util::jar::JarOutputStream,1,"<init>","(Ljava/io/OutputStream;)V")
J2CPP_DEFINE_METHOD(java::util::jar::JarOutputStream,2,"putNextEntry","(Ljava/util/zip/ZipEntry;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_JAR_JAROUTPUTSTREAM_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.logging.Level
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_LEVEL_HPP_DECL
#define J2CPP_JAVA_UTIL_LOGGING_LEVEL_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace util { namespace logging {

	class Level;
	class Level
		: public object<Level>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)

		explicit Level(jobject jobj)
		: object<Level>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		static local_ref< java::util::logging::Level > parse(local_ref< java::lang::String >  const&);
		local_ref< java::lang::String > getName();
		local_ref< java::lang::String > getResourceBundleName();
		jint intValue();
		local_ref< java::lang::String > getLocalizedName();
		jboolean equals(local_ref< java::lang::Object >  const&);
		jint hashCode();
		local_ref< java::lang::String > toString();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::util::logging::Level > > OFF;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::util::logging::Level > > SEVERE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< java::util::logging::Level > > WARNING;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), local_ref< java::util::logging::Level > > INFO;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), local_ref< java::util::logging::Level > > CONFIG;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), local_ref< java::util::logging::Level > > FINE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), local_ref< java::util::logging::Level > > FINER;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), local_ref< java::util::logging::Level > > FINEST;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), local_ref< java::util::logging::Level > > ALL;
	}; //class Level

} //namespace logging
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_LEVEL_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_LEVEL_HPP_IMPL
#define J2CPP_JAVA_UTIL_LOGGING_LEVEL_HPP_IMPL

namespace j2cpp {



java::util::logging::Level::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::logging::Level::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}



local_ref< java::util::logging::Level > java::util::logging::Level::parse(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		java::util::logging::Level::J2CPP_CLASS_NAME,
		java::util::logging::Level::J2CPP_METHOD_NAME(2),
		java::util::logging::Level::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::util::logging::Level >
	>(a0);
}

local_ref< java::lang::String > java::util::logging::Level::getName()
{
	return call_method<
		java::util::logging::Level::J2CPP_CLASS_NAME,
		java::util::logging::Level::J2CPP_METHOD_NAME(3),
		java::util::logging::Level::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > java::util::logging::Level::getResourceBundleName()
{
	return call_method<
		java::util::logging::Level::J2CPP_CLASS_NAME,
		java::util::logging::Level::J2CPP_METHOD_NAME(4),
		java::util::logging::Level::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint java::util::logging::Level::intValue()
{
	return call_method<
		java::util::logging::Level::J2CPP_CLASS_NAME,
		java::util::logging::Level::J2CPP_METHOD_NAME(5),
		java::util::logging::Level::J2CPP_METHOD_SIGNATURE(5), 
		jint
	>(get_jobject());
}

local_ref< java::lang::String > java::util::logging::Level::getLocalizedName()
{
	return call_method<
		java::util::logging::Level::J2CPP_CLASS_NAME,
		java::util::logging::Level::J2CPP_METHOD_NAME(6),
		java::util::logging::Level::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean java::util::logging::Level::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::logging::Level::J2CPP_CLASS_NAME,
		java::util::logging::Level::J2CPP_METHOD_NAME(7),
		java::util::logging::Level::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject(), a0);
}

jint java::util::logging::Level::hashCode()
{
	return call_method<
		java::util::logging::Level::J2CPP_CLASS_NAME,
		java::util::logging::Level::J2CPP_METHOD_NAME(8),
		java::util::logging::Level::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}

local_ref< java::lang::String > java::util::logging::Level::toString()
{
	return call_method<
		java::util::logging::Level::J2CPP_CLASS_NAME,
		java::util::logging::Level::J2CPP_METHOD_NAME(9),
		java::util::logging::Level::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::lang::String >
	>(get_jobject());
}



static_field<
	java::util::logging::Level::J2CPP_CLASS_NAME,
	java::util::logging::Level::J2CPP_FIELD_NAME(0),
	java::util::logging::Level::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::util::logging::Level >
> java::util::logging::Level::OFF;

static_field<
	java::util::logging::Level::J2CPP_CLASS_NAME,
	java::util::logging::Level::J2CPP_FIELD_NAME(1),
	java::util::logging::Level::J2CPP_FIELD_SIGNATURE(1),
	local_ref< java::util::logging::Level >
> java::util::logging::Level::SEVERE;

static_field<
	java::util::logging::Level::J2CPP_CLASS_NAME,
	java::util::logging::Level::J2CPP_FIELD_NAME(2),
	java::util::logging::Level::J2CPP_FIELD_SIGNATURE(2),
	local_ref< java::util::logging::Level >
> java::util::logging::Level::WARNING;

static_field<
	java::util::logging::Level::J2CPP_CLASS_NAME,
	java::util::logging::Level::J2CPP_FIELD_NAME(3),
	java::util::logging::Level::J2CPP_FIELD_SIGNATURE(3),
	local_ref< java::util::logging::Level >
> java::util::logging::Level::INFO;

static_field<
	java::util::logging::Level::J2CPP_CLASS_NAME,
	java::util::logging::Level::J2CPP_FIELD_NAME(4),
	java::util::logging::Level::J2CPP_FIELD_SIGNATURE(4),
	local_ref< java::util::logging::Level >
> java::util::logging::Level::CONFIG;

static_field<
	java::util::logging::Level::J2CPP_CLASS_NAME,
	java::util::logging::Level::J2CPP_FIELD_NAME(5),
	java::util::logging::Level::J2CPP_FIELD_SIGNATURE(5),
	local_ref< java::util::logging::Level >
> java::util::logging::Level::FINE;

static_field<
	java::util::logging::Level::J2CPP_CLASS_NAME,
	java::util::logging::Level::J2CPP_FIELD_NAME(6),
	java::util::logging::Level::J2CPP_FIELD_SIGNATURE(6),
	local_ref< java::util::logging::Level >
> java::util::logging::Level::FINER;

static_field<
	java::util::logging::Level::J2CPP_CLASS_NAME,
	java::util::logging::Level::J2CPP_FIELD_NAME(7),
	java::util::logging::Level::J2CPP_FIELD_SIGNATURE(7),
	local_ref< java::util::logging::Level >
> java::util::logging::Level::FINEST;

static_field<
	java::util::logging::Level::J2CPP_CLASS_NAME,
	java::util::logging::Level::J2CPP_FIELD_NAME(8),
	java::util::logging::Level::J2CPP_FIELD_SIGNATURE(8),
	local_ref< java::util::logging::Level >
> java::util::logging::Level::ALL;


J2CPP_DEFINE_CLASS(java::util::logging::Level,"java/util/logging/Level")
J2CPP_DEFINE_METHOD(java::util::logging::Level,0,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(java::util::logging::Level,1,"<init>","(Ljava/lang/String;ILjava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::logging::Level,2,"parse","(Ljava/lang/String;)Ljava/util/logging/Level;")
J2CPP_DEFINE_METHOD(java::util::logging::Level,3,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::logging::Level,4,"getResourceBundleName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::logging::Level,5,"intValue","()I")
J2CPP_DEFINE_METHOD(java::util::logging::Level,6,"getLocalizedName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::logging::Level,7,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::util::logging::Level,8,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::util::logging::Level,9,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::logging::Level,10,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::util::logging::Level,0,"OFF","Ljava/util/logging/Level;")
J2CPP_DEFINE_FIELD(java::util::logging::Level,1,"SEVERE","Ljava/util/logging/Level;")
J2CPP_DEFINE_FIELD(java::util::logging::Level,2,"WARNING","Ljava/util/logging/Level;")
J2CPP_DEFINE_FIELD(java::util::logging::Level,3,"INFO","Ljava/util/logging/Level;")
J2CPP_DEFINE_FIELD(java::util::logging::Level,4,"CONFIG","Ljava/util/logging/Level;")
J2CPP_DEFINE_FIELD(java::util::logging::Level,5,"FINE","Ljava/util/logging/Level;")
J2CPP_DEFINE_FIELD(java::util::logging::Level,6,"FINER","Ljava/util/logging/Level;")
J2CPP_DEFINE_FIELD(java::util::logging::Level,7,"FINEST","Ljava/util/logging/Level;")
J2CPP_DEFINE_FIELD(java::util::logging::Level,8,"ALL","Ljava/util/logging/Level;")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_LEVEL_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

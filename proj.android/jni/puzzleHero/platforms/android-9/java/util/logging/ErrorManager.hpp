/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.logging.ErrorManager
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_ERRORMANAGER_HPP_DECL
#define J2CPP_JAVA_UTIL_LOGGING_ERRORMANAGER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Exception; } } }
namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Exception.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace util { namespace logging {

	class ErrorManager;
	class ErrorManager
		: public object<ErrorManager>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)

		explicit ErrorManager(jobject jobj)
		: object<ErrorManager>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		ErrorManager();
		void error(local_ref< java::lang::String >  const&, local_ref< java::lang::Exception >  const&, jint);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > GENERIC_FAILURE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > WRITE_FAILURE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > FLUSH_FAILURE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > CLOSE_FAILURE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), jint > OPEN_FAILURE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), jint > FORMAT_FAILURE;
	}; //class ErrorManager

} //namespace logging
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_ERRORMANAGER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_ERRORMANAGER_HPP_IMPL
#define J2CPP_JAVA_UTIL_LOGGING_ERRORMANAGER_HPP_IMPL

namespace j2cpp {



java::util::logging::ErrorManager::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


java::util::logging::ErrorManager::ErrorManager()
: object<java::util::logging::ErrorManager>(
	call_new_object<
		java::util::logging::ErrorManager::J2CPP_CLASS_NAME,
		java::util::logging::ErrorManager::J2CPP_METHOD_NAME(0),
		java::util::logging::ErrorManager::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


void java::util::logging::ErrorManager::error(local_ref< java::lang::String > const &a0, local_ref< java::lang::Exception > const &a1, jint a2)
{
	return call_method<
		java::util::logging::ErrorManager::J2CPP_CLASS_NAME,
		java::util::logging::ErrorManager::J2CPP_METHOD_NAME(1),
		java::util::logging::ErrorManager::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0, a1, a2);
}


static_field<
	java::util::logging::ErrorManager::J2CPP_CLASS_NAME,
	java::util::logging::ErrorManager::J2CPP_FIELD_NAME(0),
	java::util::logging::ErrorManager::J2CPP_FIELD_SIGNATURE(0),
	jint
> java::util::logging::ErrorManager::GENERIC_FAILURE;

static_field<
	java::util::logging::ErrorManager::J2CPP_CLASS_NAME,
	java::util::logging::ErrorManager::J2CPP_FIELD_NAME(1),
	java::util::logging::ErrorManager::J2CPP_FIELD_SIGNATURE(1),
	jint
> java::util::logging::ErrorManager::WRITE_FAILURE;

static_field<
	java::util::logging::ErrorManager::J2CPP_CLASS_NAME,
	java::util::logging::ErrorManager::J2CPP_FIELD_NAME(2),
	java::util::logging::ErrorManager::J2CPP_FIELD_SIGNATURE(2),
	jint
> java::util::logging::ErrorManager::FLUSH_FAILURE;

static_field<
	java::util::logging::ErrorManager::J2CPP_CLASS_NAME,
	java::util::logging::ErrorManager::J2CPP_FIELD_NAME(3),
	java::util::logging::ErrorManager::J2CPP_FIELD_SIGNATURE(3),
	jint
> java::util::logging::ErrorManager::CLOSE_FAILURE;

static_field<
	java::util::logging::ErrorManager::J2CPP_CLASS_NAME,
	java::util::logging::ErrorManager::J2CPP_FIELD_NAME(4),
	java::util::logging::ErrorManager::J2CPP_FIELD_SIGNATURE(4),
	jint
> java::util::logging::ErrorManager::OPEN_FAILURE;

static_field<
	java::util::logging::ErrorManager::J2CPP_CLASS_NAME,
	java::util::logging::ErrorManager::J2CPP_FIELD_NAME(5),
	java::util::logging::ErrorManager::J2CPP_FIELD_SIGNATURE(5),
	jint
> java::util::logging::ErrorManager::FORMAT_FAILURE;


J2CPP_DEFINE_CLASS(java::util::logging::ErrorManager,"java/util/logging/ErrorManager")
J2CPP_DEFINE_METHOD(java::util::logging::ErrorManager,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::util::logging::ErrorManager,1,"error","(Ljava/lang/String;Ljava/lang/Exception;I)V")
J2CPP_DEFINE_FIELD(java::util::logging::ErrorManager,0,"GENERIC_FAILURE","I")
J2CPP_DEFINE_FIELD(java::util::logging::ErrorManager,1,"WRITE_FAILURE","I")
J2CPP_DEFINE_FIELD(java::util::logging::ErrorManager,2,"FLUSH_FAILURE","I")
J2CPP_DEFINE_FIELD(java::util::logging::ErrorManager,3,"CLOSE_FAILURE","I")
J2CPP_DEFINE_FIELD(java::util::logging::ErrorManager,4,"OPEN_FAILURE","I")
J2CPP_DEFINE_FIELD(java::util::logging::ErrorManager,5,"FORMAT_FAILURE","I")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_ERRORMANAGER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.logging.LogRecord
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_LOGRECORD_HPP_DECL
#define J2CPP_JAVA_UTIL_LOGGING_LOGRECORD_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Throwable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class ResourceBundle; } } }
namespace j2cpp { namespace java { namespace util { namespace logging { class Level; } } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/lang/Throwable.hpp>
#include <java/util/ResourceBundle.hpp>
#include <java/util/logging/Level.hpp>


namespace j2cpp {

namespace java { namespace util { namespace logging {

	class LogRecord;
	class LogRecord
		: public object<LogRecord>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)

		explicit LogRecord(jobject jobj)
		: object<LogRecord>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		LogRecord(local_ref< java::util::logging::Level > const&, local_ref< java::lang::String > const&);
		local_ref< java::util::logging::Level > getLevel();
		void setLevel(local_ref< java::util::logging::Level >  const&);
		local_ref< java::lang::String > getLoggerName();
		void setLoggerName(local_ref< java::lang::String >  const&);
		local_ref< java::lang::String > getMessage();
		void setMessage(local_ref< java::lang::String >  const&);
		jlong getMillis();
		void setMillis(jlong);
		local_ref< array< local_ref< java::lang::Object >, 1> > getParameters();
		void setParameters(local_ref< array< local_ref< java::lang::Object >, 1> >  const&);
		local_ref< java::util::ResourceBundle > getResourceBundle();
		void setResourceBundle(local_ref< java::util::ResourceBundle >  const&);
		local_ref< java::lang::String > getResourceBundleName();
		void setResourceBundleName(local_ref< java::lang::String >  const&);
		jlong getSequenceNumber();
		void setSequenceNumber(jlong);
		local_ref< java::lang::String > getSourceClassName();
		void setSourceClassName(local_ref< java::lang::String >  const&);
		local_ref< java::lang::String > getSourceMethodName();
		void setSourceMethodName(local_ref< java::lang::String >  const&);
		jint getThreadID();
		void setThreadID(jint);
		local_ref< java::lang::Throwable > getThrown();
		void setThrown(local_ref< java::lang::Throwable >  const&);
	}; //class LogRecord

} //namespace logging
} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_LOGRECORD_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LOGGING_LOGRECORD_HPP_IMPL
#define J2CPP_JAVA_UTIL_LOGGING_LOGRECORD_HPP_IMPL

namespace j2cpp {



java::util::logging::LogRecord::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::logging::LogRecord::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


java::util::logging::LogRecord::LogRecord(local_ref< java::util::logging::Level > const &a0, local_ref< java::lang::String > const &a1)
: object<java::util::logging::LogRecord>(
	call_new_object<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(0),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1)
)
{
}


local_ref< java::util::logging::Level > java::util::logging::LogRecord::getLevel()
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(1),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::util::logging::Level >
	>(get_jobject());
}

void java::util::logging::LogRecord::setLevel(local_ref< java::util::logging::Level > const &a0)
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(2),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::util::logging::LogRecord::getLoggerName()
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(3),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::String >
	>(get_jobject());
}

void java::util::logging::LogRecord::setLoggerName(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(4),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::util::logging::LogRecord::getMessage()
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(5),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::String >
	>(get_jobject());
}

void java::util::logging::LogRecord::setMessage(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(6),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject(), a0);
}

jlong java::util::logging::LogRecord::getMillis()
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(7),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(7), 
		jlong
	>(get_jobject());
}

void java::util::logging::LogRecord::setMillis(jlong a0)
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(8),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}

local_ref< array< local_ref< java::lang::Object >, 1> > java::util::logging::LogRecord::getParameters()
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(9),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< array< local_ref< java::lang::Object >, 1> >
	>(get_jobject());
}

void java::util::logging::LogRecord::setParameters(local_ref< array< local_ref< java::lang::Object >, 1> > const &a0)
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(10),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject(), a0);
}

local_ref< java::util::ResourceBundle > java::util::logging::LogRecord::getResourceBundle()
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(11),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< java::util::ResourceBundle >
	>(get_jobject());
}

void java::util::logging::LogRecord::setResourceBundle(local_ref< java::util::ResourceBundle > const &a0)
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(12),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(12), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::util::logging::LogRecord::getResourceBundleName()
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(13),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(13), 
		local_ref< java::lang::String >
	>(get_jobject());
}

void java::util::logging::LogRecord::setResourceBundleName(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(14),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(14), 
		void
	>(get_jobject(), a0);
}

jlong java::util::logging::LogRecord::getSequenceNumber()
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(15),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(15), 
		jlong
	>(get_jobject());
}

void java::util::logging::LogRecord::setSequenceNumber(jlong a0)
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(16),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(16), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::util::logging::LogRecord::getSourceClassName()
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(17),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(17), 
		local_ref< java::lang::String >
	>(get_jobject());
}

void java::util::logging::LogRecord::setSourceClassName(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(18),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(18), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::String > java::util::logging::LogRecord::getSourceMethodName()
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(19),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(19), 
		local_ref< java::lang::String >
	>(get_jobject());
}

void java::util::logging::LogRecord::setSourceMethodName(local_ref< java::lang::String > const &a0)
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(20),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(20), 
		void
	>(get_jobject(), a0);
}

jint java::util::logging::LogRecord::getThreadID()
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(21),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(21), 
		jint
	>(get_jobject());
}

void java::util::logging::LogRecord::setThreadID(jint a0)
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(22),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(22), 
		void
	>(get_jobject(), a0);
}

local_ref< java::lang::Throwable > java::util::logging::LogRecord::getThrown()
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(23),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(23), 
		local_ref< java::lang::Throwable >
	>(get_jobject());
}

void java::util::logging::LogRecord::setThrown(local_ref< java::lang::Throwable > const &a0)
{
	return call_method<
		java::util::logging::LogRecord::J2CPP_CLASS_NAME,
		java::util::logging::LogRecord::J2CPP_METHOD_NAME(24),
		java::util::logging::LogRecord::J2CPP_METHOD_SIGNATURE(24), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::util::logging::LogRecord,"java/util/logging/LogRecord")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,0,"<init>","(Ljava/util/logging/Level;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,1,"getLevel","()Ljava/util/logging/Level;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,2,"setLevel","(Ljava/util/logging/Level;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,3,"getLoggerName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,4,"setLoggerName","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,5,"getMessage","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,6,"setMessage","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,7,"getMillis","()J")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,8,"setMillis","(J)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,9,"getParameters","()[java.lang.Object")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,10,"setParameters","([java.lang.Object)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,11,"getResourceBundle","()Ljava/util/ResourceBundle;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,12,"setResourceBundle","(Ljava/util/ResourceBundle;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,13,"getResourceBundleName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,14,"setResourceBundleName","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,15,"getSequenceNumber","()J")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,16,"setSequenceNumber","(J)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,17,"getSourceClassName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,18,"setSourceClassName","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,19,"getSourceMethodName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,20,"setSourceMethodName","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,21,"getThreadID","()I")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,22,"setThreadID","(I)V")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,23,"getThrown","()Ljava/lang/Throwable;")
J2CPP_DEFINE_METHOD(java::util::logging::LogRecord,24,"setThrown","(Ljava/lang/Throwable;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LOGGING_LOGRECORD_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

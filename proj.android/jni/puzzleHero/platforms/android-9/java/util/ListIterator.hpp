/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.util.ListIterator
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LISTITERATOR_HPP_DECL
#define J2CPP_JAVA_UTIL_LISTITERATOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }


#include <java/lang/Object.hpp>
#include <java/util/Iterator.hpp>


namespace j2cpp {

namespace java { namespace util {

	class ListIterator;
	class ListIterator
		: public object<ListIterator>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit ListIterator(jobject jobj)
		: object<ListIterator>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::util::Iterator>() const;


		void add(local_ref< java::lang::Object >  const&);
		jboolean hasNext();
		jboolean hasPrevious();
		local_ref< java::lang::Object > next();
		jint nextIndex();
		local_ref< java::lang::Object > previous();
		jint previousIndex();
		void remove();
		void set(local_ref< java::lang::Object >  const&);
	}; //class ListIterator

} //namespace util
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LISTITERATOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_UTIL_LISTITERATOR_HPP_IMPL
#define J2CPP_JAVA_UTIL_LISTITERATOR_HPP_IMPL

namespace j2cpp {



java::util::ListIterator::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::util::ListIterator::operator local_ref<java::util::Iterator>() const
{
	return local_ref<java::util::Iterator>(get_jobject());
}

void java::util::ListIterator::add(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::ListIterator::J2CPP_CLASS_NAME,
		java::util::ListIterator::J2CPP_METHOD_NAME(0),
		java::util::ListIterator::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0);
}

jboolean java::util::ListIterator::hasNext()
{
	return call_method<
		java::util::ListIterator::J2CPP_CLASS_NAME,
		java::util::ListIterator::J2CPP_METHOD_NAME(1),
		java::util::ListIterator::J2CPP_METHOD_SIGNATURE(1), 
		jboolean
	>(get_jobject());
}

jboolean java::util::ListIterator::hasPrevious()
{
	return call_method<
		java::util::ListIterator::J2CPP_CLASS_NAME,
		java::util::ListIterator::J2CPP_METHOD_NAME(2),
		java::util::ListIterator::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::ListIterator::next()
{
	return call_method<
		java::util::ListIterator::J2CPP_CLASS_NAME,
		java::util::ListIterator::J2CPP_METHOD_NAME(3),
		java::util::ListIterator::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jint java::util::ListIterator::nextIndex()
{
	return call_method<
		java::util::ListIterator::J2CPP_CLASS_NAME,
		java::util::ListIterator::J2CPP_METHOD_NAME(4),
		java::util::ListIterator::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject());
}

local_ref< java::lang::Object > java::util::ListIterator::previous()
{
	return call_method<
		java::util::ListIterator::J2CPP_CLASS_NAME,
		java::util::ListIterator::J2CPP_METHOD_NAME(5),
		java::util::ListIterator::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jint java::util::ListIterator::previousIndex()
{
	return call_method<
		java::util::ListIterator::J2CPP_CLASS_NAME,
		java::util::ListIterator::J2CPP_METHOD_NAME(6),
		java::util::ListIterator::J2CPP_METHOD_SIGNATURE(6), 
		jint
	>(get_jobject());
}

void java::util::ListIterator::remove()
{
	return call_method<
		java::util::ListIterator::J2CPP_CLASS_NAME,
		java::util::ListIterator::J2CPP_METHOD_NAME(7),
		java::util::ListIterator::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject());
}

void java::util::ListIterator::set(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::util::ListIterator::J2CPP_CLASS_NAME,
		java::util::ListIterator::J2CPP_METHOD_NAME(8),
		java::util::ListIterator::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::util::ListIterator,"java/util/ListIterator")
J2CPP_DEFINE_METHOD(java::util::ListIterator,0,"add","(Ljava/lang/Object;)V")
J2CPP_DEFINE_METHOD(java::util::ListIterator,1,"hasNext","()Z")
J2CPP_DEFINE_METHOD(java::util::ListIterator,2,"hasPrevious","()Z")
J2CPP_DEFINE_METHOD(java::util::ListIterator,3,"next","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::ListIterator,4,"nextIndex","()I")
J2CPP_DEFINE_METHOD(java::util::ListIterator,5,"previous","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::util::ListIterator,6,"previousIndex","()I")
J2CPP_DEFINE_METHOD(java::util::ListIterator,7,"remove","()V")
J2CPP_DEFINE_METHOD(java::util::ListIterator,8,"set","(Ljava/lang/Object;)V")

} //namespace j2cpp

#endif //J2CPP_JAVA_UTIL_LISTITERATOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

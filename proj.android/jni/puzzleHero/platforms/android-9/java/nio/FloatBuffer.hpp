/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.nio.FloatBuffer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_FLOATBUFFER_HPP_DECL
#define J2CPP_JAVA_NIO_FLOATBUFFER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Comparable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace nio { class Buffer; } } }
namespace j2cpp { namespace java { namespace nio { class ByteOrder; } } }


#include <java/lang/Comparable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/nio/Buffer.hpp>
#include <java/nio/ByteOrder.hpp>


namespace j2cpp {

namespace java { namespace nio {

	class FloatBuffer;
	class FloatBuffer
		: public object<FloatBuffer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)

		explicit FloatBuffer(jobject jobj)
		: object<FloatBuffer>(jobj)
		{
		}

		operator local_ref<java::lang::Comparable>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::nio::Buffer>() const;


		static local_ref< java::nio::FloatBuffer > allocate(jint);
		static local_ref< java::nio::FloatBuffer > wrap(local_ref< array<jfloat,1> >  const&);
		static local_ref< java::nio::FloatBuffer > wrap(local_ref< array<jfloat,1> >  const&, jint, jint);
		local_ref< array<jfloat,1> > array_();
		jint arrayOffset();
		local_ref< java::nio::FloatBuffer > asReadOnlyBuffer();
		local_ref< java::nio::FloatBuffer > compact();
		jint compareTo(local_ref< java::nio::FloatBuffer >  const&);
		local_ref< java::nio::FloatBuffer > duplicate();
		jboolean equals(local_ref< java::lang::Object >  const&);
		jfloat get();
		local_ref< java::nio::FloatBuffer > get(local_ref< array<jfloat,1> >  const&);
		local_ref< java::nio::FloatBuffer > get(local_ref< array<jfloat,1> >  const&, jint, jint);
		jfloat get(jint);
		jboolean hasArray();
		jint hashCode();
		jboolean isDirect();
		local_ref< java::nio::ByteOrder > order();
		local_ref< java::nio::FloatBuffer > put(jfloat);
		local_ref< java::nio::FloatBuffer > put(local_ref< array<jfloat,1> >  const&);
		local_ref< java::nio::FloatBuffer > put(local_ref< array<jfloat,1> >  const&, jint, jint);
		local_ref< java::nio::FloatBuffer > put(local_ref< java::nio::FloatBuffer >  const&);
		local_ref< java::nio::FloatBuffer > put(jint, jfloat);
		local_ref< java::nio::FloatBuffer > slice();
		local_ref< java::lang::String > toString();
		local_ref< java::lang::Object > array_1();
		jint compareTo(local_ref< java::lang::Object >  const&);
	}; //class FloatBuffer

} //namespace nio
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_FLOATBUFFER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_FLOATBUFFER_HPP_IMPL
#define J2CPP_JAVA_NIO_FLOATBUFFER_HPP_IMPL

namespace j2cpp {



java::nio::FloatBuffer::operator local_ref<java::lang::Comparable>() const
{
	return local_ref<java::lang::Comparable>(get_jobject());
}

java::nio::FloatBuffer::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::nio::FloatBuffer::operator local_ref<java::nio::Buffer>() const
{
	return local_ref<java::nio::Buffer>(get_jobject());
}


local_ref< java::nio::FloatBuffer > java::nio::FloatBuffer::allocate(jint a0)
{
	return call_static_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(1),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::nio::FloatBuffer >
	>(a0);
}

local_ref< java::nio::FloatBuffer > java::nio::FloatBuffer::wrap(local_ref< array<jfloat,1> > const &a0)
{
	return call_static_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(2),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::nio::FloatBuffer >
	>(a0);
}

local_ref< java::nio::FloatBuffer > java::nio::FloatBuffer::wrap(local_ref< array<jfloat,1> > const &a0, jint a1, jint a2)
{
	return call_static_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(3),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::nio::FloatBuffer >
	>(a0, a1, a2);
}

local_ref< array<jfloat,1> > java::nio::FloatBuffer::array_()
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(4),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< array<jfloat,1> >
	>(get_jobject());
}

jint java::nio::FloatBuffer::arrayOffset()
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(5),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(5), 
		jint
	>(get_jobject());
}

local_ref< java::nio::FloatBuffer > java::nio::FloatBuffer::asReadOnlyBuffer()
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(6),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::nio::FloatBuffer >
	>(get_jobject());
}

local_ref< java::nio::FloatBuffer > java::nio::FloatBuffer::compact()
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(7),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(7), 
		local_ref< java::nio::FloatBuffer >
	>(get_jobject());
}

jint java::nio::FloatBuffer::compareTo(local_ref< java::nio::FloatBuffer > const &a0)
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(8),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject(), a0);
}

local_ref< java::nio::FloatBuffer > java::nio::FloatBuffer::duplicate()
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(9),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< java::nio::FloatBuffer >
	>(get_jobject());
}

jboolean java::nio::FloatBuffer::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(10),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(10), 
		jboolean
	>(get_jobject(), a0);
}

jfloat java::nio::FloatBuffer::get()
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(11),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(11), 
		jfloat
	>(get_jobject());
}

local_ref< java::nio::FloatBuffer > java::nio::FloatBuffer::get(local_ref< array<jfloat,1> > const &a0)
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(12),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(12), 
		local_ref< java::nio::FloatBuffer >
	>(get_jobject(), a0);
}

local_ref< java::nio::FloatBuffer > java::nio::FloatBuffer::get(local_ref< array<jfloat,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(13),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(13), 
		local_ref< java::nio::FloatBuffer >
	>(get_jobject(), a0, a1, a2);
}

jfloat java::nio::FloatBuffer::get(jint a0)
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(14),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(14), 
		jfloat
	>(get_jobject(), a0);
}

jboolean java::nio::FloatBuffer::hasArray()
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(15),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(15), 
		jboolean
	>(get_jobject());
}

jint java::nio::FloatBuffer::hashCode()
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(16),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(16), 
		jint
	>(get_jobject());
}

jboolean java::nio::FloatBuffer::isDirect()
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(17),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(17), 
		jboolean
	>(get_jobject());
}

local_ref< java::nio::ByteOrder > java::nio::FloatBuffer::order()
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(18),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(18), 
		local_ref< java::nio::ByteOrder >
	>(get_jobject());
}

local_ref< java::nio::FloatBuffer > java::nio::FloatBuffer::put(jfloat a0)
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(19),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(19), 
		local_ref< java::nio::FloatBuffer >
	>(get_jobject(), a0);
}

local_ref< java::nio::FloatBuffer > java::nio::FloatBuffer::put(local_ref< array<jfloat,1> > const &a0)
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(20),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(20), 
		local_ref< java::nio::FloatBuffer >
	>(get_jobject(), a0);
}

local_ref< java::nio::FloatBuffer > java::nio::FloatBuffer::put(local_ref< array<jfloat,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(21),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(21), 
		local_ref< java::nio::FloatBuffer >
	>(get_jobject(), a0, a1, a2);
}

local_ref< java::nio::FloatBuffer > java::nio::FloatBuffer::put(local_ref< java::nio::FloatBuffer > const &a0)
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(22),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(22), 
		local_ref< java::nio::FloatBuffer >
	>(get_jobject(), a0);
}

local_ref< java::nio::FloatBuffer > java::nio::FloatBuffer::put(jint a0, jfloat a1)
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(23),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(23), 
		local_ref< java::nio::FloatBuffer >
	>(get_jobject(), a0, a1);
}

local_ref< java::nio::FloatBuffer > java::nio::FloatBuffer::slice()
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(24),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(24), 
		local_ref< java::nio::FloatBuffer >
	>(get_jobject());
}

local_ref< java::lang::String > java::nio::FloatBuffer::toString()
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(25),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(25), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::Object > java::nio::FloatBuffer::array_1()
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(26),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(26), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jint java::nio::FloatBuffer::compareTo(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		java::nio::FloatBuffer::J2CPP_CLASS_NAME,
		java::nio::FloatBuffer::J2CPP_METHOD_NAME(27),
		java::nio::FloatBuffer::J2CPP_METHOD_SIGNATURE(27), 
		jint
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::nio::FloatBuffer,"java/nio/FloatBuffer")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,1,"allocate","(I)Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,2,"wrap","([F)Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,3,"wrap","([FII)Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,4,"array","()[F")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,5,"arrayOffset","()I")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,6,"asReadOnlyBuffer","()Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,7,"compact","()Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,8,"compareTo","(Ljava/nio/FloatBuffer;)I")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,9,"duplicate","()Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,10,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,11,"get","()F")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,12,"get","([F)Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,13,"get","([FII)Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,14,"get","(I)F")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,15,"hasArray","()Z")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,16,"hashCode","()I")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,17,"isDirect","()Z")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,18,"order","()Ljava/nio/ByteOrder;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,19,"put","(F)Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,20,"put","([F)Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,21,"put","([FII)Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,22,"put","(Ljava/nio/FloatBuffer;)Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,23,"put","(IF)Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,24,"slice","()Ljava/nio/FloatBuffer;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,25,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,26,"array","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::nio::FloatBuffer,27,"compareTo","(Ljava/lang/Object;)I")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_FLOATBUFFER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.nio.ByteOrder
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_BYTEORDER_HPP_DECL
#define J2CPP_JAVA_NIO_BYTEORDER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace java { namespace nio {

	class ByteOrder;
	class ByteOrder
		: public object<ByteOrder>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		explicit ByteOrder(jobject jobj)
		: object<ByteOrder>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static local_ref< java::nio::ByteOrder > nativeOrder();
		local_ref< java::lang::String > toString();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< java::nio::ByteOrder > > BIG__ENDIAN;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::nio::ByteOrder > > LITTLE__ENDIAN;
	}; //class ByteOrder

} //namespace nio
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_BYTEORDER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_BYTEORDER_HPP_IMPL
#define J2CPP_JAVA_NIO_BYTEORDER_HPP_IMPL

namespace j2cpp {



java::nio::ByteOrder::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


local_ref< java::nio::ByteOrder > java::nio::ByteOrder::nativeOrder()
{
	return call_static_method<
		java::nio::ByteOrder::J2CPP_CLASS_NAME,
		java::nio::ByteOrder::J2CPP_METHOD_NAME(1),
		java::nio::ByteOrder::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::nio::ByteOrder >
	>();
}

local_ref< java::lang::String > java::nio::ByteOrder::toString()
{
	return call_method<
		java::nio::ByteOrder::J2CPP_CLASS_NAME,
		java::nio::ByteOrder::J2CPP_METHOD_NAME(2),
		java::nio::ByteOrder::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::lang::String >
	>(get_jobject());
}



static_field<
	java::nio::ByteOrder::J2CPP_CLASS_NAME,
	java::nio::ByteOrder::J2CPP_FIELD_NAME(0),
	java::nio::ByteOrder::J2CPP_FIELD_SIGNATURE(0),
	local_ref< java::nio::ByteOrder >
> java::nio::ByteOrder::BIG__ENDIAN;

static_field<
	java::nio::ByteOrder::J2CPP_CLASS_NAME,
	java::nio::ByteOrder::J2CPP_FIELD_NAME(1),
	java::nio::ByteOrder::J2CPP_FIELD_SIGNATURE(1),
	local_ref< java::nio::ByteOrder >
> java::nio::ByteOrder::LITTLE__ENDIAN;


J2CPP_DEFINE_CLASS(java::nio::ByteOrder,"java/nio/ByteOrder")
J2CPP_DEFINE_METHOD(java::nio::ByteOrder,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::nio::ByteOrder,1,"nativeOrder","()Ljava/nio/ByteOrder;")
J2CPP_DEFINE_METHOD(java::nio::ByteOrder,2,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(java::nio::ByteOrder,3,"<clinit>","()V")
J2CPP_DEFINE_FIELD(java::nio::ByteOrder,0,"BIG_ENDIAN","Ljava/nio/ByteOrder;")
J2CPP_DEFINE_FIELD(java::nio::ByteOrder,1,"LITTLE_ENDIAN","Ljava/nio/ByteOrder;")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_BYTEORDER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

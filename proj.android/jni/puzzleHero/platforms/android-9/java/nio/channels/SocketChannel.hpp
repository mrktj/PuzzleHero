/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.nio.channels.SocketChannel
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_SOCKETCHANNEL_HPP_DECL
#define J2CPP_JAVA_NIO_CHANNELS_SOCKETCHANNEL_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace nio { class ByteBuffer; } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class WritableByteChannel; } } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class ScatteringByteChannel; } } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class GatheringByteChannel; } } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class ByteChannel; } } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class Channel; } } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class SelectableChannel; } } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class ReadableByteChannel; } } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { namespace spi { class AbstractInterruptibleChannel; } } } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { namespace spi { class AbstractSelectableChannel; } } } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class InterruptibleChannel; } } } }
namespace j2cpp { namespace java { namespace net { class SocketAddress; } } }
namespace j2cpp { namespace java { namespace net { class Socket; } } }
namespace j2cpp { namespace java { namespace io { class Closeable; } } }


#include <java/io/Closeable.hpp>
#include <java/lang/Object.hpp>
#include <java/net/Socket.hpp>
#include <java/net/SocketAddress.hpp>
#include <java/nio/ByteBuffer.hpp>
#include <java/nio/channels/ByteChannel.hpp>
#include <java/nio/channels/Channel.hpp>
#include <java/nio/channels/GatheringByteChannel.hpp>
#include <java/nio/channels/InterruptibleChannel.hpp>
#include <java/nio/channels/ReadableByteChannel.hpp>
#include <java/nio/channels/ScatteringByteChannel.hpp>
#include <java/nio/channels/SelectableChannel.hpp>
#include <java/nio/channels/WritableByteChannel.hpp>
#include <java/nio/channels/spi/AbstractInterruptibleChannel.hpp>
#include <java/nio/channels/spi/AbstractSelectableChannel.hpp>


namespace j2cpp {

namespace java { namespace nio { namespace channels {

	class SocketChannel;
	class SocketChannel
		: public object<SocketChannel>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)

		explicit SocketChannel(jobject jobj)
		: object<SocketChannel>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::nio::channels::WritableByteChannel>() const;
		operator local_ref<java::nio::channels::ScatteringByteChannel>() const;
		operator local_ref<java::nio::channels::GatheringByteChannel>() const;
		operator local_ref<java::nio::channels::ByteChannel>() const;
		operator local_ref<java::nio::channels::Channel>() const;
		operator local_ref<java::nio::channels::SelectableChannel>() const;
		operator local_ref<java::nio::channels::ReadableByteChannel>() const;
		operator local_ref<java::nio::channels::spi::AbstractInterruptibleChannel>() const;
		operator local_ref<java::nio::channels::spi::AbstractSelectableChannel>() const;
		operator local_ref<java::nio::channels::InterruptibleChannel>() const;
		operator local_ref<java::io::Closeable>() const;


		static local_ref< java::nio::channels::SocketChannel > open();
		static local_ref< java::nio::channels::SocketChannel > open(local_ref< java::net::SocketAddress >  const&);
		jint validOps();
		local_ref< java::net::Socket > socket();
		jboolean isConnected();
		jboolean isConnectionPending();
		jboolean connect(local_ref< java::net::SocketAddress >  const&);
		jboolean finishConnect();
		jint read(local_ref< java::nio::ByteBuffer >  const&);
		jlong read(local_ref< array< local_ref< java::nio::ByteBuffer >, 1> >  const&, jint, jint);
		jlong read(local_ref< array< local_ref< java::nio::ByteBuffer >, 1> >  const&);
		jint write(local_ref< java::nio::ByteBuffer >  const&);
		jlong write(local_ref< array< local_ref< java::nio::ByteBuffer >, 1> >  const&, jint, jint);
		jlong write(local_ref< array< local_ref< java::nio::ByteBuffer >, 1> >  const&);
	}; //class SocketChannel

} //namespace channels
} //namespace nio
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_SOCKETCHANNEL_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_SOCKETCHANNEL_HPP_IMPL
#define J2CPP_JAVA_NIO_CHANNELS_SOCKETCHANNEL_HPP_IMPL

namespace j2cpp {



java::nio::channels::SocketChannel::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

java::nio::channels::SocketChannel::operator local_ref<java::nio::channels::WritableByteChannel>() const
{
	return local_ref<java::nio::channels::WritableByteChannel>(get_jobject());
}

java::nio::channels::SocketChannel::operator local_ref<java::nio::channels::ScatteringByteChannel>() const
{
	return local_ref<java::nio::channels::ScatteringByteChannel>(get_jobject());
}

java::nio::channels::SocketChannel::operator local_ref<java::nio::channels::GatheringByteChannel>() const
{
	return local_ref<java::nio::channels::GatheringByteChannel>(get_jobject());
}

java::nio::channels::SocketChannel::operator local_ref<java::nio::channels::ByteChannel>() const
{
	return local_ref<java::nio::channels::ByteChannel>(get_jobject());
}

java::nio::channels::SocketChannel::operator local_ref<java::nio::channels::Channel>() const
{
	return local_ref<java::nio::channels::Channel>(get_jobject());
}

java::nio::channels::SocketChannel::operator local_ref<java::nio::channels::SelectableChannel>() const
{
	return local_ref<java::nio::channels::SelectableChannel>(get_jobject());
}

java::nio::channels::SocketChannel::operator local_ref<java::nio::channels::ReadableByteChannel>() const
{
	return local_ref<java::nio::channels::ReadableByteChannel>(get_jobject());
}

java::nio::channels::SocketChannel::operator local_ref<java::nio::channels::spi::AbstractInterruptibleChannel>() const
{
	return local_ref<java::nio::channels::spi::AbstractInterruptibleChannel>(get_jobject());
}

java::nio::channels::SocketChannel::operator local_ref<java::nio::channels::spi::AbstractSelectableChannel>() const
{
	return local_ref<java::nio::channels::spi::AbstractSelectableChannel>(get_jobject());
}

java::nio::channels::SocketChannel::operator local_ref<java::nio::channels::InterruptibleChannel>() const
{
	return local_ref<java::nio::channels::InterruptibleChannel>(get_jobject());
}

java::nio::channels::SocketChannel::operator local_ref<java::io::Closeable>() const
{
	return local_ref<java::io::Closeable>(get_jobject());
}


local_ref< java::nio::channels::SocketChannel > java::nio::channels::SocketChannel::open()
{
	return call_static_method<
		java::nio::channels::SocketChannel::J2CPP_CLASS_NAME,
		java::nio::channels::SocketChannel::J2CPP_METHOD_NAME(1),
		java::nio::channels::SocketChannel::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::nio::channels::SocketChannel >
	>();
}

local_ref< java::nio::channels::SocketChannel > java::nio::channels::SocketChannel::open(local_ref< java::net::SocketAddress > const &a0)
{
	return call_static_method<
		java::nio::channels::SocketChannel::J2CPP_CLASS_NAME,
		java::nio::channels::SocketChannel::J2CPP_METHOD_NAME(2),
		java::nio::channels::SocketChannel::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::nio::channels::SocketChannel >
	>(a0);
}

jint java::nio::channels::SocketChannel::validOps()
{
	return call_method<
		java::nio::channels::SocketChannel::J2CPP_CLASS_NAME,
		java::nio::channels::SocketChannel::J2CPP_METHOD_NAME(3),
		java::nio::channels::SocketChannel::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(get_jobject());
}

local_ref< java::net::Socket > java::nio::channels::SocketChannel::socket()
{
	return call_method<
		java::nio::channels::SocketChannel::J2CPP_CLASS_NAME,
		java::nio::channels::SocketChannel::J2CPP_METHOD_NAME(4),
		java::nio::channels::SocketChannel::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::net::Socket >
	>(get_jobject());
}

jboolean java::nio::channels::SocketChannel::isConnected()
{
	return call_method<
		java::nio::channels::SocketChannel::J2CPP_CLASS_NAME,
		java::nio::channels::SocketChannel::J2CPP_METHOD_NAME(5),
		java::nio::channels::SocketChannel::J2CPP_METHOD_SIGNATURE(5), 
		jboolean
	>(get_jobject());
}

jboolean java::nio::channels::SocketChannel::isConnectionPending()
{
	return call_method<
		java::nio::channels::SocketChannel::J2CPP_CLASS_NAME,
		java::nio::channels::SocketChannel::J2CPP_METHOD_NAME(6),
		java::nio::channels::SocketChannel::J2CPP_METHOD_SIGNATURE(6), 
		jboolean
	>(get_jobject());
}

jboolean java::nio::channels::SocketChannel::connect(local_ref< java::net::SocketAddress > const &a0)
{
	return call_method<
		java::nio::channels::SocketChannel::J2CPP_CLASS_NAME,
		java::nio::channels::SocketChannel::J2CPP_METHOD_NAME(7),
		java::nio::channels::SocketChannel::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject(), a0);
}

jboolean java::nio::channels::SocketChannel::finishConnect()
{
	return call_method<
		java::nio::channels::SocketChannel::J2CPP_CLASS_NAME,
		java::nio::channels::SocketChannel::J2CPP_METHOD_NAME(8),
		java::nio::channels::SocketChannel::J2CPP_METHOD_SIGNATURE(8), 
		jboolean
	>(get_jobject());
}

jint java::nio::channels::SocketChannel::read(local_ref< java::nio::ByteBuffer > const &a0)
{
	return call_method<
		java::nio::channels::SocketChannel::J2CPP_CLASS_NAME,
		java::nio::channels::SocketChannel::J2CPP_METHOD_NAME(9),
		java::nio::channels::SocketChannel::J2CPP_METHOD_SIGNATURE(9), 
		jint
	>(get_jobject(), a0);
}

jlong java::nio::channels::SocketChannel::read(local_ref< array< local_ref< java::nio::ByteBuffer >, 1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::nio::channels::SocketChannel::J2CPP_CLASS_NAME,
		java::nio::channels::SocketChannel::J2CPP_METHOD_NAME(10),
		java::nio::channels::SocketChannel::J2CPP_METHOD_SIGNATURE(10), 
		jlong
	>(get_jobject(), a0, a1, a2);
}

jlong java::nio::channels::SocketChannel::read(local_ref< array< local_ref< java::nio::ByteBuffer >, 1> > const &a0)
{
	return call_method<
		java::nio::channels::SocketChannel::J2CPP_CLASS_NAME,
		java::nio::channels::SocketChannel::J2CPP_METHOD_NAME(11),
		java::nio::channels::SocketChannel::J2CPP_METHOD_SIGNATURE(11), 
		jlong
	>(get_jobject(), a0);
}

jint java::nio::channels::SocketChannel::write(local_ref< java::nio::ByteBuffer > const &a0)
{
	return call_method<
		java::nio::channels::SocketChannel::J2CPP_CLASS_NAME,
		java::nio::channels::SocketChannel::J2CPP_METHOD_NAME(12),
		java::nio::channels::SocketChannel::J2CPP_METHOD_SIGNATURE(12), 
		jint
	>(get_jobject(), a0);
}

jlong java::nio::channels::SocketChannel::write(local_ref< array< local_ref< java::nio::ByteBuffer >, 1> > const &a0, jint a1, jint a2)
{
	return call_method<
		java::nio::channels::SocketChannel::J2CPP_CLASS_NAME,
		java::nio::channels::SocketChannel::J2CPP_METHOD_NAME(13),
		java::nio::channels::SocketChannel::J2CPP_METHOD_SIGNATURE(13), 
		jlong
	>(get_jobject(), a0, a1, a2);
}

jlong java::nio::channels::SocketChannel::write(local_ref< array< local_ref< java::nio::ByteBuffer >, 1> > const &a0)
{
	return call_method<
		java::nio::channels::SocketChannel::J2CPP_CLASS_NAME,
		java::nio::channels::SocketChannel::J2CPP_METHOD_NAME(14),
		java::nio::channels::SocketChannel::J2CPP_METHOD_SIGNATURE(14), 
		jlong
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(java::nio::channels::SocketChannel,"java/nio/channels/SocketChannel")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,0,"<init>","(Ljava/nio/channels/spi/SelectorProvider;)V")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,1,"open","()Ljava/nio/channels/SocketChannel;")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,2,"open","(Ljava/net/SocketAddress;)Ljava/nio/channels/SocketChannel;")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,3,"validOps","()I")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,4,"socket","()Ljava/net/Socket;")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,5,"isConnected","()Z")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,6,"isConnectionPending","()Z")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,7,"connect","(Ljava/net/SocketAddress;)Z")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,8,"finishConnect","()Z")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,9,"read","(Ljava/nio/ByteBuffer;)I")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,10,"read","([java.nio.ByteBufferII)J")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,11,"read","([java.nio.ByteBuffer)J")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,12,"write","(Ljava/nio/ByteBuffer;)I")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,13,"write","([java.nio.ByteBufferII)J")
J2CPP_DEFINE_METHOD(java::nio::channels::SocketChannel,14,"write","([java.nio.ByteBuffer)J")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_SOCKETCHANNEL_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

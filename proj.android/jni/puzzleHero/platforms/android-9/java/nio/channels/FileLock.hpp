/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.nio.channels.FileLock
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_FILELOCK_HPP_DECL
#define J2CPP_JAVA_NIO_CHANNELS_FILELOCK_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace nio { namespace channels { class FileChannel; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/nio/channels/FileChannel.hpp>


namespace j2cpp {

namespace java { namespace nio { namespace channels {

	class FileLock;
	class FileLock
		: public object<FileLock>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit FileLock(jobject jobj)
		: object<FileLock>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		local_ref< java::nio::channels::FileChannel > channel();
		jlong position();
		jlong size();
		jboolean isShared();
		jboolean overlaps(jlong, jlong);
		jboolean isValid();
		void release();
		local_ref< java::lang::String > toString();
	}; //class FileLock

} //namespace channels
} //namespace nio
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_FILELOCK_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_CHANNELS_FILELOCK_HPP_IMPL
#define J2CPP_JAVA_NIO_CHANNELS_FILELOCK_HPP_IMPL

namespace j2cpp {



java::nio::channels::FileLock::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


local_ref< java::nio::channels::FileChannel > java::nio::channels::FileLock::channel()
{
	return call_method<
		java::nio::channels::FileLock::J2CPP_CLASS_NAME,
		java::nio::channels::FileLock::J2CPP_METHOD_NAME(1),
		java::nio::channels::FileLock::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::nio::channels::FileChannel >
	>(get_jobject());
}

jlong java::nio::channels::FileLock::position()
{
	return call_method<
		java::nio::channels::FileLock::J2CPP_CLASS_NAME,
		java::nio::channels::FileLock::J2CPP_METHOD_NAME(2),
		java::nio::channels::FileLock::J2CPP_METHOD_SIGNATURE(2), 
		jlong
	>(get_jobject());
}

jlong java::nio::channels::FileLock::size()
{
	return call_method<
		java::nio::channels::FileLock::J2CPP_CLASS_NAME,
		java::nio::channels::FileLock::J2CPP_METHOD_NAME(3),
		java::nio::channels::FileLock::J2CPP_METHOD_SIGNATURE(3), 
		jlong
	>(get_jobject());
}

jboolean java::nio::channels::FileLock::isShared()
{
	return call_method<
		java::nio::channels::FileLock::J2CPP_CLASS_NAME,
		java::nio::channels::FileLock::J2CPP_METHOD_NAME(4),
		java::nio::channels::FileLock::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(get_jobject());
}

jboolean java::nio::channels::FileLock::overlaps(jlong a0, jlong a1)
{
	return call_method<
		java::nio::channels::FileLock::J2CPP_CLASS_NAME,
		java::nio::channels::FileLock::J2CPP_METHOD_NAME(5),
		java::nio::channels::FileLock::J2CPP_METHOD_SIGNATURE(5), 
		jboolean
	>(get_jobject(), a0, a1);
}

jboolean java::nio::channels::FileLock::isValid()
{
	return call_method<
		java::nio::channels::FileLock::J2CPP_CLASS_NAME,
		java::nio::channels::FileLock::J2CPP_METHOD_NAME(6),
		java::nio::channels::FileLock::J2CPP_METHOD_SIGNATURE(6), 
		jboolean
	>(get_jobject());
}

void java::nio::channels::FileLock::release()
{
	return call_method<
		java::nio::channels::FileLock::J2CPP_CLASS_NAME,
		java::nio::channels::FileLock::J2CPP_METHOD_NAME(7),
		java::nio::channels::FileLock::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject());
}

local_ref< java::lang::String > java::nio::channels::FileLock::toString()
{
	return call_method<
		java::nio::channels::FileLock::J2CPP_CLASS_NAME,
		java::nio::channels::FileLock::J2CPP_METHOD_NAME(8),
		java::nio::channels::FileLock::J2CPP_METHOD_SIGNATURE(8), 
		local_ref< java::lang::String >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::nio::channels::FileLock,"java/nio/channels/FileLock")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,0,"<init>","(Ljava/nio/channels/FileChannel;JJZ)V")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,1,"channel","()Ljava/nio/channels/FileChannel;")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,2,"position","()J")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,3,"size","()J")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,4,"isShared","()Z")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,5,"overlaps","(JJ)Z")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,6,"isValid","()Z")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,7,"release","()V")
J2CPP_DEFINE_METHOD(java::nio::channels::FileLock,8,"toString","()Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_CHANNELS_FILELOCK_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

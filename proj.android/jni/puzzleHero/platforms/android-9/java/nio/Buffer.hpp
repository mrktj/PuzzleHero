/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: java.nio.Buffer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_BUFFER_HPP_DECL
#define J2CPP_JAVA_NIO_BUFFER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>


namespace j2cpp {

namespace java { namespace nio {

	class Buffer;
	class Buffer
		: public object<Buffer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)

		explicit Buffer(jobject jobj)
		: object<Buffer>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		local_ref< java::lang::Object > array_();
		jint arrayOffset();
		jint capacity();
		local_ref< java::nio::Buffer > clear();
		local_ref< java::nio::Buffer > flip();
		jboolean hasArray();
		jboolean hasRemaining();
		jboolean isDirect();
		jboolean isReadOnly();
		jint limit();
		local_ref< java::nio::Buffer > limit(jint);
		local_ref< java::nio::Buffer > mark();
		jint position();
		local_ref< java::nio::Buffer > position(jint);
		jint remaining();
		local_ref< java::nio::Buffer > reset();
		local_ref< java::nio::Buffer > rewind();
	}; //class Buffer

} //namespace nio
} //namespace java

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_BUFFER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVA_NIO_BUFFER_HPP_IMPL
#define J2CPP_JAVA_NIO_BUFFER_HPP_IMPL

namespace j2cpp {



java::nio::Buffer::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


local_ref< java::lang::Object > java::nio::Buffer::array_()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(1),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::Object >
	>(get_jobject());
}

jint java::nio::Buffer::arrayOffset()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(2),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(get_jobject());
}

jint java::nio::Buffer::capacity()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(3),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(get_jobject());
}

local_ref< java::nio::Buffer > java::nio::Buffer::clear()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(4),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::nio::Buffer >
	>(get_jobject());
}

local_ref< java::nio::Buffer > java::nio::Buffer::flip()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(5),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::nio::Buffer >
	>(get_jobject());
}

jboolean java::nio::Buffer::hasArray()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(6),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(6), 
		jboolean
	>(get_jobject());
}

jboolean java::nio::Buffer::hasRemaining()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(7),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject());
}

jboolean java::nio::Buffer::isDirect()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(8),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(8), 
		jboolean
	>(get_jobject());
}

jboolean java::nio::Buffer::isReadOnly()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(9),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(9), 
		jboolean
	>(get_jobject());
}

jint java::nio::Buffer::limit()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(10),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(10), 
		jint
	>(get_jobject());
}

local_ref< java::nio::Buffer > java::nio::Buffer::limit(jint a0)
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(11),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< java::nio::Buffer >
	>(get_jobject(), a0);
}

local_ref< java::nio::Buffer > java::nio::Buffer::mark()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(12),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(12), 
		local_ref< java::nio::Buffer >
	>(get_jobject());
}

jint java::nio::Buffer::position()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(13),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(13), 
		jint
	>(get_jobject());
}

local_ref< java::nio::Buffer > java::nio::Buffer::position(jint a0)
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(14),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(14), 
		local_ref< java::nio::Buffer >
	>(get_jobject(), a0);
}

jint java::nio::Buffer::remaining()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(15),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(15), 
		jint
	>(get_jobject());
}

local_ref< java::nio::Buffer > java::nio::Buffer::reset()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(16),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(16), 
		local_ref< java::nio::Buffer >
	>(get_jobject());
}

local_ref< java::nio::Buffer > java::nio::Buffer::rewind()
{
	return call_method<
		java::nio::Buffer::J2CPP_CLASS_NAME,
		java::nio::Buffer::J2CPP_METHOD_NAME(17),
		java::nio::Buffer::J2CPP_METHOD_SIGNATURE(17), 
		local_ref< java::nio::Buffer >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(java::nio::Buffer,"java/nio/Buffer")
J2CPP_DEFINE_METHOD(java::nio::Buffer,0,"<init>","()V")
J2CPP_DEFINE_METHOD(java::nio::Buffer,1,"array","()Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(java::nio::Buffer,2,"arrayOffset","()I")
J2CPP_DEFINE_METHOD(java::nio::Buffer,3,"capacity","()I")
J2CPP_DEFINE_METHOD(java::nio::Buffer,4,"clear","()Ljava/nio/Buffer;")
J2CPP_DEFINE_METHOD(java::nio::Buffer,5,"flip","()Ljava/nio/Buffer;")
J2CPP_DEFINE_METHOD(java::nio::Buffer,6,"hasArray","()Z")
J2CPP_DEFINE_METHOD(java::nio::Buffer,7,"hasRemaining","()Z")
J2CPP_DEFINE_METHOD(java::nio::Buffer,8,"isDirect","()Z")
J2CPP_DEFINE_METHOD(java::nio::Buffer,9,"isReadOnly","()Z")
J2CPP_DEFINE_METHOD(java::nio::Buffer,10,"limit","()I")
J2CPP_DEFINE_METHOD(java::nio::Buffer,11,"limit","(I)Ljava/nio/Buffer;")
J2CPP_DEFINE_METHOD(java::nio::Buffer,12,"mark","()Ljava/nio/Buffer;")
J2CPP_DEFINE_METHOD(java::nio::Buffer,13,"position","()I")
J2CPP_DEFINE_METHOD(java::nio::Buffer,14,"position","(I)Ljava/nio/Buffer;")
J2CPP_DEFINE_METHOD(java::nio::Buffer,15,"remaining","()I")
J2CPP_DEFINE_METHOD(java::nio::Buffer,16,"reset","()Ljava/nio/Buffer;")
J2CPP_DEFINE_METHOD(java::nio::Buffer,17,"rewind","()Ljava/nio/Buffer;")

} //namespace j2cpp

#endif //J2CPP_JAVA_NIO_BUFFER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.location.Geocoder
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_LOCATION_GEOCODER_HPP_DECL
#define J2CPP_ANDROID_LOCATION_GEOCODER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Locale; } } }
namespace j2cpp { namespace java { namespace util { class List; } } }
namespace j2cpp { namespace android { namespace content { class Context; } } }


#include <android/content/Context.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/List.hpp>
#include <java/util/Locale.hpp>


namespace j2cpp {

namespace android { namespace location {

	class Geocoder;
	class Geocoder
		: public object<Geocoder>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		explicit Geocoder(jobject jobj)
		: object<Geocoder>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		Geocoder(local_ref< android::content::Context > const&, local_ref< java::util::Locale > const&);
		Geocoder(local_ref< android::content::Context > const&);
		static jboolean isPresent();
		local_ref< java::util::List > getFromLocation(jdouble, jdouble, jint);
		local_ref< java::util::List > getFromLocationName(local_ref< java::lang::String >  const&, jint);
		local_ref< java::util::List > getFromLocationName(local_ref< java::lang::String >  const&, jint, jdouble, jdouble, jdouble, jdouble);
	}; //class Geocoder

} //namespace location
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_LOCATION_GEOCODER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_LOCATION_GEOCODER_HPP_IMPL
#define J2CPP_ANDROID_LOCATION_GEOCODER_HPP_IMPL

namespace j2cpp {



android::location::Geocoder::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


android::location::Geocoder::Geocoder(local_ref< android::content::Context > const &a0, local_ref< java::util::Locale > const &a1)
: object<android::location::Geocoder>(
	call_new_object<
		android::location::Geocoder::J2CPP_CLASS_NAME,
		android::location::Geocoder::J2CPP_METHOD_NAME(0),
		android::location::Geocoder::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1)
)
{
}



android::location::Geocoder::Geocoder(local_ref< android::content::Context > const &a0)
: object<android::location::Geocoder>(
	call_new_object<
		android::location::Geocoder::J2CPP_CLASS_NAME,
		android::location::Geocoder::J2CPP_METHOD_NAME(1),
		android::location::Geocoder::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}


jboolean android::location::Geocoder::isPresent()
{
	return call_static_method<
		android::location::Geocoder::J2CPP_CLASS_NAME,
		android::location::Geocoder::J2CPP_METHOD_NAME(2),
		android::location::Geocoder::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>();
}

local_ref< java::util::List > android::location::Geocoder::getFromLocation(jdouble a0, jdouble a1, jint a2)
{
	return call_method<
		android::location::Geocoder::J2CPP_CLASS_NAME,
		android::location::Geocoder::J2CPP_METHOD_NAME(3),
		android::location::Geocoder::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::util::List >
	>(get_jobject(), a0, a1, a2);
}

local_ref< java::util::List > android::location::Geocoder::getFromLocationName(local_ref< java::lang::String > const &a0, jint a1)
{
	return call_method<
		android::location::Geocoder::J2CPP_CLASS_NAME,
		android::location::Geocoder::J2CPP_METHOD_NAME(4),
		android::location::Geocoder::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::util::List >
	>(get_jobject(), a0, a1);
}

local_ref< java::util::List > android::location::Geocoder::getFromLocationName(local_ref< java::lang::String > const &a0, jint a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5)
{
	return call_method<
		android::location::Geocoder::J2CPP_CLASS_NAME,
		android::location::Geocoder::J2CPP_METHOD_NAME(5),
		android::location::Geocoder::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< java::util::List >
	>(get_jobject(), a0, a1, a2, a3, a4, a5);
}


J2CPP_DEFINE_CLASS(android::location::Geocoder,"android/location/Geocoder")
J2CPP_DEFINE_METHOD(android::location::Geocoder,0,"<init>","(Landroid/content/Context;Ljava/util/Locale;)V")
J2CPP_DEFINE_METHOD(android::location::Geocoder,1,"<init>","(Landroid/content/Context;)V")
J2CPP_DEFINE_METHOD(android::location::Geocoder,2,"isPresent","()Z")
J2CPP_DEFINE_METHOD(android::location::Geocoder,3,"getFromLocation","(DDI)Ljava/util/List;")
J2CPP_DEFINE_METHOD(android::location::Geocoder,4,"getFromLocationName","(Ljava/lang/String;I)Ljava/util/List;")
J2CPP_DEFINE_METHOD(android::location::Geocoder,5,"getFromLocationName","(Ljava/lang/String;IDDDD)Ljava/util/List;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_LOCATION_GEOCODER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.graphics.RadialGradient
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GRAPHICS_RADIALGRADIENT_HPP_DECL
#define J2CPP_ANDROID_GRAPHICS_RADIALGRADIENT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace android { namespace graphics { class Shader; } } }
namespace j2cpp { namespace android { namespace graphics { namespace Shader_ { class TileMode; } } } }


#include <android/graphics/Shader.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace graphics {

	class RadialGradient;
	class RadialGradient
		: public object<RadialGradient>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		explicit RadialGradient(jobject jobj)
		: object<RadialGradient>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<android::graphics::Shader>() const;


		RadialGradient(jfloat, jfloat, jfloat, local_ref< array<jint,1> > const&, local_ref< array<jfloat,1> > const&, local_ref< android::graphics::Shader_::TileMode > const&);
		RadialGradient(jfloat, jfloat, jfloat, jint, jint, local_ref< android::graphics::Shader_::TileMode > const&);
	}; //class RadialGradient

} //namespace graphics
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_GRAPHICS_RADIALGRADIENT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_GRAPHICS_RADIALGRADIENT_HPP_IMPL
#define J2CPP_ANDROID_GRAPHICS_RADIALGRADIENT_HPP_IMPL

namespace j2cpp {



android::graphics::RadialGradient::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

android::graphics::RadialGradient::operator local_ref<android::graphics::Shader>() const
{
	return local_ref<android::graphics::Shader>(get_jobject());
}


android::graphics::RadialGradient::RadialGradient(jfloat a0, jfloat a1, jfloat a2, local_ref< array<jint,1> > const &a3, local_ref< array<jfloat,1> > const &a4, local_ref< android::graphics::Shader_::TileMode > const &a5)
: object<android::graphics::RadialGradient>(
	call_new_object<
		android::graphics::RadialGradient::J2CPP_CLASS_NAME,
		android::graphics::RadialGradient::J2CPP_METHOD_NAME(0),
		android::graphics::RadialGradient::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1, a2, a3, a4, a5)
)
{
}



android::graphics::RadialGradient::RadialGradient(jfloat a0, jfloat a1, jfloat a2, jint a3, jint a4, local_ref< android::graphics::Shader_::TileMode > const &a5)
: object<android::graphics::RadialGradient>(
	call_new_object<
		android::graphics::RadialGradient::J2CPP_CLASS_NAME,
		android::graphics::RadialGradient::J2CPP_METHOD_NAME(1),
		android::graphics::RadialGradient::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1, a2, a3, a4, a5)
)
{
}



J2CPP_DEFINE_CLASS(android::graphics::RadialGradient,"android/graphics/RadialGradient")
J2CPP_DEFINE_METHOD(android::graphics::RadialGradient,0,"<init>","(FFF[I[FLandroid/graphics/Shader$TileMode;)V")
J2CPP_DEFINE_METHOD(android::graphics::RadialGradient,1,"<init>","(FFFIILandroid/graphics/Shader$TileMode;)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_GRAPHICS_RADIALGRADIENT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.hardware.Sensor
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_HARDWARE_SENSOR_HPP_DECL
#define J2CPP_ANDROID_HARDWARE_SENSOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace hardware {

	class Sensor;
	class Sensor
		: public object<Sensor>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)
		J2CPP_DECLARE_FIELD(10)
		J2CPP_DECLARE_FIELD(11)

		explicit Sensor(jobject jobj)
		: object<Sensor>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		local_ref< java::lang::String > getName();
		local_ref< java::lang::String > getVendor();
		jint getType();
		jint getVersion();
		jfloat getMaximumRange();
		jfloat getResolution();
		jfloat getPower();
		jint getMinDelay();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > TYPE_ACCELEROMETER;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > TYPE_MAGNETIC_FIELD;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > TYPE_ORIENTATION;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > TYPE_GYROSCOPE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), jint > TYPE_LIGHT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), jint > TYPE_PRESSURE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), jint > TYPE_TEMPERATURE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), jint > TYPE_PROXIMITY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), jint > TYPE_GRAVITY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), jint > TYPE_LINEAR_ACCELERATION;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), jint > TYPE_ROTATION_VECTOR;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(11), J2CPP_FIELD_SIGNATURE(11), jint > TYPE_ALL;
	}; //class Sensor

} //namespace hardware
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_HARDWARE_SENSOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_HARDWARE_SENSOR_HPP_IMPL
#define J2CPP_ANDROID_HARDWARE_SENSOR_HPP_IMPL

namespace j2cpp {



android::hardware::Sensor::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


local_ref< java::lang::String > android::hardware::Sensor::getName()
{
	return call_method<
		android::hardware::Sensor::J2CPP_CLASS_NAME,
		android::hardware::Sensor::J2CPP_METHOD_NAME(1),
		android::hardware::Sensor::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::lang::String > android::hardware::Sensor::getVendor()
{
	return call_method<
		android::hardware::Sensor::J2CPP_CLASS_NAME,
		android::hardware::Sensor::J2CPP_METHOD_NAME(2),
		android::hardware::Sensor::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jint android::hardware::Sensor::getType()
{
	return call_method<
		android::hardware::Sensor::J2CPP_CLASS_NAME,
		android::hardware::Sensor::J2CPP_METHOD_NAME(3),
		android::hardware::Sensor::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(get_jobject());
}

jint android::hardware::Sensor::getVersion()
{
	return call_method<
		android::hardware::Sensor::J2CPP_CLASS_NAME,
		android::hardware::Sensor::J2CPP_METHOD_NAME(4),
		android::hardware::Sensor::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject());
}

jfloat android::hardware::Sensor::getMaximumRange()
{
	return call_method<
		android::hardware::Sensor::J2CPP_CLASS_NAME,
		android::hardware::Sensor::J2CPP_METHOD_NAME(5),
		android::hardware::Sensor::J2CPP_METHOD_SIGNATURE(5), 
		jfloat
	>(get_jobject());
}

jfloat android::hardware::Sensor::getResolution()
{
	return call_method<
		android::hardware::Sensor::J2CPP_CLASS_NAME,
		android::hardware::Sensor::J2CPP_METHOD_NAME(6),
		android::hardware::Sensor::J2CPP_METHOD_SIGNATURE(6), 
		jfloat
	>(get_jobject());
}

jfloat android::hardware::Sensor::getPower()
{
	return call_method<
		android::hardware::Sensor::J2CPP_CLASS_NAME,
		android::hardware::Sensor::J2CPP_METHOD_NAME(7),
		android::hardware::Sensor::J2CPP_METHOD_SIGNATURE(7), 
		jfloat
	>(get_jobject());
}

jint android::hardware::Sensor::getMinDelay()
{
	return call_method<
		android::hardware::Sensor::J2CPP_CLASS_NAME,
		android::hardware::Sensor::J2CPP_METHOD_NAME(8),
		android::hardware::Sensor::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}


static_field<
	android::hardware::Sensor::J2CPP_CLASS_NAME,
	android::hardware::Sensor::J2CPP_FIELD_NAME(0),
	android::hardware::Sensor::J2CPP_FIELD_SIGNATURE(0),
	jint
> android::hardware::Sensor::TYPE_ACCELEROMETER;

static_field<
	android::hardware::Sensor::J2CPP_CLASS_NAME,
	android::hardware::Sensor::J2CPP_FIELD_NAME(1),
	android::hardware::Sensor::J2CPP_FIELD_SIGNATURE(1),
	jint
> android::hardware::Sensor::TYPE_MAGNETIC_FIELD;

static_field<
	android::hardware::Sensor::J2CPP_CLASS_NAME,
	android::hardware::Sensor::J2CPP_FIELD_NAME(2),
	android::hardware::Sensor::J2CPP_FIELD_SIGNATURE(2),
	jint
> android::hardware::Sensor::TYPE_ORIENTATION;

static_field<
	android::hardware::Sensor::J2CPP_CLASS_NAME,
	android::hardware::Sensor::J2CPP_FIELD_NAME(3),
	android::hardware::Sensor::J2CPP_FIELD_SIGNATURE(3),
	jint
> android::hardware::Sensor::TYPE_GYROSCOPE;

static_field<
	android::hardware::Sensor::J2CPP_CLASS_NAME,
	android::hardware::Sensor::J2CPP_FIELD_NAME(4),
	android::hardware::Sensor::J2CPP_FIELD_SIGNATURE(4),
	jint
> android::hardware::Sensor::TYPE_LIGHT;

static_field<
	android::hardware::Sensor::J2CPP_CLASS_NAME,
	android::hardware::Sensor::J2CPP_FIELD_NAME(5),
	android::hardware::Sensor::J2CPP_FIELD_SIGNATURE(5),
	jint
> android::hardware::Sensor::TYPE_PRESSURE;

static_field<
	android::hardware::Sensor::J2CPP_CLASS_NAME,
	android::hardware::Sensor::J2CPP_FIELD_NAME(6),
	android::hardware::Sensor::J2CPP_FIELD_SIGNATURE(6),
	jint
> android::hardware::Sensor::TYPE_TEMPERATURE;

static_field<
	android::hardware::Sensor::J2CPP_CLASS_NAME,
	android::hardware::Sensor::J2CPP_FIELD_NAME(7),
	android::hardware::Sensor::J2CPP_FIELD_SIGNATURE(7),
	jint
> android::hardware::Sensor::TYPE_PROXIMITY;

static_field<
	android::hardware::Sensor::J2CPP_CLASS_NAME,
	android::hardware::Sensor::J2CPP_FIELD_NAME(8),
	android::hardware::Sensor::J2CPP_FIELD_SIGNATURE(8),
	jint
> android::hardware::Sensor::TYPE_GRAVITY;

static_field<
	android::hardware::Sensor::J2CPP_CLASS_NAME,
	android::hardware::Sensor::J2CPP_FIELD_NAME(9),
	android::hardware::Sensor::J2CPP_FIELD_SIGNATURE(9),
	jint
> android::hardware::Sensor::TYPE_LINEAR_ACCELERATION;

static_field<
	android::hardware::Sensor::J2CPP_CLASS_NAME,
	android::hardware::Sensor::J2CPP_FIELD_NAME(10),
	android::hardware::Sensor::J2CPP_FIELD_SIGNATURE(10),
	jint
> android::hardware::Sensor::TYPE_ROTATION_VECTOR;

static_field<
	android::hardware::Sensor::J2CPP_CLASS_NAME,
	android::hardware::Sensor::J2CPP_FIELD_NAME(11),
	android::hardware::Sensor::J2CPP_FIELD_SIGNATURE(11),
	jint
> android::hardware::Sensor::TYPE_ALL;


J2CPP_DEFINE_CLASS(android::hardware::Sensor,"android/hardware/Sensor")
J2CPP_DEFINE_METHOD(android::hardware::Sensor,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::hardware::Sensor,1,"getName","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::hardware::Sensor,2,"getVendor","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::hardware::Sensor,3,"getType","()I")
J2CPP_DEFINE_METHOD(android::hardware::Sensor,4,"getVersion","()I")
J2CPP_DEFINE_METHOD(android::hardware::Sensor,5,"getMaximumRange","()F")
J2CPP_DEFINE_METHOD(android::hardware::Sensor,6,"getResolution","()F")
J2CPP_DEFINE_METHOD(android::hardware::Sensor,7,"getPower","()F")
J2CPP_DEFINE_METHOD(android::hardware::Sensor,8,"getMinDelay","()I")
J2CPP_DEFINE_FIELD(android::hardware::Sensor,0,"TYPE_ACCELEROMETER","I")
J2CPP_DEFINE_FIELD(android::hardware::Sensor,1,"TYPE_MAGNETIC_FIELD","I")
J2CPP_DEFINE_FIELD(android::hardware::Sensor,2,"TYPE_ORIENTATION","I")
J2CPP_DEFINE_FIELD(android::hardware::Sensor,3,"TYPE_GYROSCOPE","I")
J2CPP_DEFINE_FIELD(android::hardware::Sensor,4,"TYPE_LIGHT","I")
J2CPP_DEFINE_FIELD(android::hardware::Sensor,5,"TYPE_PRESSURE","I")
J2CPP_DEFINE_FIELD(android::hardware::Sensor,6,"TYPE_TEMPERATURE","I")
J2CPP_DEFINE_FIELD(android::hardware::Sensor,7,"TYPE_PROXIMITY","I")
J2CPP_DEFINE_FIELD(android::hardware::Sensor,8,"TYPE_GRAVITY","I")
J2CPP_DEFINE_FIELD(android::hardware::Sensor,9,"TYPE_LINEAR_ACCELERATION","I")
J2CPP_DEFINE_FIELD(android::hardware::Sensor,10,"TYPE_ROTATION_VECTOR","I")
J2CPP_DEFINE_FIELD(android::hardware::Sensor,11,"TYPE_ALL","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_HARDWARE_SENSOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

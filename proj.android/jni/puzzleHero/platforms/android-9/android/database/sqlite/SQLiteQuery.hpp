/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.database.sqlite.SQLiteQuery
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_DATABASE_SQLITE_SQLITEQUERY_HPP_DECL
#define J2CPP_ANDROID_DATABASE_SQLITE_SQLITEQUERY_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { class SQLiteProgram; } } } }
namespace j2cpp { namespace android { namespace database { namespace sqlite { class SQLiteClosable; } } } }


#include <android/database/sqlite/SQLiteClosable.hpp>
#include <android/database/sqlite/SQLiteProgram.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace database { namespace sqlite {

	class SQLiteQuery;
	class SQLiteQuery
		: public object<SQLiteQuery>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)

		explicit SQLiteQuery(jobject jobj)
		: object<SQLiteQuery>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<android::database::sqlite::SQLiteProgram>() const;
		operator local_ref<android::database::sqlite::SQLiteClosable>() const;


		local_ref< java::lang::String > toString();
		void close();
		void bindNull(jint);
		void bindLong(jint, jlong);
		void bindDouble(jint, jdouble);
		void bindString(jint, local_ref< java::lang::String >  const&);
	}; //class SQLiteQuery

} //namespace sqlite
} //namespace database
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_DATABASE_SQLITE_SQLITEQUERY_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_DATABASE_SQLITE_SQLITEQUERY_HPP_IMPL
#define J2CPP_ANDROID_DATABASE_SQLITE_SQLITEQUERY_HPP_IMPL

namespace j2cpp {



android::database::sqlite::SQLiteQuery::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

android::database::sqlite::SQLiteQuery::operator local_ref<android::database::sqlite::SQLiteProgram>() const
{
	return local_ref<android::database::sqlite::SQLiteProgram>(get_jobject());
}

android::database::sqlite::SQLiteQuery::operator local_ref<android::database::sqlite::SQLiteClosable>() const
{
	return local_ref<android::database::sqlite::SQLiteClosable>(get_jobject());
}


local_ref< java::lang::String > android::database::sqlite::SQLiteQuery::toString()
{
	return call_method<
		android::database::sqlite::SQLiteQuery::J2CPP_CLASS_NAME,
		android::database::sqlite::SQLiteQuery::J2CPP_METHOD_NAME(1),
		android::database::sqlite::SQLiteQuery::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::String >
	>(get_jobject());
}

void android::database::sqlite::SQLiteQuery::close()
{
	return call_method<
		android::database::sqlite::SQLiteQuery::J2CPP_CLASS_NAME,
		android::database::sqlite::SQLiteQuery::J2CPP_METHOD_NAME(2),
		android::database::sqlite::SQLiteQuery::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject());
}

void android::database::sqlite::SQLiteQuery::bindNull(jint a0)
{
	return call_method<
		android::database::sqlite::SQLiteQuery::J2CPP_CLASS_NAME,
		android::database::sqlite::SQLiteQuery::J2CPP_METHOD_NAME(3),
		android::database::sqlite::SQLiteQuery::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0);
}

void android::database::sqlite::SQLiteQuery::bindLong(jint a0, jlong a1)
{
	return call_method<
		android::database::sqlite::SQLiteQuery::J2CPP_CLASS_NAME,
		android::database::sqlite::SQLiteQuery::J2CPP_METHOD_NAME(4),
		android::database::sqlite::SQLiteQuery::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0, a1);
}

void android::database::sqlite::SQLiteQuery::bindDouble(jint a0, jdouble a1)
{
	return call_method<
		android::database::sqlite::SQLiteQuery::J2CPP_CLASS_NAME,
		android::database::sqlite::SQLiteQuery::J2CPP_METHOD_NAME(5),
		android::database::sqlite::SQLiteQuery::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject(), a0, a1);
}

void android::database::sqlite::SQLiteQuery::bindString(jint a0, local_ref< java::lang::String > const &a1)
{
	return call_method<
		android::database::sqlite::SQLiteQuery::J2CPP_CLASS_NAME,
		android::database::sqlite::SQLiteQuery::J2CPP_METHOD_NAME(6),
		android::database::sqlite::SQLiteQuery::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject(), a0, a1);
}


J2CPP_DEFINE_CLASS(android::database::sqlite::SQLiteQuery,"android/database/sqlite/SQLiteQuery")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteQuery,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteQuery,1,"toString","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteQuery,2,"close","()V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteQuery,3,"bindNull","(I)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteQuery,4,"bindLong","(IJ)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteQuery,5,"bindDouble","(ID)V")
J2CPP_DEFINE_METHOD(android::database::sqlite::SQLiteQuery,6,"bindString","(ILjava/lang/String;)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_DATABASE_SQLITE_SQLITEQUERY_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

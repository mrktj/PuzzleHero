/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.media.SoundPool
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_MEDIA_SOUNDPOOL_HPP_DECL
#define J2CPP_ANDROID_MEDIA_SOUNDPOOL_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class FileDescriptor; } } }
namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace android { namespace content { namespace res { class AssetFileDescriptor; } } } }
namespace j2cpp { namespace android { namespace media { namespace SoundPool_ { class OnLoadCompleteListener; } } } }


#include <android/content/Context.hpp>
#include <android/content/res/AssetFileDescriptor.hpp>
#include <android/media/SoundPool.hpp>
#include <java/io/FileDescriptor.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace media {

	class SoundPool;
	namespace SoundPool_ {

		class OnLoadCompleteListener;
		class OnLoadCompleteListener
			: public object<OnLoadCompleteListener>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			explicit OnLoadCompleteListener(jobject jobj)
			: object<OnLoadCompleteListener>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			void onLoadComplete(local_ref< android::media::SoundPool >  const&, jint, jint);
		}; //class OnLoadCompleteListener

	} //namespace SoundPool_

	class SoundPool
		: public object<SoundPool>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)

		typedef SoundPool_::OnLoadCompleteListener OnLoadCompleteListener;

		explicit SoundPool(jobject jobj)
		: object<SoundPool>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		SoundPool(jint, jint, jint);
		jint load(local_ref< java::lang::String >  const&, jint);
		jint load(local_ref< android::content::Context >  const&, jint, jint);
		jint load(local_ref< android::content::res::AssetFileDescriptor >  const&, jint);
		jint load(local_ref< java::io::FileDescriptor >  const&, jlong, jlong, jint);
		jboolean unload(jint);
		jint play(jint, jfloat, jfloat, jint, jint, jfloat);
		void pause(jint);
		void resume(jint);
		void autoPause();
		void autoResume();
		void stop(jint);
		void setVolume(jint, jfloat, jfloat);
		void setPriority(jint, jint);
		void setLoop(jint, jint);
		void setRate(jint, jfloat);
		void setOnLoadCompleteListener(local_ref< android::media::SoundPool_::OnLoadCompleteListener >  const&);
		void release();
	}; //class SoundPool

} //namespace media
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_MEDIA_SOUNDPOOL_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_MEDIA_SOUNDPOOL_HPP_IMPL
#define J2CPP_ANDROID_MEDIA_SOUNDPOOL_HPP_IMPL

namespace j2cpp {




android::media::SoundPool_::OnLoadCompleteListener::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

void android::media::SoundPool_::OnLoadCompleteListener::onLoadComplete(local_ref< android::media::SoundPool > const &a0, jint a1, jint a2)
{
	return call_method<
		android::media::SoundPool_::OnLoadCompleteListener::J2CPP_CLASS_NAME,
		android::media::SoundPool_::OnLoadCompleteListener::J2CPP_METHOD_NAME(0),
		android::media::SoundPool_::OnLoadCompleteListener::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0, a1, a2);
}


J2CPP_DEFINE_CLASS(android::media::SoundPool_::OnLoadCompleteListener,"android/media/SoundPool$OnLoadCompleteListener")
J2CPP_DEFINE_METHOD(android::media::SoundPool_::OnLoadCompleteListener,0,"onLoadComplete","(Landroid/media/SoundPool;II)V")



android::media::SoundPool::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


android::media::SoundPool::SoundPool(jint a0, jint a1, jint a2)
: object<android::media::SoundPool>(
	call_new_object<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(0),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1, a2)
)
{
}


jint android::media::SoundPool::load(local_ref< java::lang::String > const &a0, jint a1)
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(1),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(1), 
		jint
	>(get_jobject(), a0, a1);
}

jint android::media::SoundPool::load(local_ref< android::content::Context > const &a0, jint a1, jint a2)
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(2),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(get_jobject(), a0, a1, a2);
}

jint android::media::SoundPool::load(local_ref< android::content::res::AssetFileDescriptor > const &a0, jint a1)
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(3),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(get_jobject(), a0, a1);
}

jint android::media::SoundPool::load(local_ref< java::io::FileDescriptor > const &a0, jlong a1, jlong a2, jint a3)
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(4),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject(), a0, a1, a2, a3);
}

jboolean android::media::SoundPool::unload(jint a0)
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(5),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(5), 
		jboolean
	>(get_jobject(), a0);
}

jint android::media::SoundPool::play(jint a0, jfloat a1, jfloat a2, jint a3, jint a4, jfloat a5)
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(6),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(6), 
		jint
	>(get_jobject(), a0, a1, a2, a3, a4, a5);
}

void android::media::SoundPool::pause(jint a0)
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(7),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0);
}

void android::media::SoundPool::resume(jint a0)
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(8),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}

void android::media::SoundPool::autoPause()
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(9),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(9), 
		void
	>(get_jobject());
}

void android::media::SoundPool::autoResume()
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(10),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject());
}

void android::media::SoundPool::stop(jint a0)
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(11),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject(), a0);
}

void android::media::SoundPool::setVolume(jint a0, jfloat a1, jfloat a2)
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(12),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(12), 
		void
	>(get_jobject(), a0, a1, a2);
}

void android::media::SoundPool::setPriority(jint a0, jint a1)
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(13),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject(), a0, a1);
}

void android::media::SoundPool::setLoop(jint a0, jint a1)
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(14),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(14), 
		void
	>(get_jobject(), a0, a1);
}

void android::media::SoundPool::setRate(jint a0, jfloat a1)
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(15),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(15), 
		void
	>(get_jobject(), a0, a1);
}

void android::media::SoundPool::setOnLoadCompleteListener(local_ref< android::media::SoundPool_::OnLoadCompleteListener > const &a0)
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(16),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(16), 
		void
	>(get_jobject(), a0);
}

void android::media::SoundPool::release()
{
	return call_method<
		android::media::SoundPool::J2CPP_CLASS_NAME,
		android::media::SoundPool::J2CPP_METHOD_NAME(17),
		android::media::SoundPool::J2CPP_METHOD_SIGNATURE(17), 
		void
	>(get_jobject());
}



J2CPP_DEFINE_CLASS(android::media::SoundPool,"android/media/SoundPool")
J2CPP_DEFINE_METHOD(android::media::SoundPool,0,"<init>","(III)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,1,"load","(Ljava/lang/String;I)I")
J2CPP_DEFINE_METHOD(android::media::SoundPool,2,"load","(Landroid/content/Context;II)I")
J2CPP_DEFINE_METHOD(android::media::SoundPool,3,"load","(Landroid/content/res/AssetFileDescriptor;I)I")
J2CPP_DEFINE_METHOD(android::media::SoundPool,4,"load","(Ljava/io/FileDescriptor;JJI)I")
J2CPP_DEFINE_METHOD(android::media::SoundPool,5,"unload","(I)Z")
J2CPP_DEFINE_METHOD(android::media::SoundPool,6,"play","(IFFIIF)I")
J2CPP_DEFINE_METHOD(android::media::SoundPool,7,"pause","(I)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,8,"resume","(I)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,9,"autoPause","()V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,10,"autoResume","()V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,11,"stop","(I)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,12,"setVolume","(IFF)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,13,"setPriority","(II)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,14,"setLoop","(II)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,15,"setRate","(IF)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,16,"setOnLoadCompleteListener","(Landroid/media/SoundPool$OnLoadCompleteListener;)V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,17,"release","()V")
J2CPP_DEFINE_METHOD(android::media::SoundPool,18,"finalize","()V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_MEDIA_SOUNDPOOL_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

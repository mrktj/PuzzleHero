/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.media.audiofx.Visualizer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_MEDIA_AUDIOFX_VISUALIZER_HPP_DECL
#define J2CPP_ANDROID_MEDIA_AUDIOFX_VISUALIZER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace android { namespace media { namespace audiofx { namespace Visualizer_ { class OnDataCaptureListener; } } } } }


#include <android/media/audiofx/Visualizer.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace media { namespace audiofx {

	class Visualizer;
	namespace Visualizer_ {

		class OnDataCaptureListener;
		class OnDataCaptureListener
			: public object<OnDataCaptureListener>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			explicit OnDataCaptureListener(jobject jobj)
			: object<OnDataCaptureListener>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			void onWaveFormDataCapture(local_ref< android::media::audiofx::Visualizer >  const&, local_ref< array<jbyte,1> >  const&, jint);
			void onFftDataCapture(local_ref< android::media::audiofx::Visualizer >  const&, local_ref< array<jbyte,1> >  const&, jint);
		}; //class OnDataCaptureListener

	} //namespace Visualizer_

	class Visualizer
		: public object<Visualizer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)
		J2CPP_DECLARE_FIELD(5)
		J2CPP_DECLARE_FIELD(6)
		J2CPP_DECLARE_FIELD(7)
		J2CPP_DECLARE_FIELD(8)
		J2CPP_DECLARE_FIELD(9)
		J2CPP_DECLARE_FIELD(10)

		typedef Visualizer_::OnDataCaptureListener OnDataCaptureListener;

		explicit Visualizer(jobject jobj)
		: object<Visualizer>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		Visualizer(jint);
		void release();
		jint setEnabled(jboolean);
		jboolean getEnabled();
		static local_ref< array<jint,1> > getCaptureSizeRange();
		static jint getMaxCaptureRate();
		jint setCaptureSize(jint);
		jint getCaptureSize();
		jint getSamplingRate();
		jint getWaveForm(local_ref< array<jbyte,1> >  const&);
		jint getFft(local_ref< array<jbyte,1> >  const&);
		jint setDataCaptureListener(local_ref< android::media::audiofx::Visualizer_::OnDataCaptureListener >  const&, jint, jboolean, jboolean);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > STATE_UNINITIALIZED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > STATE_INITIALIZED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > STATE_ENABLED;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > SUCCESS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(4), J2CPP_FIELD_SIGNATURE(4), jint > ERROR;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(5), J2CPP_FIELD_SIGNATURE(5), jint > ALREADY_EXISTS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(6), J2CPP_FIELD_SIGNATURE(6), jint > ERROR_NO_INIT;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(7), J2CPP_FIELD_SIGNATURE(7), jint > ERROR_BAD_VALUE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(8), J2CPP_FIELD_SIGNATURE(8), jint > ERROR_INVALID_OPERATION;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(9), J2CPP_FIELD_SIGNATURE(9), jint > ERROR_NO_MEMORY;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(10), J2CPP_FIELD_SIGNATURE(10), jint > ERROR_DEAD_OBJECT;
	}; //class Visualizer

} //namespace audiofx
} //namespace media
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_MEDIA_AUDIOFX_VISUALIZER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_MEDIA_AUDIOFX_VISUALIZER_HPP_IMPL
#define J2CPP_ANDROID_MEDIA_AUDIOFX_VISUALIZER_HPP_IMPL

namespace j2cpp {




android::media::audiofx::Visualizer_::OnDataCaptureListener::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

void android::media::audiofx::Visualizer_::OnDataCaptureListener::onWaveFormDataCapture(local_ref< android::media::audiofx::Visualizer > const &a0, local_ref< array<jbyte,1> > const &a1, jint a2)
{
	return call_method<
		android::media::audiofx::Visualizer_::OnDataCaptureListener::J2CPP_CLASS_NAME,
		android::media::audiofx::Visualizer_::OnDataCaptureListener::J2CPP_METHOD_NAME(0),
		android::media::audiofx::Visualizer_::OnDataCaptureListener::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0, a1, a2);
}

void android::media::audiofx::Visualizer_::OnDataCaptureListener::onFftDataCapture(local_ref< android::media::audiofx::Visualizer > const &a0, local_ref< array<jbyte,1> > const &a1, jint a2)
{
	return call_method<
		android::media::audiofx::Visualizer_::OnDataCaptureListener::J2CPP_CLASS_NAME,
		android::media::audiofx::Visualizer_::OnDataCaptureListener::J2CPP_METHOD_NAME(1),
		android::media::audiofx::Visualizer_::OnDataCaptureListener::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0, a1, a2);
}


J2CPP_DEFINE_CLASS(android::media::audiofx::Visualizer_::OnDataCaptureListener,"android/media/audiofx/Visualizer$OnDataCaptureListener")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer_::OnDataCaptureListener,0,"onWaveFormDataCapture","(Landroid/media/audiofx/Visualizer;[BI)V")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer_::OnDataCaptureListener,1,"onFftDataCapture","(Landroid/media/audiofx/Visualizer;[BI)V")



android::media::audiofx::Visualizer::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


android::media::audiofx::Visualizer::Visualizer(jint a0)
: object<android::media::audiofx::Visualizer>(
	call_new_object<
		android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
		android::media::audiofx::Visualizer::J2CPP_METHOD_NAME(0),
		android::media::audiofx::Visualizer::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}


void android::media::audiofx::Visualizer::release()
{
	return call_method<
		android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
		android::media::audiofx::Visualizer::J2CPP_METHOD_NAME(1),
		android::media::audiofx::Visualizer::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject());
}


jint android::media::audiofx::Visualizer::setEnabled(jboolean a0)
{
	return call_method<
		android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
		android::media::audiofx::Visualizer::J2CPP_METHOD_NAME(3),
		android::media::audiofx::Visualizer::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(get_jobject(), a0);
}

jboolean android::media::audiofx::Visualizer::getEnabled()
{
	return call_method<
		android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
		android::media::audiofx::Visualizer::J2CPP_METHOD_NAME(4),
		android::media::audiofx::Visualizer::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(get_jobject());
}

local_ref< array<jint,1> > android::media::audiofx::Visualizer::getCaptureSizeRange()
{
	return call_static_method<
		android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
		android::media::audiofx::Visualizer::J2CPP_METHOD_NAME(5),
		android::media::audiofx::Visualizer::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< array<jint,1> >
	>();
}

jint android::media::audiofx::Visualizer::getMaxCaptureRate()
{
	return call_static_method<
		android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
		android::media::audiofx::Visualizer::J2CPP_METHOD_NAME(6),
		android::media::audiofx::Visualizer::J2CPP_METHOD_SIGNATURE(6), 
		jint
	>();
}

jint android::media::audiofx::Visualizer::setCaptureSize(jint a0)
{
	return call_method<
		android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
		android::media::audiofx::Visualizer::J2CPP_METHOD_NAME(7),
		android::media::audiofx::Visualizer::J2CPP_METHOD_SIGNATURE(7), 
		jint
	>(get_jobject(), a0);
}

jint android::media::audiofx::Visualizer::getCaptureSize()
{
	return call_method<
		android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
		android::media::audiofx::Visualizer::J2CPP_METHOD_NAME(8),
		android::media::audiofx::Visualizer::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}

jint android::media::audiofx::Visualizer::getSamplingRate()
{
	return call_method<
		android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
		android::media::audiofx::Visualizer::J2CPP_METHOD_NAME(9),
		android::media::audiofx::Visualizer::J2CPP_METHOD_SIGNATURE(9), 
		jint
	>(get_jobject());
}

jint android::media::audiofx::Visualizer::getWaveForm(local_ref< array<jbyte,1> > const &a0)
{
	return call_method<
		android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
		android::media::audiofx::Visualizer::J2CPP_METHOD_NAME(10),
		android::media::audiofx::Visualizer::J2CPP_METHOD_SIGNATURE(10), 
		jint
	>(get_jobject(), a0);
}

jint android::media::audiofx::Visualizer::getFft(local_ref< array<jbyte,1> > const &a0)
{
	return call_method<
		android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
		android::media::audiofx::Visualizer::J2CPP_METHOD_NAME(11),
		android::media::audiofx::Visualizer::J2CPP_METHOD_SIGNATURE(11), 
		jint
	>(get_jobject(), a0);
}

jint android::media::audiofx::Visualizer::setDataCaptureListener(local_ref< android::media::audiofx::Visualizer_::OnDataCaptureListener > const &a0, jint a1, jboolean a2, jboolean a3)
{
	return call_method<
		android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
		android::media::audiofx::Visualizer::J2CPP_METHOD_NAME(12),
		android::media::audiofx::Visualizer::J2CPP_METHOD_SIGNATURE(12), 
		jint
	>(get_jobject(), a0, a1, a2, a3);
}


static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(0),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(0),
	jint
> android::media::audiofx::Visualizer::STATE_UNINITIALIZED;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(1),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(1),
	jint
> android::media::audiofx::Visualizer::STATE_INITIALIZED;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(2),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(2),
	jint
> android::media::audiofx::Visualizer::STATE_ENABLED;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(3),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(3),
	jint
> android::media::audiofx::Visualizer::SUCCESS;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(4),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(4),
	jint
> android::media::audiofx::Visualizer::ERROR;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(5),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(5),
	jint
> android::media::audiofx::Visualizer::ALREADY_EXISTS;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(6),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(6),
	jint
> android::media::audiofx::Visualizer::ERROR_NO_INIT;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(7),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(7),
	jint
> android::media::audiofx::Visualizer::ERROR_BAD_VALUE;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(8),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(8),
	jint
> android::media::audiofx::Visualizer::ERROR_INVALID_OPERATION;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(9),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(9),
	jint
> android::media::audiofx::Visualizer::ERROR_NO_MEMORY;

static_field<
	android::media::audiofx::Visualizer::J2CPP_CLASS_NAME,
	android::media::audiofx::Visualizer::J2CPP_FIELD_NAME(10),
	android::media::audiofx::Visualizer::J2CPP_FIELD_SIGNATURE(10),
	jint
> android::media::audiofx::Visualizer::ERROR_DEAD_OBJECT;


J2CPP_DEFINE_CLASS(android::media::audiofx::Visualizer,"android/media/audiofx/Visualizer")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,1,"release","()V")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,2,"finalize","()V")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,3,"setEnabled","(Z)I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,4,"getEnabled","()Z")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,5,"getCaptureSizeRange","()[I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,6,"getMaxCaptureRate","()I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,7,"setCaptureSize","(I)I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,8,"getCaptureSize","()I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,9,"getSamplingRate","()I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,10,"getWaveForm","([B)I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,11,"getFft","([B)I")
J2CPP_DEFINE_METHOD(android::media::audiofx::Visualizer,12,"setDataCaptureListener","(Landroid/media/audiofx/Visualizer$OnDataCaptureListener;IZZ)I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,0,"STATE_UNINITIALIZED","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,1,"STATE_INITIALIZED","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,2,"STATE_ENABLED","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,3,"SUCCESS","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,4,"ERROR","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,5,"ALREADY_EXISTS","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,6,"ERROR_NO_INIT","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,7,"ERROR_BAD_VALUE","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,8,"ERROR_INVALID_OPERATION","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,9,"ERROR_NO_MEMORY","I")
J2CPP_DEFINE_FIELD(android::media::audiofx::Visualizer,10,"ERROR_DEAD_OBJECT","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_MEDIA_AUDIOFX_VISUALIZER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.net.sip.SipManager
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_NET_SIP_SIPMANAGER_HPP_DECL
#define J2CPP_ANDROID_NET_SIP_SIPMANAGER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace android { namespace content { class Intent; } } }
namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace android { namespace app { class PendingIntent; } } }
namespace j2cpp { namespace android { namespace net { namespace sip { class SipSession; } } } }
namespace j2cpp { namespace android { namespace net { namespace sip { namespace SipSession_ { class Listener; } } } } }
namespace j2cpp { namespace android { namespace net { namespace sip { class SipAudioCall; } } } }
namespace j2cpp { namespace android { namespace net { namespace sip { namespace SipAudioCall_ { class Listener; } } } } }
namespace j2cpp { namespace android { namespace net { namespace sip { class SipRegistrationListener; } } } }
namespace j2cpp { namespace android { namespace net { namespace sip { class SipProfile; } } } }


#include <android/app/PendingIntent.hpp>
#include <android/content/Context.hpp>
#include <android/content/Intent.hpp>
#include <android/net/sip/SipAudioCall.hpp>
#include <android/net/sip/SipProfile.hpp>
#include <android/net/sip/SipRegistrationListener.hpp>
#include <android/net/sip/SipSession.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace android { namespace net { namespace sip {

	class SipManager;
	class SipManager
		: public object<SipManager>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)

		explicit SipManager(jobject jobj)
		: object<SipManager>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static local_ref< android::net::sip::SipManager > newInstance(local_ref< android::content::Context >  const&);
		static jboolean isApiSupported(local_ref< android::content::Context >  const&);
		static jboolean isVoipSupported(local_ref< android::content::Context >  const&);
		static jboolean isSipWifiOnly(local_ref< android::content::Context >  const&);
		void open(local_ref< android::net::sip::SipProfile >  const&);
		void open(local_ref< android::net::sip::SipProfile >  const&, local_ref< android::app::PendingIntent >  const&, local_ref< android::net::sip::SipRegistrationListener >  const&);
		void setRegistrationListener(local_ref< java::lang::String >  const&, local_ref< android::net::sip::SipRegistrationListener >  const&);
		void close(local_ref< java::lang::String >  const&);
		jboolean isOpened(local_ref< java::lang::String >  const&);
		jboolean isRegistered(local_ref< java::lang::String >  const&);
		local_ref< android::net::sip::SipAudioCall > makeAudioCall(local_ref< android::net::sip::SipProfile >  const&, local_ref< android::net::sip::SipProfile >  const&, local_ref< android::net::sip::SipAudioCall_::Listener >  const&, jint);
		local_ref< android::net::sip::SipAudioCall > makeAudioCall(local_ref< java::lang::String >  const&, local_ref< java::lang::String >  const&, local_ref< android::net::sip::SipAudioCall_::Listener >  const&, jint);
		local_ref< android::net::sip::SipAudioCall > takeAudioCall(local_ref< android::content::Intent >  const&, local_ref< android::net::sip::SipAudioCall_::Listener >  const&);
		static jboolean isIncomingCallIntent(local_ref< android::content::Intent >  const&);
		static local_ref< java::lang::String > getCallId(local_ref< android::content::Intent >  const&);
		static local_ref< java::lang::String > getOfferSessionDescription(local_ref< android::content::Intent >  const&);
		void register_(local_ref< android::net::sip::SipProfile >  const&, jint, local_ref< android::net::sip::SipRegistrationListener >  const&);
		void unregister(local_ref< android::net::sip::SipProfile >  const&, local_ref< android::net::sip::SipRegistrationListener >  const&);
		local_ref< android::net::sip::SipSession > getSessionFor(local_ref< android::content::Intent >  const&);
		local_ref< android::net::sip::SipSession > createSipSession(local_ref< android::net::sip::SipProfile >  const&, local_ref< android::net::sip::SipSession_::Listener >  const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > INCOMING_CALL_RESULT_CODE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< java::lang::String > > EXTRA_CALL_ID;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< java::lang::String > > EXTRA_OFFER_SD;
	}; //class SipManager

} //namespace sip
} //namespace net
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_NET_SIP_SIPMANAGER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_NET_SIP_SIPMANAGER_HPP_IMPL
#define J2CPP_ANDROID_NET_SIP_SIPMANAGER_HPP_IMPL

namespace j2cpp {



android::net::sip::SipManager::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


local_ref< android::net::sip::SipManager > android::net::sip::SipManager::newInstance(local_ref< android::content::Context > const &a0)
{
	return call_static_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(1),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< android::net::sip::SipManager >
	>(a0);
}

jboolean android::net::sip::SipManager::isApiSupported(local_ref< android::content::Context > const &a0)
{
	return call_static_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(2),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(a0);
}

jboolean android::net::sip::SipManager::isVoipSupported(local_ref< android::content::Context > const &a0)
{
	return call_static_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(3),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(a0);
}

jboolean android::net::sip::SipManager::isSipWifiOnly(local_ref< android::content::Context > const &a0)
{
	return call_static_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(4),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(a0);
}

void android::net::sip::SipManager::open(local_ref< android::net::sip::SipProfile > const &a0)
{
	return call_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(5),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject(), a0);
}

void android::net::sip::SipManager::open(local_ref< android::net::sip::SipProfile > const &a0, local_ref< android::app::PendingIntent > const &a1, local_ref< android::net::sip::SipRegistrationListener > const &a2)
{
	return call_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(6),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject(), a0, a1, a2);
}

void android::net::sip::SipManager::setRegistrationListener(local_ref< java::lang::String > const &a0, local_ref< android::net::sip::SipRegistrationListener > const &a1)
{
	return call_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(7),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0, a1);
}

void android::net::sip::SipManager::close(local_ref< java::lang::String > const &a0)
{
	return call_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(8),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}

jboolean android::net::sip::SipManager::isOpened(local_ref< java::lang::String > const &a0)
{
	return call_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(9),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(9), 
		jboolean
	>(get_jobject(), a0);
}

jboolean android::net::sip::SipManager::isRegistered(local_ref< java::lang::String > const &a0)
{
	return call_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(10),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(10), 
		jboolean
	>(get_jobject(), a0);
}

local_ref< android::net::sip::SipAudioCall > android::net::sip::SipManager::makeAudioCall(local_ref< android::net::sip::SipProfile > const &a0, local_ref< android::net::sip::SipProfile > const &a1, local_ref< android::net::sip::SipAudioCall_::Listener > const &a2, jint a3)
{
	return call_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(11),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< android::net::sip::SipAudioCall >
	>(get_jobject(), a0, a1, a2, a3);
}

local_ref< android::net::sip::SipAudioCall > android::net::sip::SipManager::makeAudioCall(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< android::net::sip::SipAudioCall_::Listener > const &a2, jint a3)
{
	return call_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(12),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(12), 
		local_ref< android::net::sip::SipAudioCall >
	>(get_jobject(), a0, a1, a2, a3);
}

local_ref< android::net::sip::SipAudioCall > android::net::sip::SipManager::takeAudioCall(local_ref< android::content::Intent > const &a0, local_ref< android::net::sip::SipAudioCall_::Listener > const &a1)
{
	return call_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(13),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(13), 
		local_ref< android::net::sip::SipAudioCall >
	>(get_jobject(), a0, a1);
}

jboolean android::net::sip::SipManager::isIncomingCallIntent(local_ref< android::content::Intent > const &a0)
{
	return call_static_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(14),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(14), 
		jboolean
	>(a0);
}

local_ref< java::lang::String > android::net::sip::SipManager::getCallId(local_ref< android::content::Intent > const &a0)
{
	return call_static_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(15),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(15), 
		local_ref< java::lang::String >
	>(a0);
}

local_ref< java::lang::String > android::net::sip::SipManager::getOfferSessionDescription(local_ref< android::content::Intent > const &a0)
{
	return call_static_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(16),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(16), 
		local_ref< java::lang::String >
	>(a0);
}

void android::net::sip::SipManager::register_(local_ref< android::net::sip::SipProfile > const &a0, jint a1, local_ref< android::net::sip::SipRegistrationListener > const &a2)
{
	return call_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(17),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(17), 
		void
	>(get_jobject(), a0, a1, a2);
}

void android::net::sip::SipManager::unregister(local_ref< android::net::sip::SipProfile > const &a0, local_ref< android::net::sip::SipRegistrationListener > const &a1)
{
	return call_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(18),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(18), 
		void
	>(get_jobject(), a0, a1);
}

local_ref< android::net::sip::SipSession > android::net::sip::SipManager::getSessionFor(local_ref< android::content::Intent > const &a0)
{
	return call_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(19),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(19), 
		local_ref< android::net::sip::SipSession >
	>(get_jobject(), a0);
}

local_ref< android::net::sip::SipSession > android::net::sip::SipManager::createSipSession(local_ref< android::net::sip::SipProfile > const &a0, local_ref< android::net::sip::SipSession_::Listener > const &a1)
{
	return call_method<
		android::net::sip::SipManager::J2CPP_CLASS_NAME,
		android::net::sip::SipManager::J2CPP_METHOD_NAME(20),
		android::net::sip::SipManager::J2CPP_METHOD_SIGNATURE(20), 
		local_ref< android::net::sip::SipSession >
	>(get_jobject(), a0, a1);
}


static_field<
	android::net::sip::SipManager::J2CPP_CLASS_NAME,
	android::net::sip::SipManager::J2CPP_FIELD_NAME(0),
	android::net::sip::SipManager::J2CPP_FIELD_SIGNATURE(0),
	jint
> android::net::sip::SipManager::INCOMING_CALL_RESULT_CODE;

static_field<
	android::net::sip::SipManager::J2CPP_CLASS_NAME,
	android::net::sip::SipManager::J2CPP_FIELD_NAME(1),
	android::net::sip::SipManager::J2CPP_FIELD_SIGNATURE(1),
	local_ref< java::lang::String >
> android::net::sip::SipManager::EXTRA_CALL_ID;

static_field<
	android::net::sip::SipManager::J2CPP_CLASS_NAME,
	android::net::sip::SipManager::J2CPP_FIELD_NAME(2),
	android::net::sip::SipManager::J2CPP_FIELD_SIGNATURE(2),
	local_ref< java::lang::String >
> android::net::sip::SipManager::EXTRA_OFFER_SD;


J2CPP_DEFINE_CLASS(android::net::sip::SipManager,"android/net/sip/SipManager")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,1,"newInstance","(Landroid/content/Context;)Landroid/net/sip/SipManager;")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,2,"isApiSupported","(Landroid/content/Context;)Z")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,3,"isVoipSupported","(Landroid/content/Context;)Z")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,4,"isSipWifiOnly","(Landroid/content/Context;)Z")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,5,"open","(Landroid/net/sip/SipProfile;)V")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,6,"open","(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/SipRegistrationListener;)V")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,7,"setRegistrationListener","(Ljava/lang/String;Landroid/net/sip/SipRegistrationListener;)V")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,8,"close","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,9,"isOpened","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,10,"isRegistered","(Ljava/lang/String;)Z")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,11,"makeAudioCall","(Landroid/net/sip/SipProfile;Landroid/net/sip/SipProfile;Landroid/net/sip/SipAudioCall$Listener;I)Landroid/net/sip/SipAudioCall;")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,12,"makeAudioCall","(Ljava/lang/String;Ljava/lang/String;Landroid/net/sip/SipAudioCall$Listener;I)Landroid/net/sip/SipAudioCall;")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,13,"takeAudioCall","(Landroid/content/Intent;Landroid/net/sip/SipAudioCall$Listener;)Landroid/net/sip/SipAudioCall;")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,14,"isIncomingCallIntent","(Landroid/content/Intent;)Z")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,15,"getCallId","(Landroid/content/Intent;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,16,"getOfferSessionDescription","(Landroid/content/Intent;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,17,"register","(Landroid/net/sip/SipProfile;ILandroid/net/sip/SipRegistrationListener;)V")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,18,"unregister","(Landroid/net/sip/SipProfile;Landroid/net/sip/SipRegistrationListener;)V")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,19,"getSessionFor","(Landroid/content/Intent;)Landroid/net/sip/SipSession;")
J2CPP_DEFINE_METHOD(android::net::sip::SipManager,20,"createSipSession","(Landroid/net/sip/SipProfile;Landroid/net/sip/SipSession$Listener;)Landroid/net/sip/SipSession;")
J2CPP_DEFINE_FIELD(android::net::sip::SipManager,0,"INCOMING_CALL_RESULT_CODE","I")
J2CPP_DEFINE_FIELD(android::net::sip::SipManager,1,"EXTRA_CALL_ID","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(android::net::sip::SipManager,2,"EXTRA_OFFER_SD","Ljava/lang/String;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_NET_SIP_SIPMANAGER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

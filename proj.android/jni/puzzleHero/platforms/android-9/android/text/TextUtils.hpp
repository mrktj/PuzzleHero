/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.text.TextUtils
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_TEXTUTILS_HPP_DECL
#define J2CPP_ANDROID_TEXT_TEXTUTILS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class Comparable; } } }
namespace j2cpp { namespace java { namespace lang { class Enum; } } }
namespace j2cpp { namespace java { namespace lang { class Iterable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class Iterator; } } }
namespace j2cpp { namespace java { namespace util { namespace regex { class Pattern; } } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }
namespace j2cpp { namespace android { namespace util { class Printer; } } }
namespace j2cpp { namespace android { namespace text { class Spannable; } } }
namespace j2cpp { namespace android { namespace text { class TextPaint; } } }
namespace j2cpp { namespace android { namespace text { namespace TextUtils_ { class TruncateAt; } } } }
namespace j2cpp { namespace android { namespace text { class Spanned; } } }
namespace j2cpp { namespace android { namespace text { namespace TextUtils_ { class StringSplitter; } } } }
namespace j2cpp { namespace android { namespace text { namespace TextUtils_ { class EllipsizeCallback; } } } }
namespace j2cpp { namespace android { namespace os { class Parcel; } } }
namespace j2cpp { namespace android { namespace os { namespace Parcelable_ { class Creator; } } } }


#include <android/os/Parcel.hpp>
#include <android/os/Parcelable.hpp>
#include <android/text/Spannable.hpp>
#include <android/text/Spanned.hpp>
#include <android/text/TextPaint.hpp>
#include <android/text/TextUtils.hpp>
#include <android/util/Printer.hpp>
#include <java/io/Serializable.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/Class.hpp>
#include <java/lang/Comparable.hpp>
#include <java/lang/Enum.hpp>
#include <java/lang/Iterable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/util/Iterator.hpp>
#include <java/util/regex/Pattern.hpp>


namespace j2cpp {

namespace android { namespace text {

	class TextUtils;
	namespace TextUtils_ {

		class SimpleStringSplitter;
		class SimpleStringSplitter
			: public object<SimpleStringSplitter>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_METHOD(4)
			J2CPP_DECLARE_METHOD(5)
			J2CPP_DECLARE_METHOD(6)

			explicit SimpleStringSplitter(jobject jobj)
			: object<SimpleStringSplitter>(jobj)
			{
			}

			operator local_ref<java::lang::Iterable>() const;
			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::util::Iterator>() const;
			operator local_ref<android::text::TextUtils_::StringSplitter>() const;


			SimpleStringSplitter(jchar);
			void setString(local_ref< java::lang::String >  const&);
			local_ref< java::util::Iterator > iterator();
			jboolean hasNext();
			local_ref< java::lang::String > next();
			void remove();
			local_ref< java::lang::Object > next_1();
		}; //class SimpleStringSplitter

		class TruncateAt;
		class TruncateAt
			: public object<TruncateAt>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)
			J2CPP_DECLARE_METHOD(3)
			J2CPP_DECLARE_FIELD(0)
			J2CPP_DECLARE_FIELD(1)
			J2CPP_DECLARE_FIELD(2)
			J2CPP_DECLARE_FIELD(3)
			J2CPP_DECLARE_FIELD(4)

			explicit TruncateAt(jobject jobj)
			: object<TruncateAt>(jobj)
			{
			}

			operator local_ref<java::lang::Comparable>() const;
			operator local_ref<java::lang::Enum>() const;
			operator local_ref<java::lang::Object>() const;
			operator local_ref<java::io::Serializable>() const;


			static local_ref< array< local_ref< android::text::TextUtils_::TruncateAt >, 1> > values();
			static local_ref< android::text::TextUtils_::TruncateAt > valueOf(local_ref< java::lang::String >  const&);

			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::text::TextUtils_::TruncateAt > > END;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), local_ref< android::text::TextUtils_::TruncateAt > > MARQUEE;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), local_ref< android::text::TextUtils_::TruncateAt > > MIDDLE;
			static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), local_ref< android::text::TextUtils_::TruncateAt > > START;
		}; //class TruncateAt

		class StringSplitter;
		class StringSplitter
			: public object<StringSplitter>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			explicit StringSplitter(jobject jobj)
			: object<StringSplitter>(jobj)
			{
			}

			operator local_ref<java::lang::Iterable>() const;
			operator local_ref<java::lang::Object>() const;


			void setString(local_ref< java::lang::String >  const&);
		}; //class StringSplitter

		class EllipsizeCallback;
		class EllipsizeCallback
			: public object<EllipsizeCallback>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)

			explicit EllipsizeCallback(jobject jobj)
			: object<EllipsizeCallback>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			void ellipsized(jint, jint);
		}; //class EllipsizeCallback

	} //namespace TextUtils_

	class TextUtils
		: public object<TextUtils>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_METHOD(24)
		J2CPP_DECLARE_METHOD(25)
		J2CPP_DECLARE_METHOD(26)
		J2CPP_DECLARE_METHOD(27)
		J2CPP_DECLARE_METHOD(28)
		J2CPP_DECLARE_METHOD(29)
		J2CPP_DECLARE_METHOD(30)
		J2CPP_DECLARE_METHOD(31)
		J2CPP_DECLARE_METHOD(32)
		J2CPP_DECLARE_METHOD(33)
		J2CPP_DECLARE_METHOD(34)
		J2CPP_DECLARE_METHOD(35)
		J2CPP_DECLARE_METHOD(36)
		J2CPP_DECLARE_METHOD(37)
		J2CPP_DECLARE_METHOD(38)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)

		typedef TextUtils_::SimpleStringSplitter SimpleStringSplitter;
		typedef TextUtils_::TruncateAt TruncateAt;
		typedef TextUtils_::StringSplitter StringSplitter;
		typedef TextUtils_::EllipsizeCallback EllipsizeCallback;

		explicit TextUtils(jobject jobj)
		: object<TextUtils>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		static void getChars(local_ref< java::lang::CharSequence >  const&, jint, jint, local_ref< array<jchar,1> >  const&, jint);
		static jint indexOf(local_ref< java::lang::CharSequence >  const&, jchar);
		static jint indexOf(local_ref< java::lang::CharSequence >  const&, jchar, jint);
		static jint indexOf(local_ref< java::lang::CharSequence >  const&, jchar, jint, jint);
		static jint lastIndexOf(local_ref< java::lang::CharSequence >  const&, jchar);
		static jint lastIndexOf(local_ref< java::lang::CharSequence >  const&, jchar, jint);
		static jint lastIndexOf(local_ref< java::lang::CharSequence >  const&, jchar, jint, jint);
		static jint indexOf(local_ref< java::lang::CharSequence >  const&, local_ref< java::lang::CharSequence >  const&);
		static jint indexOf(local_ref< java::lang::CharSequence >  const&, local_ref< java::lang::CharSequence >  const&, jint);
		static jint indexOf(local_ref< java::lang::CharSequence >  const&, local_ref< java::lang::CharSequence >  const&, jint, jint);
		static jboolean regionMatches(local_ref< java::lang::CharSequence >  const&, jint, local_ref< java::lang::CharSequence >  const&, jint, jint);
		static local_ref< java::lang::String > substring(local_ref< java::lang::CharSequence >  const&, jint, jint);
		static local_ref< java::lang::String > join(local_ref< java::lang::CharSequence >  const&, local_ref< array< local_ref< java::lang::Object >, 1> >  const&);
		static local_ref< java::lang::String > join(local_ref< java::lang::CharSequence >  const&, local_ref< java::lang::Iterable >  const&);
		static local_ref< array< local_ref< java::lang::String >, 1> > split(local_ref< java::lang::String >  const&, local_ref< java::lang::String >  const&);
		static local_ref< array< local_ref< java::lang::String >, 1> > split(local_ref< java::lang::String >  const&, local_ref< java::util::regex::Pattern >  const&);
		static local_ref< java::lang::CharSequence > stringOrSpannedString(local_ref< java::lang::CharSequence >  const&);
		static jboolean isEmpty(local_ref< java::lang::CharSequence >  const&);
		static jint getTrimmedLength(local_ref< java::lang::CharSequence >  const&);
		static jboolean equals(local_ref< java::lang::CharSequence >  const&, local_ref< java::lang::CharSequence >  const&);
		static local_ref< java::lang::CharSequence > getReverse(local_ref< java::lang::CharSequence >  const&, jint, jint);
		static void writeToParcel(local_ref< java::lang::CharSequence >  const&, local_ref< android::os::Parcel >  const&, jint);
		static void dumpSpans(local_ref< java::lang::CharSequence >  const&, local_ref< android::util::Printer >  const&, local_ref< java::lang::String >  const&);
		static local_ref< java::lang::CharSequence > replace(local_ref< java::lang::CharSequence >  const&, local_ref< array< local_ref< java::lang::String >, 1> >  const&, local_ref< array< local_ref< java::lang::CharSequence >, 1> >  const&);
		static local_ref< java::lang::CharSequence > expandTemplate(local_ref< java::lang::CharSequence >  const&, local_ref< array< local_ref< java::lang::CharSequence >, 1> >  const&);
		static jint getOffsetBefore(local_ref< java::lang::CharSequence >  const&, jint);
		static jint getOffsetAfter(local_ref< java::lang::CharSequence >  const&, jint);
		static void copySpansFrom(local_ref< android::text::Spanned >  const&, jint, jint, local_ref< java::lang::Class >  const&, local_ref< android::text::Spannable >  const&, jint);
		static local_ref< java::lang::CharSequence > ellipsize(local_ref< java::lang::CharSequence >  const&, local_ref< android::text::TextPaint >  const&, jfloat, local_ref< android::text::TextUtils_::TruncateAt >  const&);
		static local_ref< java::lang::CharSequence > ellipsize(local_ref< java::lang::CharSequence >  const&, local_ref< android::text::TextPaint >  const&, jfloat, local_ref< android::text::TextUtils_::TruncateAt >  const&, jboolean, local_ref< android::text::TextUtils_::EllipsizeCallback >  const&);
		static local_ref< java::lang::CharSequence > commaEllipsize(local_ref< java::lang::CharSequence >  const&, local_ref< android::text::TextPaint >  const&, jfloat, local_ref< java::lang::String >  const&, local_ref< java::lang::String >  const&);
		static local_ref< java::lang::String > htmlEncode(local_ref< java::lang::String >  const&);
		static local_ref< java::lang::CharSequence > concat(local_ref< array< local_ref< java::lang::CharSequence >, 1> >  const&);
		static jboolean isGraphic(local_ref< java::lang::CharSequence >  const&);
		static jboolean isGraphic(jchar);
		static jboolean isDigitsOnly(local_ref< java::lang::CharSequence >  const&);
		static jint getCapsMode(local_ref< java::lang::CharSequence >  const&, jint, jint);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), local_ref< android::os::Parcelable_::Creator > > CHAR_SEQUENCE_CREATOR;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > CAP_MODE_CHARACTERS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > CAP_MODE_WORDS;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > CAP_MODE_SENTENCES;
	}; //class TextUtils

} //namespace text
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_TEXTUTILS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_TEXTUTILS_HPP_IMPL
#define J2CPP_ANDROID_TEXT_TEXTUTILS_HPP_IMPL

namespace j2cpp {




android::text::TextUtils_::SimpleStringSplitter::operator local_ref<java::lang::Iterable>() const
{
	return local_ref<java::lang::Iterable>(get_jobject());
}

android::text::TextUtils_::SimpleStringSplitter::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

android::text::TextUtils_::SimpleStringSplitter::operator local_ref<java::util::Iterator>() const
{
	return local_ref<java::util::Iterator>(get_jobject());
}

android::text::TextUtils_::SimpleStringSplitter::operator local_ref<android::text::TextUtils_::StringSplitter>() const
{
	return local_ref<android::text::TextUtils_::StringSplitter>(get_jobject());
}


android::text::TextUtils_::SimpleStringSplitter::SimpleStringSplitter(jchar a0)
: object<android::text::TextUtils_::SimpleStringSplitter>(
	call_new_object<
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_CLASS_NAME,
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_NAME(0),
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}


void android::text::TextUtils_::SimpleStringSplitter::setString(local_ref< java::lang::String > const &a0)
{
	return call_method<
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_CLASS_NAME,
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_NAME(1),
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0);
}

local_ref< java::util::Iterator > android::text::TextUtils_::SimpleStringSplitter::iterator()
{
	return call_method<
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_CLASS_NAME,
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_NAME(2),
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::util::Iterator >
	>(get_jobject());
}

jboolean android::text::TextUtils_::SimpleStringSplitter::hasNext()
{
	return call_method<
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_CLASS_NAME,
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_NAME(3),
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(get_jobject());
}

local_ref< java::lang::String > android::text::TextUtils_::SimpleStringSplitter::next()
{
	return call_method<
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_CLASS_NAME,
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_NAME(4),
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< java::lang::String >
	>(get_jobject());
}

void android::text::TextUtils_::SimpleStringSplitter::remove()
{
	return call_method<
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_CLASS_NAME,
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_NAME(5),
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject());
}

local_ref< java::lang::Object > android::text::TextUtils_::SimpleStringSplitter::next_1()
{
	return call_method<
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_CLASS_NAME,
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_NAME(6),
		android::text::TextUtils_::SimpleStringSplitter::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< java::lang::Object >
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(android::text::TextUtils_::SimpleStringSplitter,"android/text/TextUtils$SimpleStringSplitter")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::SimpleStringSplitter,0,"<init>","(C)V")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::SimpleStringSplitter,1,"setString","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::SimpleStringSplitter,2,"iterator","()Ljava/util/Iterator;")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::SimpleStringSplitter,3,"hasNext","()Z")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::SimpleStringSplitter,4,"next","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::SimpleStringSplitter,5,"remove","()V")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::SimpleStringSplitter,6,"next","()Ljava/lang/Object;")


android::text::TextUtils_::TruncateAt::operator local_ref<java::lang::Comparable>() const
{
	return local_ref<java::lang::Comparable>(get_jobject());
}

android::text::TextUtils_::TruncateAt::operator local_ref<java::lang::Enum>() const
{
	return local_ref<java::lang::Enum>(get_jobject());
}

android::text::TextUtils_::TruncateAt::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

android::text::TextUtils_::TruncateAt::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}

local_ref< array< local_ref< android::text::TextUtils_::TruncateAt >, 1> > android::text::TextUtils_::TruncateAt::values()
{
	return call_static_method<
		android::text::TextUtils_::TruncateAt::J2CPP_CLASS_NAME,
		android::text::TextUtils_::TruncateAt::J2CPP_METHOD_NAME(0),
		android::text::TextUtils_::TruncateAt::J2CPP_METHOD_SIGNATURE(0), 
		local_ref< array< local_ref< android::text::TextUtils_::TruncateAt >, 1> >
	>();
}

local_ref< android::text::TextUtils_::TruncateAt > android::text::TextUtils_::TruncateAt::valueOf(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		android::text::TextUtils_::TruncateAt::J2CPP_CLASS_NAME,
		android::text::TextUtils_::TruncateAt::J2CPP_METHOD_NAME(1),
		android::text::TextUtils_::TruncateAt::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< android::text::TextUtils_::TruncateAt >
	>(a0);
}




static_field<
	android::text::TextUtils_::TruncateAt::J2CPP_CLASS_NAME,
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_NAME(0),
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::text::TextUtils_::TruncateAt >
> android::text::TextUtils_::TruncateAt::END;

static_field<
	android::text::TextUtils_::TruncateAt::J2CPP_CLASS_NAME,
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_NAME(1),
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_SIGNATURE(1),
	local_ref< android::text::TextUtils_::TruncateAt >
> android::text::TextUtils_::TruncateAt::MARQUEE;

static_field<
	android::text::TextUtils_::TruncateAt::J2CPP_CLASS_NAME,
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_NAME(2),
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_SIGNATURE(2),
	local_ref< android::text::TextUtils_::TruncateAt >
> android::text::TextUtils_::TruncateAt::MIDDLE;

static_field<
	android::text::TextUtils_::TruncateAt::J2CPP_CLASS_NAME,
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_NAME(3),
	android::text::TextUtils_::TruncateAt::J2CPP_FIELD_SIGNATURE(3),
	local_ref< android::text::TextUtils_::TruncateAt >
> android::text::TextUtils_::TruncateAt::START;


J2CPP_DEFINE_CLASS(android::text::TextUtils_::TruncateAt,"android/text/TextUtils$TruncateAt")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::TruncateAt,0,"values","()[android.text.TextUtils.TruncateAt")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::TruncateAt,1,"valueOf","(Ljava/lang/String;)Landroid/text/TextUtils$TruncateAt;")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::TruncateAt,2,"<init>","(Ljava/lang/String;I)V")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::TruncateAt,3,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::text::TextUtils_::TruncateAt,0,"END","Landroid/text/TextUtils$TruncateAt;")
J2CPP_DEFINE_FIELD(android::text::TextUtils_::TruncateAt,1,"MARQUEE","Landroid/text/TextUtils$TruncateAt;")
J2CPP_DEFINE_FIELD(android::text::TextUtils_::TruncateAt,2,"MIDDLE","Landroid/text/TextUtils$TruncateAt;")
J2CPP_DEFINE_FIELD(android::text::TextUtils_::TruncateAt,3,"START","Landroid/text/TextUtils$TruncateAt;")
J2CPP_DEFINE_FIELD(android::text::TextUtils_::TruncateAt,4,"$VALUES","[android.text.TextUtils.TruncateAt")


android::text::TextUtils_::StringSplitter::operator local_ref<java::lang::Iterable>() const
{
	return local_ref<java::lang::Iterable>(get_jobject());
}

android::text::TextUtils_::StringSplitter::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

void android::text::TextUtils_::StringSplitter::setString(local_ref< java::lang::String > const &a0)
{
	return call_method<
		android::text::TextUtils_::StringSplitter::J2CPP_CLASS_NAME,
		android::text::TextUtils_::StringSplitter::J2CPP_METHOD_NAME(0),
		android::text::TextUtils_::StringSplitter::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(android::text::TextUtils_::StringSplitter,"android/text/TextUtils$StringSplitter")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::StringSplitter,0,"setString","(Ljava/lang/String;)V")


android::text::TextUtils_::EllipsizeCallback::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

void android::text::TextUtils_::EllipsizeCallback::ellipsized(jint a0, jint a1)
{
	return call_method<
		android::text::TextUtils_::EllipsizeCallback::J2CPP_CLASS_NAME,
		android::text::TextUtils_::EllipsizeCallback::J2CPP_METHOD_NAME(0),
		android::text::TextUtils_::EllipsizeCallback::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0, a1);
}


J2CPP_DEFINE_CLASS(android::text::TextUtils_::EllipsizeCallback,"android/text/TextUtils$EllipsizeCallback")
J2CPP_DEFINE_METHOD(android::text::TextUtils_::EllipsizeCallback,0,"ellipsized","(II)V")



android::text::TextUtils::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


void android::text::TextUtils::getChars(local_ref< java::lang::CharSequence > const &a0, jint a1, jint a2, local_ref< array<jchar,1> > const &a3, jint a4)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(1),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(a0, a1, a2, a3, a4);
}

jint android::text::TextUtils::indexOf(local_ref< java::lang::CharSequence > const &a0, jchar a1)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(2),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(a0, a1);
}

jint android::text::TextUtils::indexOf(local_ref< java::lang::CharSequence > const &a0, jchar a1, jint a2)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(3),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(a0, a1, a2);
}

jint android::text::TextUtils::indexOf(local_ref< java::lang::CharSequence > const &a0, jchar a1, jint a2, jint a3)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(4),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(a0, a1, a2, a3);
}

jint android::text::TextUtils::lastIndexOf(local_ref< java::lang::CharSequence > const &a0, jchar a1)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(5),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(5), 
		jint
	>(a0, a1);
}

jint android::text::TextUtils::lastIndexOf(local_ref< java::lang::CharSequence > const &a0, jchar a1, jint a2)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(6),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(6), 
		jint
	>(a0, a1, a2);
}

jint android::text::TextUtils::lastIndexOf(local_ref< java::lang::CharSequence > const &a0, jchar a1, jint a2, jint a3)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(7),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(7), 
		jint
	>(a0, a1, a2, a3);
}

jint android::text::TextUtils::indexOf(local_ref< java::lang::CharSequence > const &a0, local_ref< java::lang::CharSequence > const &a1)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(8),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(a0, a1);
}

jint android::text::TextUtils::indexOf(local_ref< java::lang::CharSequence > const &a0, local_ref< java::lang::CharSequence > const &a1, jint a2)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(9),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(9), 
		jint
	>(a0, a1, a2);
}

jint android::text::TextUtils::indexOf(local_ref< java::lang::CharSequence > const &a0, local_ref< java::lang::CharSequence > const &a1, jint a2, jint a3)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(10),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(10), 
		jint
	>(a0, a1, a2, a3);
}

jboolean android::text::TextUtils::regionMatches(local_ref< java::lang::CharSequence > const &a0, jint a1, local_ref< java::lang::CharSequence > const &a2, jint a3, jint a4)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(11),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(11), 
		jboolean
	>(a0, a1, a2, a3, a4);
}

local_ref< java::lang::String > android::text::TextUtils::substring(local_ref< java::lang::CharSequence > const &a0, jint a1, jint a2)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(12),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(12), 
		local_ref< java::lang::String >
	>(a0, a1, a2);
}

local_ref< java::lang::String > android::text::TextUtils::join(local_ref< java::lang::CharSequence > const &a0, local_ref< array< local_ref< java::lang::Object >, 1> > const &a1)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(13),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(13), 
		local_ref< java::lang::String >
	>(a0, a1);
}

local_ref< java::lang::String > android::text::TextUtils::join(local_ref< java::lang::CharSequence > const &a0, local_ref< java::lang::Iterable > const &a1)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(14),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(14), 
		local_ref< java::lang::String >
	>(a0, a1);
}

local_ref< array< local_ref< java::lang::String >, 1> > android::text::TextUtils::split(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(15),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(15), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(a0, a1);
}

local_ref< array< local_ref< java::lang::String >, 1> > android::text::TextUtils::split(local_ref< java::lang::String > const &a0, local_ref< java::util::regex::Pattern > const &a1)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(16),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(16), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(a0, a1);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::stringOrSpannedString(local_ref< java::lang::CharSequence > const &a0)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(17),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(17), 
		local_ref< java::lang::CharSequence >
	>(a0);
}

jboolean android::text::TextUtils::isEmpty(local_ref< java::lang::CharSequence > const &a0)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(18),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(18), 
		jboolean
	>(a0);
}

jint android::text::TextUtils::getTrimmedLength(local_ref< java::lang::CharSequence > const &a0)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(19),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(19), 
		jint
	>(a0);
}

jboolean android::text::TextUtils::equals(local_ref< java::lang::CharSequence > const &a0, local_ref< java::lang::CharSequence > const &a1)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(20),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(20), 
		jboolean
	>(a0, a1);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::getReverse(local_ref< java::lang::CharSequence > const &a0, jint a1, jint a2)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(21),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(21), 
		local_ref< java::lang::CharSequence >
	>(a0, a1, a2);
}

void android::text::TextUtils::writeToParcel(local_ref< java::lang::CharSequence > const &a0, local_ref< android::os::Parcel > const &a1, jint a2)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(22),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(22), 
		void
	>(a0, a1, a2);
}

void android::text::TextUtils::dumpSpans(local_ref< java::lang::CharSequence > const &a0, local_ref< android::util::Printer > const &a1, local_ref< java::lang::String > const &a2)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(23),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(23), 
		void
	>(a0, a1, a2);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::replace(local_ref< java::lang::CharSequence > const &a0, local_ref< array< local_ref< java::lang::String >, 1> > const &a1, local_ref< array< local_ref< java::lang::CharSequence >, 1> > const &a2)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(24),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(24), 
		local_ref< java::lang::CharSequence >
	>(a0, a1, a2);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::expandTemplate(local_ref< java::lang::CharSequence > const &a0, local_ref< array< local_ref< java::lang::CharSequence >, 1> > const &a1)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(25),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(25), 
		local_ref< java::lang::CharSequence >
	>(a0, a1);
}

jint android::text::TextUtils::getOffsetBefore(local_ref< java::lang::CharSequence > const &a0, jint a1)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(26),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(26), 
		jint
	>(a0, a1);
}

jint android::text::TextUtils::getOffsetAfter(local_ref< java::lang::CharSequence > const &a0, jint a1)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(27),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(27), 
		jint
	>(a0, a1);
}

void android::text::TextUtils::copySpansFrom(local_ref< android::text::Spanned > const &a0, jint a1, jint a2, local_ref< java::lang::Class > const &a3, local_ref< android::text::Spannable > const &a4, jint a5)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(28),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(28), 
		void
	>(a0, a1, a2, a3, a4, a5);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::ellipsize(local_ref< java::lang::CharSequence > const &a0, local_ref< android::text::TextPaint > const &a1, jfloat a2, local_ref< android::text::TextUtils_::TruncateAt > const &a3)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(29),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(29), 
		local_ref< java::lang::CharSequence >
	>(a0, a1, a2, a3);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::ellipsize(local_ref< java::lang::CharSequence > const &a0, local_ref< android::text::TextPaint > const &a1, jfloat a2, local_ref< android::text::TextUtils_::TruncateAt > const &a3, jboolean a4, local_ref< android::text::TextUtils_::EllipsizeCallback > const &a5)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(30),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(30), 
		local_ref< java::lang::CharSequence >
	>(a0, a1, a2, a3, a4, a5);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::commaEllipsize(local_ref< java::lang::CharSequence > const &a0, local_ref< android::text::TextPaint > const &a1, jfloat a2, local_ref< java::lang::String > const &a3, local_ref< java::lang::String > const &a4)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(31),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(31), 
		local_ref< java::lang::CharSequence >
	>(a0, a1, a2, a3, a4);
}

local_ref< java::lang::String > android::text::TextUtils::htmlEncode(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(32),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(32), 
		local_ref< java::lang::String >
	>(a0);
}

local_ref< java::lang::CharSequence > android::text::TextUtils::concat(local_ref< array< local_ref< java::lang::CharSequence >, 1> > const &a0)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(33),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(33), 
		local_ref< java::lang::CharSequence >
	>(a0);
}

jboolean android::text::TextUtils::isGraphic(local_ref< java::lang::CharSequence > const &a0)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(34),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(34), 
		jboolean
	>(a0);
}

jboolean android::text::TextUtils::isGraphic(jchar a0)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(35),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(35), 
		jboolean
	>(a0);
}

jboolean android::text::TextUtils::isDigitsOnly(local_ref< java::lang::CharSequence > const &a0)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(36),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(36), 
		jboolean
	>(a0);
}

jint android::text::TextUtils::getCapsMode(local_ref< java::lang::CharSequence > const &a0, jint a1, jint a2)
{
	return call_static_method<
		android::text::TextUtils::J2CPP_CLASS_NAME,
		android::text::TextUtils::J2CPP_METHOD_NAME(37),
		android::text::TextUtils::J2CPP_METHOD_SIGNATURE(37), 
		jint
	>(a0, a1, a2);
}



static_field<
	android::text::TextUtils::J2CPP_CLASS_NAME,
	android::text::TextUtils::J2CPP_FIELD_NAME(0),
	android::text::TextUtils::J2CPP_FIELD_SIGNATURE(0),
	local_ref< android::os::Parcelable_::Creator >
> android::text::TextUtils::CHAR_SEQUENCE_CREATOR;

static_field<
	android::text::TextUtils::J2CPP_CLASS_NAME,
	android::text::TextUtils::J2CPP_FIELD_NAME(1),
	android::text::TextUtils::J2CPP_FIELD_SIGNATURE(1),
	jint
> android::text::TextUtils::CAP_MODE_CHARACTERS;

static_field<
	android::text::TextUtils::J2CPP_CLASS_NAME,
	android::text::TextUtils::J2CPP_FIELD_NAME(2),
	android::text::TextUtils::J2CPP_FIELD_SIGNATURE(2),
	jint
> android::text::TextUtils::CAP_MODE_WORDS;

static_field<
	android::text::TextUtils::J2CPP_CLASS_NAME,
	android::text::TextUtils::J2CPP_FIELD_NAME(3),
	android::text::TextUtils::J2CPP_FIELD_SIGNATURE(3),
	jint
> android::text::TextUtils::CAP_MODE_SENTENCES;


J2CPP_DEFINE_CLASS(android::text::TextUtils,"android/text/TextUtils")
J2CPP_DEFINE_METHOD(android::text::TextUtils,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::text::TextUtils,1,"getChars","(Ljava/lang/CharSequence;II[CI)V")
J2CPP_DEFINE_METHOD(android::text::TextUtils,2,"indexOf","(Ljava/lang/CharSequence;C)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,3,"indexOf","(Ljava/lang/CharSequence;CI)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,4,"indexOf","(Ljava/lang/CharSequence;CII)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,5,"lastIndexOf","(Ljava/lang/CharSequence;C)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,6,"lastIndexOf","(Ljava/lang/CharSequence;CI)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,7,"lastIndexOf","(Ljava/lang/CharSequence;CII)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,8,"indexOf","(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,9,"indexOf","(Ljava/lang/CharSequence;Ljava/lang/CharSequence;I)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,10,"indexOf","(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,11,"regionMatches","(Ljava/lang/CharSequence;ILjava/lang/CharSequence;II)Z")
J2CPP_DEFINE_METHOD(android::text::TextUtils,12,"substring","(Ljava/lang/CharSequence;II)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,13,"join","(Ljava/lang/CharSequence;[java.lang.Object)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,14,"join","(Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,15,"split","(Ljava/lang/String;Ljava/lang/String;)[java.lang.String")
J2CPP_DEFINE_METHOD(android::text::TextUtils,16,"split","(Ljava/lang/String;Ljava/util/regex/Pattern;)[java.lang.String")
J2CPP_DEFINE_METHOD(android::text::TextUtils,17,"stringOrSpannedString","(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,18,"isEmpty","(Ljava/lang/CharSequence;)Z")
J2CPP_DEFINE_METHOD(android::text::TextUtils,19,"getTrimmedLength","(Ljava/lang/CharSequence;)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,20,"equals","(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z")
J2CPP_DEFINE_METHOD(android::text::TextUtils,21,"getReverse","(Ljava/lang/CharSequence;II)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,22,"writeToParcel","(Ljava/lang/CharSequence;Landroid/os/Parcel;I)V")
J2CPP_DEFINE_METHOD(android::text::TextUtils,23,"dumpSpans","(Ljava/lang/CharSequence;Landroid/util/Printer;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(android::text::TextUtils,24,"replace","(Ljava/lang/CharSequence;[java.lang.String[java.lang.CharSequence)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,25,"expandTemplate","(Ljava/lang/CharSequence;[java.lang.CharSequence)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,26,"getOffsetBefore","(Ljava/lang/CharSequence;I)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,27,"getOffsetAfter","(Ljava/lang/CharSequence;I)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,28,"copySpansFrom","(Landroid/text/Spanned;IILjava/lang/Class;Landroid/text/Spannable;I)V")
J2CPP_DEFINE_METHOD(android::text::TextUtils,29,"ellipsize","(Ljava/lang/CharSequence;Landroid/text/TextPaint;FLandroid/text/TextUtils$TruncateAt;)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,30,"ellipsize","(Ljava/lang/CharSequence;Landroid/text/TextPaint;FLandroid/text/TextUtils$TruncateAt;ZLandroid/text/TextUtils$EllipsizeCallback;)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,31,"commaEllipsize","(Ljava/lang/CharSequence;Landroid/text/TextPaint;FLjava/lang/String;Ljava/lang/String;)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,32,"htmlEncode","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,33,"concat","([java.lang.CharSequence)Ljava/lang/CharSequence;")
J2CPP_DEFINE_METHOD(android::text::TextUtils,34,"isGraphic","(Ljava/lang/CharSequence;)Z")
J2CPP_DEFINE_METHOD(android::text::TextUtils,35,"isGraphic","(C)Z")
J2CPP_DEFINE_METHOD(android::text::TextUtils,36,"isDigitsOnly","(Ljava/lang/CharSequence;)Z")
J2CPP_DEFINE_METHOD(android::text::TextUtils,37,"getCapsMode","(Ljava/lang/CharSequence;II)I")
J2CPP_DEFINE_METHOD(android::text::TextUtils,38,"<clinit>","()V")
J2CPP_DEFINE_FIELD(android::text::TextUtils,0,"CHAR_SEQUENCE_CREATOR","Landroid/os/Parcelable$Creator;")
J2CPP_DEFINE_FIELD(android::text::TextUtils,1,"CAP_MODE_CHARACTERS","I")
J2CPP_DEFINE_FIELD(android::text::TextUtils,2,"CAP_MODE_WORDS","I")
J2CPP_DEFINE_FIELD(android::text::TextUtils,3,"CAP_MODE_SENTENCES","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_TEXTUTILS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

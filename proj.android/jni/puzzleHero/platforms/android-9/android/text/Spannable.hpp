/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.text.Spannable
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_SPANNABLE_HPP_DECL
#define J2CPP_ANDROID_TEXT_SPANNABLE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace android { namespace text { namespace Spannable_ { class Factory; } } } }
namespace j2cpp { namespace android { namespace text { class Spanned; } } }


#include <android/text/Spannable.hpp>
#include <android/text/Spanned.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace text {

	class Spannable;
	namespace Spannable_ {

		class Factory;
		class Factory
			: public object<Factory>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)
			J2CPP_DECLARE_METHOD(2)

			explicit Factory(jobject jobj)
			: object<Factory>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;


			Factory();
			static local_ref< android::text::Spannable_::Factory > getInstance();
			local_ref< android::text::Spannable > newSpannable(local_ref< java::lang::CharSequence >  const&);
		}; //class Factory

	} //namespace Spannable_

	class Spannable
		: public object<Spannable>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		typedef Spannable_::Factory Factory;

		explicit Spannable(jobject jobj)
		: object<Spannable>(jobj)
		{
		}

		operator local_ref<java::lang::CharSequence>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<android::text::Spanned>() const;


		void setSpan(local_ref< java::lang::Object >  const&, jint, jint, jint);
		void removeSpan(local_ref< java::lang::Object >  const&);
	}; //class Spannable

} //namespace text
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_SPANNABLE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_SPANNABLE_HPP_IMPL
#define J2CPP_ANDROID_TEXT_SPANNABLE_HPP_IMPL

namespace j2cpp {




android::text::Spannable_::Factory::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


android::text::Spannable_::Factory::Factory()
: object<android::text::Spannable_::Factory>(
	call_new_object<
		android::text::Spannable_::Factory::J2CPP_CLASS_NAME,
		android::text::Spannable_::Factory::J2CPP_METHOD_NAME(0),
		android::text::Spannable_::Factory::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


local_ref< android::text::Spannable_::Factory > android::text::Spannable_::Factory::getInstance()
{
	return call_static_method<
		android::text::Spannable_::Factory::J2CPP_CLASS_NAME,
		android::text::Spannable_::Factory::J2CPP_METHOD_NAME(1),
		android::text::Spannable_::Factory::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< android::text::Spannable_::Factory >
	>();
}

local_ref< android::text::Spannable > android::text::Spannable_::Factory::newSpannable(local_ref< java::lang::CharSequence > const &a0)
{
	return call_method<
		android::text::Spannable_::Factory::J2CPP_CLASS_NAME,
		android::text::Spannable_::Factory::J2CPP_METHOD_NAME(2),
		android::text::Spannable_::Factory::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< android::text::Spannable >
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(android::text::Spannable_::Factory,"android/text/Spannable$Factory")
J2CPP_DEFINE_METHOD(android::text::Spannable_::Factory,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::text::Spannable_::Factory,1,"getInstance","()Landroid/text/Spannable$Factory;")
J2CPP_DEFINE_METHOD(android::text::Spannable_::Factory,2,"newSpannable","(Ljava/lang/CharSequence;)Landroid/text/Spannable;")



android::text::Spannable::operator local_ref<java::lang::CharSequence>() const
{
	return local_ref<java::lang::CharSequence>(get_jobject());
}

android::text::Spannable::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

android::text::Spannable::operator local_ref<android::text::Spanned>() const
{
	return local_ref<android::text::Spanned>(get_jobject());
}

void android::text::Spannable::setSpan(local_ref< java::lang::Object > const &a0, jint a1, jint a2, jint a3)
{
	return call_method<
		android::text::Spannable::J2CPP_CLASS_NAME,
		android::text::Spannable::J2CPP_METHOD_NAME(0),
		android::text::Spannable::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0, a1, a2, a3);
}

void android::text::Spannable::removeSpan(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		android::text::Spannable::J2CPP_CLASS_NAME,
		android::text::Spannable::J2CPP_METHOD_NAME(1),
		android::text::Spannable::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(android::text::Spannable,"android/text/Spannable")
J2CPP_DEFINE_METHOD(android::text::Spannable,0,"setSpan","(Ljava/lang/Object;III)V")
J2CPP_DEFINE_METHOD(android::text::Spannable,1,"removeSpan","(Ljava/lang/Object;)V")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_SPANNABLE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

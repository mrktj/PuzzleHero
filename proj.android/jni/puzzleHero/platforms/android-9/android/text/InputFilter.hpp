/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.text.InputFilter
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_INPUTFILTER_HPP_DECL
#define J2CPP_ANDROID_TEXT_INPUTFILTER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class CharSequence; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace android { namespace text { class Spanned; } } }


#include <android/text/Spanned.hpp>
#include <java/lang/CharSequence.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace text {

	class InputFilter;
	namespace InputFilter_ {

		class AllCaps;
		class AllCaps
			: public object<AllCaps>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			explicit AllCaps(jobject jobj)
			: object<AllCaps>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;
			operator local_ref<android::text::InputFilter>() const;


			AllCaps();
			local_ref< java::lang::CharSequence > filter(local_ref< java::lang::CharSequence >  const&, jint, jint, local_ref< android::text::Spanned >  const&, jint, jint);
		}; //class AllCaps

		class LengthFilter;
		class LengthFilter
			: public object<LengthFilter>
		{
		public:

			J2CPP_DECLARE_CLASS

			J2CPP_DECLARE_METHOD(0)
			J2CPP_DECLARE_METHOD(1)

			explicit LengthFilter(jobject jobj)
			: object<LengthFilter>(jobj)
			{
			}

			operator local_ref<java::lang::Object>() const;
			operator local_ref<android::text::InputFilter>() const;


			LengthFilter(jint);
			local_ref< java::lang::CharSequence > filter(local_ref< java::lang::CharSequence >  const&, jint, jint, local_ref< android::text::Spanned >  const&, jint, jint);
		}; //class LengthFilter

	} //namespace InputFilter_

	class InputFilter
		: public object<InputFilter>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)

		typedef InputFilter_::AllCaps AllCaps;
		typedef InputFilter_::LengthFilter LengthFilter;

		explicit InputFilter(jobject jobj)
		: object<InputFilter>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		local_ref< java::lang::CharSequence > filter(local_ref< java::lang::CharSequence >  const&, jint, jint, local_ref< android::text::Spanned >  const&, jint, jint);
	}; //class InputFilter

} //namespace text
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_INPUTFILTER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_TEXT_INPUTFILTER_HPP_IMPL
#define J2CPP_ANDROID_TEXT_INPUTFILTER_HPP_IMPL

namespace j2cpp {




android::text::InputFilter_::AllCaps::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

android::text::InputFilter_::AllCaps::operator local_ref<android::text::InputFilter>() const
{
	return local_ref<android::text::InputFilter>(get_jobject());
}


android::text::InputFilter_::AllCaps::AllCaps()
: object<android::text::InputFilter_::AllCaps>(
	call_new_object<
		android::text::InputFilter_::AllCaps::J2CPP_CLASS_NAME,
		android::text::InputFilter_::AllCaps::J2CPP_METHOD_NAME(0),
		android::text::InputFilter_::AllCaps::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


local_ref< java::lang::CharSequence > android::text::InputFilter_::AllCaps::filter(local_ref< java::lang::CharSequence > const &a0, jint a1, jint a2, local_ref< android::text::Spanned > const &a3, jint a4, jint a5)
{
	return call_method<
		android::text::InputFilter_::AllCaps::J2CPP_CLASS_NAME,
		android::text::InputFilter_::AllCaps::J2CPP_METHOD_NAME(1),
		android::text::InputFilter_::AllCaps::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::CharSequence >
	>(get_jobject(), a0, a1, a2, a3, a4, a5);
}


J2CPP_DEFINE_CLASS(android::text::InputFilter_::AllCaps,"android/text/InputFilter$AllCaps")
J2CPP_DEFINE_METHOD(android::text::InputFilter_::AllCaps,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::text::InputFilter_::AllCaps,1,"filter","(Ljava/lang/CharSequence;IILandroid/text/Spanned;II)Ljava/lang/CharSequence;")


android::text::InputFilter_::LengthFilter::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

android::text::InputFilter_::LengthFilter::operator local_ref<android::text::InputFilter>() const
{
	return local_ref<android::text::InputFilter>(get_jobject());
}


android::text::InputFilter_::LengthFilter::LengthFilter(jint a0)
: object<android::text::InputFilter_::LengthFilter>(
	call_new_object<
		android::text::InputFilter_::LengthFilter::J2CPP_CLASS_NAME,
		android::text::InputFilter_::LengthFilter::J2CPP_METHOD_NAME(0),
		android::text::InputFilter_::LengthFilter::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}


local_ref< java::lang::CharSequence > android::text::InputFilter_::LengthFilter::filter(local_ref< java::lang::CharSequence > const &a0, jint a1, jint a2, local_ref< android::text::Spanned > const &a3, jint a4, jint a5)
{
	return call_method<
		android::text::InputFilter_::LengthFilter::J2CPP_CLASS_NAME,
		android::text::InputFilter_::LengthFilter::J2CPP_METHOD_NAME(1),
		android::text::InputFilter_::LengthFilter::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::CharSequence >
	>(get_jobject(), a0, a1, a2, a3, a4, a5);
}


J2CPP_DEFINE_CLASS(android::text::InputFilter_::LengthFilter,"android/text/InputFilter$LengthFilter")
J2CPP_DEFINE_METHOD(android::text::InputFilter_::LengthFilter,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(android::text::InputFilter_::LengthFilter,1,"filter","(Ljava/lang/CharSequence;IILandroid/text/Spanned;II)Ljava/lang/CharSequence;")



android::text::InputFilter::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

local_ref< java::lang::CharSequence > android::text::InputFilter::filter(local_ref< java::lang::CharSequence > const &a0, jint a1, jint a2, local_ref< android::text::Spanned > const &a3, jint a4, jint a5)
{
	return call_method<
		android::text::InputFilter::J2CPP_CLASS_NAME,
		android::text::InputFilter::J2CPP_METHOD_NAME(0),
		android::text::InputFilter::J2CPP_METHOD_SIGNATURE(0), 
		local_ref< java::lang::CharSequence >
	>(get_jobject(), a0, a1, a2, a3, a4, a5);
}


J2CPP_DEFINE_CLASS(android::text::InputFilter,"android/text/InputFilter")
J2CPP_DEFINE_METHOD(android::text::InputFilter,0,"filter","(Ljava/lang/CharSequence;IILandroid/text/Spanned;II)Ljava/lang/CharSequence;")

} //namespace j2cpp

#endif //J2CPP_ANDROID_TEXT_INPUTFILTER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.widget.Adapter
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_WIDGET_ADAPTER_HPP_DECL
#define J2CPP_ANDROID_WIDGET_ADAPTER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace android { namespace database { class DataSetObserver; } } }
namespace j2cpp { namespace android { namespace view { class View; } } }
namespace j2cpp { namespace android { namespace view { class ViewGroup; } } }


#include <android/database/DataSetObserver.hpp>
#include <android/view/View.hpp>
#include <android/view/ViewGroup.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace widget {

	class Adapter;
	class Adapter
		: public object<Adapter>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		explicit Adapter(jobject jobj)
		: object<Adapter>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		void registerDataSetObserver(local_ref< android::database::DataSetObserver >  const&);
		void unregisterDataSetObserver(local_ref< android::database::DataSetObserver >  const&);
		jint getCount();
		local_ref< java::lang::Object > getItem(jint);
		jlong getItemId(jint);
		jboolean hasStableIds();
		local_ref< android::view::View > getView(jint, local_ref< android::view::View >  const&, local_ref< android::view::ViewGroup >  const&);
		jint getItemViewType(jint);
		jint getViewTypeCount();
		jboolean isEmpty();

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > IGNORE_ITEM_VIEW_TYPE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > NO_SELECTION;
	}; //class Adapter

} //namespace widget
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_WIDGET_ADAPTER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_WIDGET_ADAPTER_HPP_IMPL
#define J2CPP_ANDROID_WIDGET_ADAPTER_HPP_IMPL

namespace j2cpp {



android::widget::Adapter::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

void android::widget::Adapter::registerDataSetObserver(local_ref< android::database::DataSetObserver > const &a0)
{
	return call_method<
		android::widget::Adapter::J2CPP_CLASS_NAME,
		android::widget::Adapter::J2CPP_METHOD_NAME(0),
		android::widget::Adapter::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0);
}

void android::widget::Adapter::unregisterDataSetObserver(local_ref< android::database::DataSetObserver > const &a0)
{
	return call_method<
		android::widget::Adapter::J2CPP_CLASS_NAME,
		android::widget::Adapter::J2CPP_METHOD_NAME(1),
		android::widget::Adapter::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0);
}

jint android::widget::Adapter::getCount()
{
	return call_method<
		android::widget::Adapter::J2CPP_CLASS_NAME,
		android::widget::Adapter::J2CPP_METHOD_NAME(2),
		android::widget::Adapter::J2CPP_METHOD_SIGNATURE(2), 
		jint
	>(get_jobject());
}

local_ref< java::lang::Object > android::widget::Adapter::getItem(jint a0)
{
	return call_method<
		android::widget::Adapter::J2CPP_CLASS_NAME,
		android::widget::Adapter::J2CPP_METHOD_NAME(3),
		android::widget::Adapter::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< java::lang::Object >
	>(get_jobject(), a0);
}

jlong android::widget::Adapter::getItemId(jint a0)
{
	return call_method<
		android::widget::Adapter::J2CPP_CLASS_NAME,
		android::widget::Adapter::J2CPP_METHOD_NAME(4),
		android::widget::Adapter::J2CPP_METHOD_SIGNATURE(4), 
		jlong
	>(get_jobject(), a0);
}

jboolean android::widget::Adapter::hasStableIds()
{
	return call_method<
		android::widget::Adapter::J2CPP_CLASS_NAME,
		android::widget::Adapter::J2CPP_METHOD_NAME(5),
		android::widget::Adapter::J2CPP_METHOD_SIGNATURE(5), 
		jboolean
	>(get_jobject());
}

local_ref< android::view::View > android::widget::Adapter::getView(jint a0, local_ref< android::view::View > const &a1, local_ref< android::view::ViewGroup > const &a2)
{
	return call_method<
		android::widget::Adapter::J2CPP_CLASS_NAME,
		android::widget::Adapter::J2CPP_METHOD_NAME(6),
		android::widget::Adapter::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< android::view::View >
	>(get_jobject(), a0, a1, a2);
}

jint android::widget::Adapter::getItemViewType(jint a0)
{
	return call_method<
		android::widget::Adapter::J2CPP_CLASS_NAME,
		android::widget::Adapter::J2CPP_METHOD_NAME(7),
		android::widget::Adapter::J2CPP_METHOD_SIGNATURE(7), 
		jint
	>(get_jobject(), a0);
}

jint android::widget::Adapter::getViewTypeCount()
{
	return call_method<
		android::widget::Adapter::J2CPP_CLASS_NAME,
		android::widget::Adapter::J2CPP_METHOD_NAME(8),
		android::widget::Adapter::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}

jboolean android::widget::Adapter::isEmpty()
{
	return call_method<
		android::widget::Adapter::J2CPP_CLASS_NAME,
		android::widget::Adapter::J2CPP_METHOD_NAME(9),
		android::widget::Adapter::J2CPP_METHOD_SIGNATURE(9), 
		jboolean
	>(get_jobject());
}


static_field<
	android::widget::Adapter::J2CPP_CLASS_NAME,
	android::widget::Adapter::J2CPP_FIELD_NAME(0),
	android::widget::Adapter::J2CPP_FIELD_SIGNATURE(0),
	jint
> android::widget::Adapter::IGNORE_ITEM_VIEW_TYPE;

static_field<
	android::widget::Adapter::J2CPP_CLASS_NAME,
	android::widget::Adapter::J2CPP_FIELD_NAME(1),
	android::widget::Adapter::J2CPP_FIELD_SIGNATURE(1),
	jint
> android::widget::Adapter::NO_SELECTION;


J2CPP_DEFINE_CLASS(android::widget::Adapter,"android/widget/Adapter")
J2CPP_DEFINE_METHOD(android::widget::Adapter,0,"registerDataSetObserver","(Landroid/database/DataSetObserver;)V")
J2CPP_DEFINE_METHOD(android::widget::Adapter,1,"unregisterDataSetObserver","(Landroid/database/DataSetObserver;)V")
J2CPP_DEFINE_METHOD(android::widget::Adapter,2,"getCount","()I")
J2CPP_DEFINE_METHOD(android::widget::Adapter,3,"getItem","(I)Ljava/lang/Object;")
J2CPP_DEFINE_METHOD(android::widget::Adapter,4,"getItemId","(I)J")
J2CPP_DEFINE_METHOD(android::widget::Adapter,5,"hasStableIds","()Z")
J2CPP_DEFINE_METHOD(android::widget::Adapter,6,"getView","(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;")
J2CPP_DEFINE_METHOD(android::widget::Adapter,7,"getItemViewType","(I)I")
J2CPP_DEFINE_METHOD(android::widget::Adapter,8,"getViewTypeCount","()I")
J2CPP_DEFINE_METHOD(android::widget::Adapter,9,"isEmpty","()Z")
J2CPP_DEFINE_FIELD(android::widget::Adapter,0,"IGNORE_ITEM_VIEW_TYPE","I")
J2CPP_DEFINE_FIELD(android::widget::Adapter,1,"NO_SELECTION","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_WIDGET_ADAPTER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

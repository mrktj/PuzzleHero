/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.view.animation.AlphaAnimation
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_VIEW_ANIMATION_ALPHAANIMATION_HPP_DECL
#define J2CPP_ANDROID_VIEW_ANIMATION_ALPHAANIMATION_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Cloneable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace android { namespace util { class AttributeSet; } } }
namespace j2cpp { namespace android { namespace view { namespace animation { class Animation; } } } }


#include <android/content/Context.hpp>
#include <android/util/AttributeSet.hpp>
#include <android/view/animation/Animation.hpp>
#include <java/lang/Cloneable.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace android { namespace view { namespace animation {

	class AlphaAnimation;
	class AlphaAnimation
		: public object<AlphaAnimation>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		explicit AlphaAnimation(jobject jobj)
		: object<AlphaAnimation>(jobj)
		{
		}

		operator local_ref<java::lang::Cloneable>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<android::view::animation::Animation>() const;


		AlphaAnimation(local_ref< android::content::Context > const&, local_ref< android::util::AttributeSet > const&);
		AlphaAnimation(jfloat, jfloat);
		jboolean willChangeTransformationMatrix();
		jboolean willChangeBounds();
	}; //class AlphaAnimation

} //namespace animation
} //namespace view
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_VIEW_ANIMATION_ALPHAANIMATION_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_VIEW_ANIMATION_ALPHAANIMATION_HPP_IMPL
#define J2CPP_ANDROID_VIEW_ANIMATION_ALPHAANIMATION_HPP_IMPL

namespace j2cpp {



android::view::animation::AlphaAnimation::operator local_ref<java::lang::Cloneable>() const
{
	return local_ref<java::lang::Cloneable>(get_jobject());
}

android::view::animation::AlphaAnimation::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

android::view::animation::AlphaAnimation::operator local_ref<android::view::animation::Animation>() const
{
	return local_ref<android::view::animation::Animation>(get_jobject());
}


android::view::animation::AlphaAnimation::AlphaAnimation(local_ref< android::content::Context > const &a0, local_ref< android::util::AttributeSet > const &a1)
: object<android::view::animation::AlphaAnimation>(
	call_new_object<
		android::view::animation::AlphaAnimation::J2CPP_CLASS_NAME,
		android::view::animation::AlphaAnimation::J2CPP_METHOD_NAME(0),
		android::view::animation::AlphaAnimation::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1)
)
{
}



android::view::animation::AlphaAnimation::AlphaAnimation(jfloat a0, jfloat a1)
: object<android::view::animation::AlphaAnimation>(
	call_new_object<
		android::view::animation::AlphaAnimation::J2CPP_CLASS_NAME,
		android::view::animation::AlphaAnimation::J2CPP_METHOD_NAME(1),
		android::view::animation::AlphaAnimation::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1)
)
{
}



jboolean android::view::animation::AlphaAnimation::willChangeTransformationMatrix()
{
	return call_method<
		android::view::animation::AlphaAnimation::J2CPP_CLASS_NAME,
		android::view::animation::AlphaAnimation::J2CPP_METHOD_NAME(3),
		android::view::animation::AlphaAnimation::J2CPP_METHOD_SIGNATURE(3), 
		jboolean
	>(get_jobject());
}

jboolean android::view::animation::AlphaAnimation::willChangeBounds()
{
	return call_method<
		android::view::animation::AlphaAnimation::J2CPP_CLASS_NAME,
		android::view::animation::AlphaAnimation::J2CPP_METHOD_NAME(4),
		android::view::animation::AlphaAnimation::J2CPP_METHOD_SIGNATURE(4), 
		jboolean
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(android::view::animation::AlphaAnimation,"android/view/animation/AlphaAnimation")
J2CPP_DEFINE_METHOD(android::view::animation::AlphaAnimation,0,"<init>","(Landroid/content/Context;Landroid/util/AttributeSet;)V")
J2CPP_DEFINE_METHOD(android::view::animation::AlphaAnimation,1,"<init>","(FF)V")
J2CPP_DEFINE_METHOD(android::view::animation::AlphaAnimation,2,"applyTransformation","(FLandroid/view/animation/Transformation;)V")
J2CPP_DEFINE_METHOD(android::view::animation::AlphaAnimation,3,"willChangeTransformationMatrix","()Z")
J2CPP_DEFINE_METHOD(android::view::animation::AlphaAnimation,4,"willChangeBounds","()Z")

} //namespace j2cpp

#endif //J2CPP_ANDROID_VIEW_ANIMATION_ALPHAANIMATION_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

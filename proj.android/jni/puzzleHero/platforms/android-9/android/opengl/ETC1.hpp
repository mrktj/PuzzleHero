/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: android.opengl.ETC1
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OPENGL_ETC1_HPP_DECL
#define J2CPP_ANDROID_OPENGL_ETC1_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace nio { class Buffer; } } }


#include <java/lang/Object.hpp>
#include <java/nio/Buffer.hpp>


namespace j2cpp {

namespace android { namespace opengl {

	class ETC1;
	class ETC1
		: public object<ETC1>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)

		explicit ETC1(jobject jobj)
		: object<ETC1>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		ETC1();
		static void encodeBlock(local_ref< java::nio::Buffer >  const&, jint, local_ref< java::nio::Buffer >  const&);
		static void decodeBlock(local_ref< java::nio::Buffer >  const&, local_ref< java::nio::Buffer >  const&);
		static jint getEncodedDataSize(jint, jint);
		static void encodeImage(local_ref< java::nio::Buffer >  const&, jint, jint, jint, jint, local_ref< java::nio::Buffer >  const&);
		static void decodeImage(local_ref< java::nio::Buffer >  const&, local_ref< java::nio::Buffer >  const&, jint, jint, jint, jint);
		static void formatHeader(local_ref< java::nio::Buffer >  const&, jint, jint);
		static jboolean isValid(local_ref< java::nio::Buffer >  const&);
		static jint getWidth(local_ref< java::nio::Buffer >  const&);
		static jint getHeight(local_ref< java::nio::Buffer >  const&);

		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(0), J2CPP_FIELD_SIGNATURE(0), jint > ENCODED_BLOCK_SIZE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(1), J2CPP_FIELD_SIGNATURE(1), jint > DECODED_BLOCK_SIZE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(2), J2CPP_FIELD_SIGNATURE(2), jint > ETC_PKM_HEADER_SIZE;
		static static_field< J2CPP_CLASS_NAME, J2CPP_FIELD_NAME(3), J2CPP_FIELD_SIGNATURE(3), jint > ETC1_RGB8_OES;
	}; //class ETC1

} //namespace opengl
} //namespace android

} //namespace j2cpp

#endif //J2CPP_ANDROID_OPENGL_ETC1_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ANDROID_OPENGL_ETC1_HPP_IMPL
#define J2CPP_ANDROID_OPENGL_ETC1_HPP_IMPL

namespace j2cpp {



android::opengl::ETC1::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


android::opengl::ETC1::ETC1()
: object<android::opengl::ETC1>(
	call_new_object<
		android::opengl::ETC1::J2CPP_CLASS_NAME,
		android::opengl::ETC1::J2CPP_METHOD_NAME(0),
		android::opengl::ETC1::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


void android::opengl::ETC1::encodeBlock(local_ref< java::nio::Buffer > const &a0, jint a1, local_ref< java::nio::Buffer > const &a2)
{
	return call_static_method<
		android::opengl::ETC1::J2CPP_CLASS_NAME,
		android::opengl::ETC1::J2CPP_METHOD_NAME(1),
		android::opengl::ETC1::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(a0, a1, a2);
}

void android::opengl::ETC1::decodeBlock(local_ref< java::nio::Buffer > const &a0, local_ref< java::nio::Buffer > const &a1)
{
	return call_static_method<
		android::opengl::ETC1::J2CPP_CLASS_NAME,
		android::opengl::ETC1::J2CPP_METHOD_NAME(2),
		android::opengl::ETC1::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(a0, a1);
}

jint android::opengl::ETC1::getEncodedDataSize(jint a0, jint a1)
{
	return call_static_method<
		android::opengl::ETC1::J2CPP_CLASS_NAME,
		android::opengl::ETC1::J2CPP_METHOD_NAME(3),
		android::opengl::ETC1::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(a0, a1);
}

void android::opengl::ETC1::encodeImage(local_ref< java::nio::Buffer > const &a0, jint a1, jint a2, jint a3, jint a4, local_ref< java::nio::Buffer > const &a5)
{
	return call_static_method<
		android::opengl::ETC1::J2CPP_CLASS_NAME,
		android::opengl::ETC1::J2CPP_METHOD_NAME(4),
		android::opengl::ETC1::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(a0, a1, a2, a3, a4, a5);
}

void android::opengl::ETC1::decodeImage(local_ref< java::nio::Buffer > const &a0, local_ref< java::nio::Buffer > const &a1, jint a2, jint a3, jint a4, jint a5)
{
	return call_static_method<
		android::opengl::ETC1::J2CPP_CLASS_NAME,
		android::opengl::ETC1::J2CPP_METHOD_NAME(5),
		android::opengl::ETC1::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(a0, a1, a2, a3, a4, a5);
}

void android::opengl::ETC1::formatHeader(local_ref< java::nio::Buffer > const &a0, jint a1, jint a2)
{
	return call_static_method<
		android::opengl::ETC1::J2CPP_CLASS_NAME,
		android::opengl::ETC1::J2CPP_METHOD_NAME(6),
		android::opengl::ETC1::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(a0, a1, a2);
}

jboolean android::opengl::ETC1::isValid(local_ref< java::nio::Buffer > const &a0)
{
	return call_static_method<
		android::opengl::ETC1::J2CPP_CLASS_NAME,
		android::opengl::ETC1::J2CPP_METHOD_NAME(7),
		android::opengl::ETC1::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(a0);
}

jint android::opengl::ETC1::getWidth(local_ref< java::nio::Buffer > const &a0)
{
	return call_static_method<
		android::opengl::ETC1::J2CPP_CLASS_NAME,
		android::opengl::ETC1::J2CPP_METHOD_NAME(8),
		android::opengl::ETC1::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(a0);
}

jint android::opengl::ETC1::getHeight(local_ref< java::nio::Buffer > const &a0)
{
	return call_static_method<
		android::opengl::ETC1::J2CPP_CLASS_NAME,
		android::opengl::ETC1::J2CPP_METHOD_NAME(9),
		android::opengl::ETC1::J2CPP_METHOD_SIGNATURE(9), 
		jint
	>(a0);
}


static_field<
	android::opengl::ETC1::J2CPP_CLASS_NAME,
	android::opengl::ETC1::J2CPP_FIELD_NAME(0),
	android::opengl::ETC1::J2CPP_FIELD_SIGNATURE(0),
	jint
> android::opengl::ETC1::ENCODED_BLOCK_SIZE;

static_field<
	android::opengl::ETC1::J2CPP_CLASS_NAME,
	android::opengl::ETC1::J2CPP_FIELD_NAME(1),
	android::opengl::ETC1::J2CPP_FIELD_SIGNATURE(1),
	jint
> android::opengl::ETC1::DECODED_BLOCK_SIZE;

static_field<
	android::opengl::ETC1::J2CPP_CLASS_NAME,
	android::opengl::ETC1::J2CPP_FIELD_NAME(2),
	android::opengl::ETC1::J2CPP_FIELD_SIGNATURE(2),
	jint
> android::opengl::ETC1::ETC_PKM_HEADER_SIZE;

static_field<
	android::opengl::ETC1::J2CPP_CLASS_NAME,
	android::opengl::ETC1::J2CPP_FIELD_NAME(3),
	android::opengl::ETC1::J2CPP_FIELD_SIGNATURE(3),
	jint
> android::opengl::ETC1::ETC1_RGB8_OES;


J2CPP_DEFINE_CLASS(android::opengl::ETC1,"android/opengl/ETC1")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,0,"<init>","()V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,1,"encodeBlock","(Ljava/nio/Buffer;ILjava/nio/Buffer;)V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,2,"decodeBlock","(Ljava/nio/Buffer;Ljava/nio/Buffer;)V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,3,"getEncodedDataSize","(II)I")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,4,"encodeImage","(Ljava/nio/Buffer;IIIILjava/nio/Buffer;)V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,5,"decodeImage","(Ljava/nio/Buffer;Ljava/nio/Buffer;IIII)V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,6,"formatHeader","(Ljava/nio/Buffer;II)V")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,7,"isValid","(Ljava/nio/Buffer;)Z")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,8,"getWidth","(Ljava/nio/Buffer;)I")
J2CPP_DEFINE_METHOD(android::opengl::ETC1,9,"getHeight","(Ljava/nio/Buffer;)I")
J2CPP_DEFINE_FIELD(android::opengl::ETC1,0,"ENCODED_BLOCK_SIZE","I")
J2CPP_DEFINE_FIELD(android::opengl::ETC1,1,"DECODED_BLOCK_SIZE","I")
J2CPP_DEFINE_FIELD(android::opengl::ETC1,2,"ETC_PKM_HEADER_SIZE","I")
J2CPP_DEFINE_FIELD(android::opengl::ETC1,3,"ETC1_RGB8_OES","I")

} //namespace j2cpp

#endif //J2CPP_ANDROID_OPENGL_ETC1_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

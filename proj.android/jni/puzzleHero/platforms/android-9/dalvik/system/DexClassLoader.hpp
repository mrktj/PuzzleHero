/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: dalvik.system.DexClassLoader
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_DEXCLASSLOADER_HPP_DECL
#define J2CPP_DALVIK_SYSTEM_DEXCLASSLOADER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class ClassLoader; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/ClassLoader.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace dalvik { namespace system {

	class DexClassLoader;
	class DexClassLoader
		: public object<DexClassLoader>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)

		explicit DexClassLoader(jobject jobj)
		: object<DexClassLoader>(jobj)
		{
		}

		operator local_ref<java::lang::ClassLoader>() const;
		operator local_ref<java::lang::Object>() const;


		DexClassLoader(local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::String > const&, local_ref< java::lang::ClassLoader > const&);
	}; //class DexClassLoader

} //namespace system
} //namespace dalvik

} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_DEXCLASSLOADER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_DALVIK_SYSTEM_DEXCLASSLOADER_HPP_IMPL
#define J2CPP_DALVIK_SYSTEM_DEXCLASSLOADER_HPP_IMPL

namespace j2cpp {



dalvik::system::DexClassLoader::operator local_ref<java::lang::ClassLoader>() const
{
	return local_ref<java::lang::ClassLoader>(get_jobject());
}

dalvik::system::DexClassLoader::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


dalvik::system::DexClassLoader::DexClassLoader(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1, local_ref< java::lang::String > const &a2, local_ref< java::lang::ClassLoader > const &a3)
: object<dalvik::system::DexClassLoader>(
	call_new_object<
		dalvik::system::DexClassLoader::J2CPP_CLASS_NAME,
		dalvik::system::DexClassLoader::J2CPP_METHOD_NAME(0),
		dalvik::system::DexClassLoader::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1, a2, a3)
)
{
}







J2CPP_DEFINE_CLASS(dalvik::system::DexClassLoader,"dalvik/system/DexClassLoader")
J2CPP_DEFINE_METHOD(dalvik::system::DexClassLoader,0,"<init>","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)V")
J2CPP_DEFINE_METHOD(dalvik::system::DexClassLoader,1,"findClass","(Ljava/lang/String;)Ljava/lang/Class;")
J2CPP_DEFINE_METHOD(dalvik::system::DexClassLoader,2,"findResource","(Ljava/lang/String;)Ljava/net/URL;")
J2CPP_DEFINE_METHOD(dalvik::system::DexClassLoader,3,"findLibrary","(Ljava/lang/String;)Ljava/lang/String;")
J2CPP_DEFINE_METHOD(dalvik::system::DexClassLoader,4,"getPackage","(Ljava/lang/String;)Ljava/lang/Package;")

} //namespace j2cpp

#endif //J2CPP_DALVIK_SYSTEM_DEXCLASSLOADER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

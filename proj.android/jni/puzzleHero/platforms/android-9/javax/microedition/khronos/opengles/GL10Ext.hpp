/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: javax.microedition.khronos.opengles.GL10Ext
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL10EXT_HPP_DECL
#define J2CPP_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL10EXT_HPP_DECL


namespace j2cpp { namespace javax { namespace microedition { namespace khronos { namespace opengles { class GL; } } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace nio { class IntBuffer; } } }


#include <java/lang/Object.hpp>
#include <java/nio/IntBuffer.hpp>
#include <javax/microedition/khronos/opengles/GL.hpp>


namespace j2cpp {

namespace javax { namespace microedition { namespace khronos { namespace opengles {

	class GL10Ext;
	class GL10Ext
		: public object<GL10Ext>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		explicit GL10Ext(jobject jobj)
		: object<GL10Ext>(jobj)
		{
		}

		operator local_ref<javax::microedition::khronos::opengles::GL>() const;
		operator local_ref<java::lang::Object>() const;


		jint glQueryMatrixxOES(local_ref< array<jint,1> >  const&, jint, local_ref< array<jint,1> >  const&, jint);
		jint glQueryMatrixxOES(local_ref< java::nio::IntBuffer >  const&, local_ref< java::nio::IntBuffer >  const&);
	}; //class GL10Ext

} //namespace opengles
} //namespace khronos
} //namespace microedition
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL10EXT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL10EXT_HPP_IMPL
#define J2CPP_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL10EXT_HPP_IMPL

namespace j2cpp {



javax::microedition::khronos::opengles::GL10Ext::operator local_ref<javax::microedition::khronos::opengles::GL>() const
{
	return local_ref<javax::microedition::khronos::opengles::GL>(get_jobject());
}

javax::microedition::khronos::opengles::GL10Ext::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

jint javax::microedition::khronos::opengles::GL10Ext::glQueryMatrixxOES(local_ref< array<jint,1> > const &a0, jint a1, local_ref< array<jint,1> > const &a2, jint a3)
{
	return call_method<
		javax::microedition::khronos::opengles::GL10Ext::J2CPP_CLASS_NAME,
		javax::microedition::khronos::opengles::GL10Ext::J2CPP_METHOD_NAME(0),
		javax::microedition::khronos::opengles::GL10Ext::J2CPP_METHOD_SIGNATURE(0), 
		jint
	>(get_jobject(), a0, a1, a2, a3);
}

jint javax::microedition::khronos::opengles::GL10Ext::glQueryMatrixxOES(local_ref< java::nio::IntBuffer > const &a0, local_ref< java::nio::IntBuffer > const &a1)
{
	return call_method<
		javax::microedition::khronos::opengles::GL10Ext::J2CPP_CLASS_NAME,
		javax::microedition::khronos::opengles::GL10Ext::J2CPP_METHOD_NAME(1),
		javax::microedition::khronos::opengles::GL10Ext::J2CPP_METHOD_SIGNATURE(1), 
		jint
	>(get_jobject(), a0, a1);
}


J2CPP_DEFINE_CLASS(javax::microedition::khronos::opengles::GL10Ext,"javax/microedition/khronos/opengles/GL10Ext")
J2CPP_DEFINE_METHOD(javax::microedition::khronos::opengles::GL10Ext,0,"glQueryMatrixxOES","([II[II)I")
J2CPP_DEFINE_METHOD(javax::microedition::khronos::opengles::GL10Ext,1,"glQueryMatrixxOES","(Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;)I")

} //namespace j2cpp

#endif //J2CPP_JAVAX_MICROEDITION_KHRONOS_OPENGLES_GL10EXT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: javax.crypto.spec.PBEKeySpec
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SPEC_PBEKEYSPEC_HPP_DECL
#define J2CPP_JAVAX_CRYPTO_SPEC_PBEKEYSPEC_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { namespace spec { class KeySpec; } } } }


#include <java/lang/Object.hpp>
#include <java/security/spec/KeySpec.hpp>


namespace j2cpp {

namespace javax { namespace crypto { namespace spec {

	class PBEKeySpec;
	class PBEKeySpec
		: public object<PBEKeySpec>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)

		explicit PBEKeySpec(jobject jobj)
		: object<PBEKeySpec>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::security::spec::KeySpec>() const;


		PBEKeySpec(local_ref< array<jchar,1> > const&);
		PBEKeySpec(local_ref< array<jchar,1> > const&, local_ref< array<jbyte,1> > const&, jint, jint);
		PBEKeySpec(local_ref< array<jchar,1> > const&, local_ref< array<jbyte,1> > const&, jint);
		void clearPassword();
		local_ref< array<jchar,1> > getPassword();
		local_ref< array<jbyte,1> > getSalt();
		jint getIterationCount();
		jint getKeyLength();
	}; //class PBEKeySpec

} //namespace spec
} //namespace crypto
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SPEC_PBEKEYSPEC_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SPEC_PBEKEYSPEC_HPP_IMPL
#define J2CPP_JAVAX_CRYPTO_SPEC_PBEKEYSPEC_HPP_IMPL

namespace j2cpp {



javax::crypto::spec::PBEKeySpec::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

javax::crypto::spec::PBEKeySpec::operator local_ref<java::security::spec::KeySpec>() const
{
	return local_ref<java::security::spec::KeySpec>(get_jobject());
}


javax::crypto::spec::PBEKeySpec::PBEKeySpec(local_ref< array<jchar,1> > const &a0)
: object<javax::crypto::spec::PBEKeySpec>(
	call_new_object<
		javax::crypto::spec::PBEKeySpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_NAME(0),
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}



javax::crypto::spec::PBEKeySpec::PBEKeySpec(local_ref< array<jchar,1> > const &a0, local_ref< array<jbyte,1> > const &a1, jint a2, jint a3)
: object<javax::crypto::spec::PBEKeySpec>(
	call_new_object<
		javax::crypto::spec::PBEKeySpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_NAME(1),
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1, a2, a3)
)
{
}



javax::crypto::spec::PBEKeySpec::PBEKeySpec(local_ref< array<jchar,1> > const &a0, local_ref< array<jbyte,1> > const &a1, jint a2)
: object<javax::crypto::spec::PBEKeySpec>(
	call_new_object<
		javax::crypto::spec::PBEKeySpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_NAME(2),
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_SIGNATURE(2)
	>(a0, a1, a2)
)
{
}


void javax::crypto::spec::PBEKeySpec::clearPassword()
{
	return call_method<
		javax::crypto::spec::PBEKeySpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_NAME(3),
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject());
}

local_ref< array<jchar,1> > javax::crypto::spec::PBEKeySpec::getPassword()
{
	return call_method<
		javax::crypto::spec::PBEKeySpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_NAME(4),
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< array<jchar,1> >
	>(get_jobject());
}

local_ref< array<jbyte,1> > javax::crypto::spec::PBEKeySpec::getSalt()
{
	return call_method<
		javax::crypto::spec::PBEKeySpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_NAME(5),
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< array<jbyte,1> >
	>(get_jobject());
}

jint javax::crypto::spec::PBEKeySpec::getIterationCount()
{
	return call_method<
		javax::crypto::spec::PBEKeySpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_NAME(6),
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_SIGNATURE(6), 
		jint
	>(get_jobject());
}

jint javax::crypto::spec::PBEKeySpec::getKeyLength()
{
	return call_method<
		javax::crypto::spec::PBEKeySpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_NAME(7),
		javax::crypto::spec::PBEKeySpec::J2CPP_METHOD_SIGNATURE(7), 
		jint
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(javax::crypto::spec::PBEKeySpec,"javax/crypto/spec/PBEKeySpec")
J2CPP_DEFINE_METHOD(javax::crypto::spec::PBEKeySpec,0,"<init>","([C)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::PBEKeySpec,1,"<init>","([C[BII)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::PBEKeySpec,2,"<init>","([C[BI)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::PBEKeySpec,3,"clearPassword","()V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::PBEKeySpec,4,"getPassword","()[C")
J2CPP_DEFINE_METHOD(javax::crypto::spec::PBEKeySpec,5,"getSalt","()[B")
J2CPP_DEFINE_METHOD(javax::crypto::spec::PBEKeySpec,6,"getIterationCount","()I")
J2CPP_DEFINE_METHOD(javax::crypto::spec::PBEKeySpec,7,"getKeyLength","()I")

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SPEC_PBEKEYSPEC_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

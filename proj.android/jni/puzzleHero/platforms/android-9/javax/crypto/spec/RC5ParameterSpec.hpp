/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: javax.crypto.spec.RC5ParameterSpec
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SPEC_RC5PARAMETERSPEC_HPP_DECL
#define J2CPP_JAVAX_CRYPTO_SPEC_RC5PARAMETERSPEC_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { namespace spec { class AlgorithmParameterSpec; } } } }


#include <java/lang/Object.hpp>
#include <java/security/spec/AlgorithmParameterSpec.hpp>


namespace j2cpp {

namespace javax { namespace crypto { namespace spec {

	class RC5ParameterSpec;
	class RC5ParameterSpec
		: public object<RC5ParameterSpec>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)

		explicit RC5ParameterSpec(jobject jobj)
		: object<RC5ParameterSpec>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::security::spec::AlgorithmParameterSpec>() const;


		RC5ParameterSpec(jint, jint, jint);
		RC5ParameterSpec(jint, jint, jint, local_ref< array<jbyte,1> > const&);
		RC5ParameterSpec(jint, jint, jint, local_ref< array<jbyte,1> > const&, jint);
		jint getVersion();
		jint getRounds();
		jint getWordSize();
		local_ref< array<jbyte,1> > getIV();
		jboolean equals(local_ref< java::lang::Object >  const&);
		jint hashCode();
	}; //class RC5ParameterSpec

} //namespace spec
} //namespace crypto
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SPEC_RC5PARAMETERSPEC_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_SPEC_RC5PARAMETERSPEC_HPP_IMPL
#define J2CPP_JAVAX_CRYPTO_SPEC_RC5PARAMETERSPEC_HPP_IMPL

namespace j2cpp {



javax::crypto::spec::RC5ParameterSpec::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

javax::crypto::spec::RC5ParameterSpec::operator local_ref<java::security::spec::AlgorithmParameterSpec>() const
{
	return local_ref<java::security::spec::AlgorithmParameterSpec>(get_jobject());
}


javax::crypto::spec::RC5ParameterSpec::RC5ParameterSpec(jint a0, jint a1, jint a2)
: object<javax::crypto::spec::RC5ParameterSpec>(
	call_new_object<
		javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_NAME(0),
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1, a2)
)
{
}



javax::crypto::spec::RC5ParameterSpec::RC5ParameterSpec(jint a0, jint a1, jint a2, local_ref< array<jbyte,1> > const &a3)
: object<javax::crypto::spec::RC5ParameterSpec>(
	call_new_object<
		javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_NAME(1),
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_SIGNATURE(1)
	>(a0, a1, a2, a3)
)
{
}



javax::crypto::spec::RC5ParameterSpec::RC5ParameterSpec(jint a0, jint a1, jint a2, local_ref< array<jbyte,1> > const &a3, jint a4)
: object<javax::crypto::spec::RC5ParameterSpec>(
	call_new_object<
		javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_NAME(2),
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_SIGNATURE(2)
	>(a0, a1, a2, a3, a4)
)
{
}


jint javax::crypto::spec::RC5ParameterSpec::getVersion()
{
	return call_method<
		javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_NAME(3),
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_SIGNATURE(3), 
		jint
	>(get_jobject());
}

jint javax::crypto::spec::RC5ParameterSpec::getRounds()
{
	return call_method<
		javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_NAME(4),
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_SIGNATURE(4), 
		jint
	>(get_jobject());
}

jint javax::crypto::spec::RC5ParameterSpec::getWordSize()
{
	return call_method<
		javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_NAME(5),
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_SIGNATURE(5), 
		jint
	>(get_jobject());
}

local_ref< array<jbyte,1> > javax::crypto::spec::RC5ParameterSpec::getIV()
{
	return call_method<
		javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_NAME(6),
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< array<jbyte,1> >
	>(get_jobject());
}

jboolean javax::crypto::spec::RC5ParameterSpec::equals(local_ref< java::lang::Object > const &a0)
{
	return call_method<
		javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_NAME(7),
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject(), a0);
}

jint javax::crypto::spec::RC5ParameterSpec::hashCode()
{
	return call_method<
		javax::crypto::spec::RC5ParameterSpec::J2CPP_CLASS_NAME,
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_NAME(8),
		javax::crypto::spec::RC5ParameterSpec::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(javax::crypto::spec::RC5ParameterSpec,"javax/crypto/spec/RC5ParameterSpec")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,0,"<init>","(III)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,1,"<init>","(III[B)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,2,"<init>","(III[BI)V")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,3,"getVersion","()I")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,4,"getRounds","()I")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,5,"getWordSize","()I")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,6,"getIV","()[B")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,7,"equals","(Ljava/lang/Object;)Z")
J2CPP_DEFINE_METHOD(javax::crypto::spec::RC5ParameterSpec,8,"hashCode","()I")

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_SPEC_RC5PARAMETERSPEC_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

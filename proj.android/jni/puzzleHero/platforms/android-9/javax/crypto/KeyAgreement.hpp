/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: javax.crypto.KeyAgreement
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_KEYAGREEMENT_HPP_DECL
#define J2CPP_JAVAX_CRYPTO_KEYAGREEMENT_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace javax { namespace crypto { class SecretKey; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace security { class SecureRandom; } } }
namespace j2cpp { namespace java { namespace security { class Key; } } }
namespace j2cpp { namespace java { namespace security { class Provider; } } }
namespace j2cpp { namespace java { namespace security { namespace spec { class AlgorithmParameterSpec; } } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <java/security/Key.hpp>
#include <java/security/Provider.hpp>
#include <java/security/SecureRandom.hpp>
#include <java/security/spec/AlgorithmParameterSpec.hpp>
#include <javax/crypto/SecretKey.hpp>


namespace j2cpp {

namespace javax { namespace crypto {

	class KeyAgreement;
	class KeyAgreement
		: public object<KeyAgreement>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)

		explicit KeyAgreement(jobject jobj)
		: object<KeyAgreement>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		local_ref< java::lang::String > getAlgorithm();
		local_ref< java::security::Provider > getProvider();
		static local_ref< javax::crypto::KeyAgreement > getInstance(local_ref< java::lang::String >  const&);
		static local_ref< javax::crypto::KeyAgreement > getInstance(local_ref< java::lang::String >  const&, local_ref< java::lang::String >  const&);
		static local_ref< javax::crypto::KeyAgreement > getInstance(local_ref< java::lang::String >  const&, local_ref< java::security::Provider >  const&);
		void init(local_ref< java::security::Key >  const&);
		void init(local_ref< java::security::Key >  const&, local_ref< java::security::SecureRandom >  const&);
		void init(local_ref< java::security::Key >  const&, local_ref< java::security::spec::AlgorithmParameterSpec >  const&);
		void init(local_ref< java::security::Key >  const&, local_ref< java::security::spec::AlgorithmParameterSpec >  const&, local_ref< java::security::SecureRandom >  const&);
		local_ref< java::security::Key > doPhase(local_ref< java::security::Key >  const&, jboolean);
		local_ref< array<jbyte,1> > generateSecret();
		jint generateSecret(local_ref< array<jbyte,1> >  const&, jint);
		local_ref< javax::crypto::SecretKey > generateSecret(local_ref< java::lang::String >  const&);
	}; //class KeyAgreement

} //namespace crypto
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_KEYAGREEMENT_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_CRYPTO_KEYAGREEMENT_HPP_IMPL
#define J2CPP_JAVAX_CRYPTO_KEYAGREEMENT_HPP_IMPL

namespace j2cpp {



javax::crypto::KeyAgreement::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


local_ref< java::lang::String > javax::crypto::KeyAgreement::getAlgorithm()
{
	return call_method<
		javax::crypto::KeyAgreement::J2CPP_CLASS_NAME,
		javax::crypto::KeyAgreement::J2CPP_METHOD_NAME(1),
		javax::crypto::KeyAgreement::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::String >
	>(get_jobject());
}

local_ref< java::security::Provider > javax::crypto::KeyAgreement::getProvider()
{
	return call_method<
		javax::crypto::KeyAgreement::J2CPP_CLASS_NAME,
		javax::crypto::KeyAgreement::J2CPP_METHOD_NAME(2),
		javax::crypto::KeyAgreement::J2CPP_METHOD_SIGNATURE(2), 
		local_ref< java::security::Provider >
	>(get_jobject());
}

local_ref< javax::crypto::KeyAgreement > javax::crypto::KeyAgreement::getInstance(local_ref< java::lang::String > const &a0)
{
	return call_static_method<
		javax::crypto::KeyAgreement::J2CPP_CLASS_NAME,
		javax::crypto::KeyAgreement::J2CPP_METHOD_NAME(3),
		javax::crypto::KeyAgreement::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< javax::crypto::KeyAgreement >
	>(a0);
}

local_ref< javax::crypto::KeyAgreement > javax::crypto::KeyAgreement::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::lang::String > const &a1)
{
	return call_static_method<
		javax::crypto::KeyAgreement::J2CPP_CLASS_NAME,
		javax::crypto::KeyAgreement::J2CPP_METHOD_NAME(4),
		javax::crypto::KeyAgreement::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< javax::crypto::KeyAgreement >
	>(a0, a1);
}

local_ref< javax::crypto::KeyAgreement > javax::crypto::KeyAgreement::getInstance(local_ref< java::lang::String > const &a0, local_ref< java::security::Provider > const &a1)
{
	return call_static_method<
		javax::crypto::KeyAgreement::J2CPP_CLASS_NAME,
		javax::crypto::KeyAgreement::J2CPP_METHOD_NAME(5),
		javax::crypto::KeyAgreement::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< javax::crypto::KeyAgreement >
	>(a0, a1);
}

void javax::crypto::KeyAgreement::init(local_ref< java::security::Key > const &a0)
{
	return call_method<
		javax::crypto::KeyAgreement::J2CPP_CLASS_NAME,
		javax::crypto::KeyAgreement::J2CPP_METHOD_NAME(6),
		javax::crypto::KeyAgreement::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject(), a0);
}

void javax::crypto::KeyAgreement::init(local_ref< java::security::Key > const &a0, local_ref< java::security::SecureRandom > const &a1)
{
	return call_method<
		javax::crypto::KeyAgreement::J2CPP_CLASS_NAME,
		javax::crypto::KeyAgreement::J2CPP_METHOD_NAME(7),
		javax::crypto::KeyAgreement::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0, a1);
}

void javax::crypto::KeyAgreement::init(local_ref< java::security::Key > const &a0, local_ref< java::security::spec::AlgorithmParameterSpec > const &a1)
{
	return call_method<
		javax::crypto::KeyAgreement::J2CPP_CLASS_NAME,
		javax::crypto::KeyAgreement::J2CPP_METHOD_NAME(8),
		javax::crypto::KeyAgreement::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0, a1);
}

void javax::crypto::KeyAgreement::init(local_ref< java::security::Key > const &a0, local_ref< java::security::spec::AlgorithmParameterSpec > const &a1, local_ref< java::security::SecureRandom > const &a2)
{
	return call_method<
		javax::crypto::KeyAgreement::J2CPP_CLASS_NAME,
		javax::crypto::KeyAgreement::J2CPP_METHOD_NAME(9),
		javax::crypto::KeyAgreement::J2CPP_METHOD_SIGNATURE(9), 
		void
	>(get_jobject(), a0, a1, a2);
}

local_ref< java::security::Key > javax::crypto::KeyAgreement::doPhase(local_ref< java::security::Key > const &a0, jboolean a1)
{
	return call_method<
		javax::crypto::KeyAgreement::J2CPP_CLASS_NAME,
		javax::crypto::KeyAgreement::J2CPP_METHOD_NAME(10),
		javax::crypto::KeyAgreement::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< java::security::Key >
	>(get_jobject(), a0, a1);
}

local_ref< array<jbyte,1> > javax::crypto::KeyAgreement::generateSecret()
{
	return call_method<
		javax::crypto::KeyAgreement::J2CPP_CLASS_NAME,
		javax::crypto::KeyAgreement::J2CPP_METHOD_NAME(11),
		javax::crypto::KeyAgreement::J2CPP_METHOD_SIGNATURE(11), 
		local_ref< array<jbyte,1> >
	>(get_jobject());
}

jint javax::crypto::KeyAgreement::generateSecret(local_ref< array<jbyte,1> > const &a0, jint a1)
{
	return call_method<
		javax::crypto::KeyAgreement::J2CPP_CLASS_NAME,
		javax::crypto::KeyAgreement::J2CPP_METHOD_NAME(12),
		javax::crypto::KeyAgreement::J2CPP_METHOD_SIGNATURE(12), 
		jint
	>(get_jobject(), a0, a1);
}

local_ref< javax::crypto::SecretKey > javax::crypto::KeyAgreement::generateSecret(local_ref< java::lang::String > const &a0)
{
	return call_method<
		javax::crypto::KeyAgreement::J2CPP_CLASS_NAME,
		javax::crypto::KeyAgreement::J2CPP_METHOD_NAME(13),
		javax::crypto::KeyAgreement::J2CPP_METHOD_SIGNATURE(13), 
		local_ref< javax::crypto::SecretKey >
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(javax::crypto::KeyAgreement,"javax/crypto/KeyAgreement")
J2CPP_DEFINE_METHOD(javax::crypto::KeyAgreement,0,"<init>","(Ljavax/crypto/KeyAgreementSpi;Ljava/security/Provider;Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(javax::crypto::KeyAgreement,1,"getAlgorithm","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(javax::crypto::KeyAgreement,2,"getProvider","()Ljava/security/Provider;")
J2CPP_DEFINE_METHOD(javax::crypto::KeyAgreement,3,"getInstance","(Ljava/lang/String;)Ljavax/crypto/KeyAgreement;")
J2CPP_DEFINE_METHOD(javax::crypto::KeyAgreement,4,"getInstance","(Ljava/lang/String;Ljava/lang/String;)Ljavax/crypto/KeyAgreement;")
J2CPP_DEFINE_METHOD(javax::crypto::KeyAgreement,5,"getInstance","(Ljava/lang/String;Ljava/security/Provider;)Ljavax/crypto/KeyAgreement;")
J2CPP_DEFINE_METHOD(javax::crypto::KeyAgreement,6,"init","(Ljava/security/Key;)V")
J2CPP_DEFINE_METHOD(javax::crypto::KeyAgreement,7,"init","(Ljava/security/Key;Ljava/security/SecureRandom;)V")
J2CPP_DEFINE_METHOD(javax::crypto::KeyAgreement,8,"init","(Ljava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V")
J2CPP_DEFINE_METHOD(javax::crypto::KeyAgreement,9,"init","(Ljava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)V")
J2CPP_DEFINE_METHOD(javax::crypto::KeyAgreement,10,"doPhase","(Ljava/security/Key;Z)Ljava/security/Key;")
J2CPP_DEFINE_METHOD(javax::crypto::KeyAgreement,11,"generateSecret","()[B")
J2CPP_DEFINE_METHOD(javax::crypto::KeyAgreement,12,"generateSecret","([BI)I")
J2CPP_DEFINE_METHOD(javax::crypto::KeyAgreement,13,"generateSecret","(Ljava/lang/String;)Ljavax/crypto/SecretKey;")

} //namespace j2cpp

#endif //J2CPP_JAVAX_CRYPTO_KEYAGREEMENT_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

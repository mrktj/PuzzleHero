/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: javax.security.auth.callback.PasswordCallback
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_SECURITY_AUTH_CALLBACK_PASSWORDCALLBACK_HPP_DECL
#define J2CPP_JAVAX_SECURITY_AUTH_CALLBACK_PASSWORDCALLBACK_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace javax { namespace security { namespace auth { namespace callback { class Callback; } } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace io { class Serializable; } } }


#include <java/io/Serializable.hpp>
#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <javax/security/auth/callback/Callback.hpp>


namespace j2cpp {

namespace javax { namespace security { namespace auth { namespace callback {

	class PasswordCallback;
	class PasswordCallback
		: public object<PasswordCallback>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)

		explicit PasswordCallback(jobject jobj)
		: object<PasswordCallback>(jobj)
		{
		}

		operator local_ref<javax::security::auth::callback::Callback>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::io::Serializable>() const;


		PasswordCallback(local_ref< java::lang::String > const&, jboolean);
		local_ref< java::lang::String > getPrompt();
		jboolean isEchoOn();
		void setPassword(local_ref< array<jchar,1> >  const&);
		local_ref< array<jchar,1> > getPassword();
		void clearPassword();
	}; //class PasswordCallback

} //namespace callback
} //namespace auth
} //namespace security
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_SECURITY_AUTH_CALLBACK_PASSWORDCALLBACK_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_SECURITY_AUTH_CALLBACK_PASSWORDCALLBACK_HPP_IMPL
#define J2CPP_JAVAX_SECURITY_AUTH_CALLBACK_PASSWORDCALLBACK_HPP_IMPL

namespace j2cpp {



javax::security::auth::callback::PasswordCallback::operator local_ref<javax::security::auth::callback::Callback>() const
{
	return local_ref<javax::security::auth::callback::Callback>(get_jobject());
}

javax::security::auth::callback::PasswordCallback::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

javax::security::auth::callback::PasswordCallback::operator local_ref<java::io::Serializable>() const
{
	return local_ref<java::io::Serializable>(get_jobject());
}


javax::security::auth::callback::PasswordCallback::PasswordCallback(local_ref< java::lang::String > const &a0, jboolean a1)
: object<javax::security::auth::callback::PasswordCallback>(
	call_new_object<
		javax::security::auth::callback::PasswordCallback::J2CPP_CLASS_NAME,
		javax::security::auth::callback::PasswordCallback::J2CPP_METHOD_NAME(0),
		javax::security::auth::callback::PasswordCallback::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1)
)
{
}


local_ref< java::lang::String > javax::security::auth::callback::PasswordCallback::getPrompt()
{
	return call_method<
		javax::security::auth::callback::PasswordCallback::J2CPP_CLASS_NAME,
		javax::security::auth::callback::PasswordCallback::J2CPP_METHOD_NAME(1),
		javax::security::auth::callback::PasswordCallback::J2CPP_METHOD_SIGNATURE(1), 
		local_ref< java::lang::String >
	>(get_jobject());
}

jboolean javax::security::auth::callback::PasswordCallback::isEchoOn()
{
	return call_method<
		javax::security::auth::callback::PasswordCallback::J2CPP_CLASS_NAME,
		javax::security::auth::callback::PasswordCallback::J2CPP_METHOD_NAME(2),
		javax::security::auth::callback::PasswordCallback::J2CPP_METHOD_SIGNATURE(2), 
		jboolean
	>(get_jobject());
}

void javax::security::auth::callback::PasswordCallback::setPassword(local_ref< array<jchar,1> > const &a0)
{
	return call_method<
		javax::security::auth::callback::PasswordCallback::J2CPP_CLASS_NAME,
		javax::security::auth::callback::PasswordCallback::J2CPP_METHOD_NAME(3),
		javax::security::auth::callback::PasswordCallback::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0);
}

local_ref< array<jchar,1> > javax::security::auth::callback::PasswordCallback::getPassword()
{
	return call_method<
		javax::security::auth::callback::PasswordCallback::J2CPP_CLASS_NAME,
		javax::security::auth::callback::PasswordCallback::J2CPP_METHOD_NAME(4),
		javax::security::auth::callback::PasswordCallback::J2CPP_METHOD_SIGNATURE(4), 
		local_ref< array<jchar,1> >
	>(get_jobject());
}

void javax::security::auth::callback::PasswordCallback::clearPassword()
{
	return call_method<
		javax::security::auth::callback::PasswordCallback::J2CPP_CLASS_NAME,
		javax::security::auth::callback::PasswordCallback::J2CPP_METHOD_NAME(5),
		javax::security::auth::callback::PasswordCallback::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(javax::security::auth::callback::PasswordCallback,"javax/security/auth/callback/PasswordCallback")
J2CPP_DEFINE_METHOD(javax::security::auth::callback::PasswordCallback,0,"<init>","(Ljava/lang/String;Z)V")
J2CPP_DEFINE_METHOD(javax::security::auth::callback::PasswordCallback,1,"getPrompt","()Ljava/lang/String;")
J2CPP_DEFINE_METHOD(javax::security::auth::callback::PasswordCallback,2,"isEchoOn","()Z")
J2CPP_DEFINE_METHOD(javax::security::auth::callback::PasswordCallback,3,"setPassword","([C)V")
J2CPP_DEFINE_METHOD(javax::security::auth::callback::PasswordCallback,4,"getPassword","()[C")
J2CPP_DEFINE_METHOD(javax::security::auth::callback::PasswordCallback,5,"clearPassword","()V")

} //namespace j2cpp

#endif //J2CPP_JAVAX_SECURITY_AUTH_CALLBACK_PASSWORDCALLBACK_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

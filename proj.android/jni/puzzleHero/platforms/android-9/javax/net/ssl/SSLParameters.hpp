/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: javax.net.ssl.SSLParameters
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_NET_SSL_SSLPARAMETERS_HPP_DECL
#define J2CPP_JAVAX_NET_SSL_SSLPARAMETERS_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>


namespace j2cpp {

namespace javax { namespace net { namespace ssl {

	class SSLParameters;
	class SSLParameters
		: public object<SSLParameters>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)

		explicit SSLParameters(jobject jobj)
		: object<SSLParameters>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		SSLParameters();
		SSLParameters(local_ref< array< local_ref< java::lang::String >, 1> > const&);
		SSLParameters(local_ref< array< local_ref< java::lang::String >, 1> > const&, local_ref< array< local_ref< java::lang::String >, 1> > const&);
		local_ref< array< local_ref< java::lang::String >, 1> > getCipherSuites();
		void setCipherSuites(local_ref< array< local_ref< java::lang::String >, 1> >  const&);
		local_ref< array< local_ref< java::lang::String >, 1> > getProtocols();
		void setProtocols(local_ref< array< local_ref< java::lang::String >, 1> >  const&);
		jboolean getNeedClientAuth();
		void setNeedClientAuth(jboolean);
		jboolean getWantClientAuth();
		void setWantClientAuth(jboolean);
	}; //class SSLParameters

} //namespace ssl
} //namespace net
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_NET_SSL_SSLPARAMETERS_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_NET_SSL_SSLPARAMETERS_HPP_IMPL
#define J2CPP_JAVAX_NET_SSL_SSLPARAMETERS_HPP_IMPL

namespace j2cpp {



javax::net::ssl::SSLParameters::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


javax::net::ssl::SSLParameters::SSLParameters()
: object<javax::net::ssl::SSLParameters>(
	call_new_object<
		javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME,
		javax::net::ssl::SSLParameters::J2CPP_METHOD_NAME(0),
		javax::net::ssl::SSLParameters::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}



javax::net::ssl::SSLParameters::SSLParameters(local_ref< array< local_ref< java::lang::String >, 1> > const &a0)
: object<javax::net::ssl::SSLParameters>(
	call_new_object<
		javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME,
		javax::net::ssl::SSLParameters::J2CPP_METHOD_NAME(1),
		javax::net::ssl::SSLParameters::J2CPP_METHOD_SIGNATURE(1)
	>(a0)
)
{
}



javax::net::ssl::SSLParameters::SSLParameters(local_ref< array< local_ref< java::lang::String >, 1> > const &a0, local_ref< array< local_ref< java::lang::String >, 1> > const &a1)
: object<javax::net::ssl::SSLParameters>(
	call_new_object<
		javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME,
		javax::net::ssl::SSLParameters::J2CPP_METHOD_NAME(2),
		javax::net::ssl::SSLParameters::J2CPP_METHOD_SIGNATURE(2)
	>(a0, a1)
)
{
}


local_ref< array< local_ref< java::lang::String >, 1> > javax::net::ssl::SSLParameters::getCipherSuites()
{
	return call_method<
		javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME,
		javax::net::ssl::SSLParameters::J2CPP_METHOD_NAME(3),
		javax::net::ssl::SSLParameters::J2CPP_METHOD_SIGNATURE(3), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(get_jobject());
}

void javax::net::ssl::SSLParameters::setCipherSuites(local_ref< array< local_ref< java::lang::String >, 1> > const &a0)
{
	return call_method<
		javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME,
		javax::net::ssl::SSLParameters::J2CPP_METHOD_NAME(4),
		javax::net::ssl::SSLParameters::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}

local_ref< array< local_ref< java::lang::String >, 1> > javax::net::ssl::SSLParameters::getProtocols()
{
	return call_method<
		javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME,
		javax::net::ssl::SSLParameters::J2CPP_METHOD_NAME(5),
		javax::net::ssl::SSLParameters::J2CPP_METHOD_SIGNATURE(5), 
		local_ref< array< local_ref< java::lang::String >, 1> >
	>(get_jobject());
}

void javax::net::ssl::SSLParameters::setProtocols(local_ref< array< local_ref< java::lang::String >, 1> > const &a0)
{
	return call_method<
		javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME,
		javax::net::ssl::SSLParameters::J2CPP_METHOD_NAME(6),
		javax::net::ssl::SSLParameters::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject(), a0);
}

jboolean javax::net::ssl::SSLParameters::getNeedClientAuth()
{
	return call_method<
		javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME,
		javax::net::ssl::SSLParameters::J2CPP_METHOD_NAME(7),
		javax::net::ssl::SSLParameters::J2CPP_METHOD_SIGNATURE(7), 
		jboolean
	>(get_jobject());
}

void javax::net::ssl::SSLParameters::setNeedClientAuth(jboolean a0)
{
	return call_method<
		javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME,
		javax::net::ssl::SSLParameters::J2CPP_METHOD_NAME(8),
		javax::net::ssl::SSLParameters::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0);
}

jboolean javax::net::ssl::SSLParameters::getWantClientAuth()
{
	return call_method<
		javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME,
		javax::net::ssl::SSLParameters::J2CPP_METHOD_NAME(9),
		javax::net::ssl::SSLParameters::J2CPP_METHOD_SIGNATURE(9), 
		jboolean
	>(get_jobject());
}

void javax::net::ssl::SSLParameters::setWantClientAuth(jboolean a0)
{
	return call_method<
		javax::net::ssl::SSLParameters::J2CPP_CLASS_NAME,
		javax::net::ssl::SSLParameters::J2CPP_METHOD_NAME(10),
		javax::net::ssl::SSLParameters::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(javax::net::ssl::SSLParameters,"javax/net/ssl/SSLParameters")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,0,"<init>","()V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,1,"<init>","([java.lang.String)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,2,"<init>","([java.lang.String[java.lang.String)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,3,"getCipherSuites","()[java.lang.String")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,4,"setCipherSuites","([java.lang.String)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,5,"getProtocols","()[java.lang.String")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,6,"setProtocols","([java.lang.String)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,7,"getNeedClientAuth","()Z")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,8,"setNeedClientAuth","(Z)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,9,"getWantClientAuth","()Z")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLParameters,10,"setWantClientAuth","(Z)V")

} //namespace j2cpp

#endif //J2CPP_JAVAX_NET_SSL_SSLPARAMETERS_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

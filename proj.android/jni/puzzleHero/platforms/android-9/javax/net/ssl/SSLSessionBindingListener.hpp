/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: javax.net.ssl.SSLSessionBindingListener
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_NET_SSL_SSLSESSIONBINDINGLISTENER_HPP_DECL
#define J2CPP_JAVAX_NET_SSL_SSLSESSIONBINDINGLISTENER_HPP_DECL


namespace j2cpp { namespace javax { namespace net { namespace ssl { class SSLSessionBindingEvent; } } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class EventListener; } } }


#include <java/lang/Object.hpp>
#include <java/util/EventListener.hpp>
#include <javax/net/ssl/SSLSessionBindingEvent.hpp>


namespace j2cpp {

namespace javax { namespace net { namespace ssl {

	class SSLSessionBindingListener;
	class SSLSessionBindingListener
		: public object<SSLSessionBindingListener>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)

		explicit SSLSessionBindingListener(jobject jobj)
		: object<SSLSessionBindingListener>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<java::util::EventListener>() const;


		void valueBound(local_ref< javax::net::ssl::SSLSessionBindingEvent >  const&);
		void valueUnbound(local_ref< javax::net::ssl::SSLSessionBindingEvent >  const&);
	}; //class SSLSessionBindingListener

} //namespace ssl
} //namespace net
} //namespace javax

} //namespace j2cpp

#endif //J2CPP_JAVAX_NET_SSL_SSLSESSIONBINDINGLISTENER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_JAVAX_NET_SSL_SSLSESSIONBINDINGLISTENER_HPP_IMPL
#define J2CPP_JAVAX_NET_SSL_SSLSESSIONBINDINGLISTENER_HPP_IMPL

namespace j2cpp {



javax::net::ssl::SSLSessionBindingListener::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

javax::net::ssl::SSLSessionBindingListener::operator local_ref<java::util::EventListener>() const
{
	return local_ref<java::util::EventListener>(get_jobject());
}

void javax::net::ssl::SSLSessionBindingListener::valueBound(local_ref< javax::net::ssl::SSLSessionBindingEvent > const &a0)
{
	return call_method<
		javax::net::ssl::SSLSessionBindingListener::J2CPP_CLASS_NAME,
		javax::net::ssl::SSLSessionBindingListener::J2CPP_METHOD_NAME(0),
		javax::net::ssl::SSLSessionBindingListener::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0);
}

void javax::net::ssl::SSLSessionBindingListener::valueUnbound(local_ref< javax::net::ssl::SSLSessionBindingEvent > const &a0)
{
	return call_method<
		javax::net::ssl::SSLSessionBindingListener::J2CPP_CLASS_NAME,
		javax::net::ssl::SSLSessionBindingListener::J2CPP_METHOD_NAME(1),
		javax::net::ssl::SSLSessionBindingListener::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(javax::net::ssl::SSLSessionBindingListener,"javax/net/ssl/SSLSessionBindingListener")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLSessionBindingListener,0,"valueBound","(Ljavax/net/ssl/SSLSessionBindingEvent;)V")
J2CPP_DEFINE_METHOD(javax::net::ssl::SSLSessionBindingListener,1,"valueUnbound","(Ljavax/net/ssl/SSLSessionBindingEvent;)V")

} //namespace j2cpp

#endif //J2CPP_JAVAX_NET_SSL_SSLSESSIONBINDINGLISTENER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

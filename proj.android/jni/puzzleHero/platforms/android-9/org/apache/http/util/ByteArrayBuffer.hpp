/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: org.apache.http.util.ByteArrayBuffer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_UTIL_BYTEARRAYBUFFER_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_UTIL_BYTEARRAYBUFFER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace util { class CharArrayBuffer; } } } } }


#include <java/lang/Object.hpp>
#include <org/apache/http/util/CharArrayBuffer.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace util {

	class ByteArrayBuffer;
	class ByteArrayBuffer
		: public object<ByteArrayBuffer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)

		explicit ByteArrayBuffer(jobject jobj)
		: object<ByteArrayBuffer>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		ByteArrayBuffer(jint);
		void append(local_ref< array<jbyte,1> >  const&, jint, jint);
		void append(jint);
		void append(local_ref< array<jchar,1> >  const&, jint, jint);
		void append(local_ref< org::apache::http::util::CharArrayBuffer >  const&, jint, jint);
		void clear();
		local_ref< array<jbyte,1> > toByteArray();
		jint byteAt(jint);
		jint capacity();
		jint length();
		local_ref< array<jbyte,1> > buffer();
		void setLength(jint);
		jboolean isEmpty();
		jboolean isFull();
	}; //class ByteArrayBuffer

} //namespace util
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_UTIL_BYTEARRAYBUFFER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_UTIL_BYTEARRAYBUFFER_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_UTIL_BYTEARRAYBUFFER_HPP_IMPL

namespace j2cpp {



org::apache::http::util::ByteArrayBuffer::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


org::apache::http::util::ByteArrayBuffer::ByteArrayBuffer(jint a0)
: object<org::apache::http::util::ByteArrayBuffer>(
	call_new_object<
		org::apache::http::util::ByteArrayBuffer::J2CPP_CLASS_NAME,
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_NAME(0),
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}


void org::apache::http::util::ByteArrayBuffer::append(local_ref< array<jbyte,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		org::apache::http::util::ByteArrayBuffer::J2CPP_CLASS_NAME,
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_NAME(1),
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0, a1, a2);
}

void org::apache::http::util::ByteArrayBuffer::append(jint a0)
{
	return call_method<
		org::apache::http::util::ByteArrayBuffer::J2CPP_CLASS_NAME,
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_NAME(2),
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::util::ByteArrayBuffer::append(local_ref< array<jchar,1> > const &a0, jint a1, jint a2)
{
	return call_method<
		org::apache::http::util::ByteArrayBuffer::J2CPP_CLASS_NAME,
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_NAME(3),
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0, a1, a2);
}

void org::apache::http::util::ByteArrayBuffer::append(local_ref< org::apache::http::util::CharArrayBuffer > const &a0, jint a1, jint a2)
{
	return call_method<
		org::apache::http::util::ByteArrayBuffer::J2CPP_CLASS_NAME,
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_NAME(4),
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0, a1, a2);
}

void org::apache::http::util::ByteArrayBuffer::clear()
{
	return call_method<
		org::apache::http::util::ByteArrayBuffer::J2CPP_CLASS_NAME,
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_NAME(5),
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject());
}

local_ref< array<jbyte,1> > org::apache::http::util::ByteArrayBuffer::toByteArray()
{
	return call_method<
		org::apache::http::util::ByteArrayBuffer::J2CPP_CLASS_NAME,
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_NAME(6),
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< array<jbyte,1> >
	>(get_jobject());
}

jint org::apache::http::util::ByteArrayBuffer::byteAt(jint a0)
{
	return call_method<
		org::apache::http::util::ByteArrayBuffer::J2CPP_CLASS_NAME,
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_NAME(7),
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_SIGNATURE(7), 
		jint
	>(get_jobject(), a0);
}

jint org::apache::http::util::ByteArrayBuffer::capacity()
{
	return call_method<
		org::apache::http::util::ByteArrayBuffer::J2CPP_CLASS_NAME,
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_NAME(8),
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}

jint org::apache::http::util::ByteArrayBuffer::length()
{
	return call_method<
		org::apache::http::util::ByteArrayBuffer::J2CPP_CLASS_NAME,
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_NAME(9),
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_SIGNATURE(9), 
		jint
	>(get_jobject());
}

local_ref< array<jbyte,1> > org::apache::http::util::ByteArrayBuffer::buffer()
{
	return call_method<
		org::apache::http::util::ByteArrayBuffer::J2CPP_CLASS_NAME,
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_NAME(10),
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_SIGNATURE(10), 
		local_ref< array<jbyte,1> >
	>(get_jobject());
}

void org::apache::http::util::ByteArrayBuffer::setLength(jint a0)
{
	return call_method<
		org::apache::http::util::ByteArrayBuffer::J2CPP_CLASS_NAME,
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_NAME(11),
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject(), a0);
}

jboolean org::apache::http::util::ByteArrayBuffer::isEmpty()
{
	return call_method<
		org::apache::http::util::ByteArrayBuffer::J2CPP_CLASS_NAME,
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_NAME(12),
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_SIGNATURE(12), 
		jboolean
	>(get_jobject());
}

jboolean org::apache::http::util::ByteArrayBuffer::isFull()
{
	return call_method<
		org::apache::http::util::ByteArrayBuffer::J2CPP_CLASS_NAME,
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_NAME(13),
		org::apache::http::util::ByteArrayBuffer::J2CPP_METHOD_SIGNATURE(13), 
		jboolean
	>(get_jobject());
}


J2CPP_DEFINE_CLASS(org::apache::http::util::ByteArrayBuffer,"org/apache/http/util/ByteArrayBuffer")
J2CPP_DEFINE_METHOD(org::apache::http::util::ByteArrayBuffer,0,"<init>","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::ByteArrayBuffer,1,"append","([BII)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::ByteArrayBuffer,2,"append","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::ByteArrayBuffer,3,"append","([CII)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::ByteArrayBuffer,4,"append","(Lorg/apache/http/util/CharArrayBuffer;II)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::ByteArrayBuffer,5,"clear","()V")
J2CPP_DEFINE_METHOD(org::apache::http::util::ByteArrayBuffer,6,"toByteArray","()[B")
J2CPP_DEFINE_METHOD(org::apache::http::util::ByteArrayBuffer,7,"byteAt","(I)I")
J2CPP_DEFINE_METHOD(org::apache::http::util::ByteArrayBuffer,8,"capacity","()I")
J2CPP_DEFINE_METHOD(org::apache::http::util::ByteArrayBuffer,9,"length","()I")
J2CPP_DEFINE_METHOD(org::apache::http::util::ByteArrayBuffer,10,"buffer","()[B")
J2CPP_DEFINE_METHOD(org::apache::http::util::ByteArrayBuffer,11,"setLength","(I)V")
J2CPP_DEFINE_METHOD(org::apache::http::util::ByteArrayBuffer,12,"isEmpty","()Z")
J2CPP_DEFINE_METHOD(org::apache::http::util::ByteArrayBuffer,13,"isFull","()Z")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_UTIL_BYTEARRAYBUFFER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

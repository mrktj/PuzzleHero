/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: org.apache.http.protocol.HttpService
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_PROTOCOL_HTTPSERVICE_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_PROTOCOL_HTTPSERVICE_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class ConnectionReuseStrategy; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace params { class HttpParams; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpServerConnection; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace protocol { class HttpProcessor; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace protocol { class HttpContext; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace protocol { class HttpRequestHandlerResolver; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace protocol { class HttpExpectationVerifier; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpResponseFactory; } } } }


#include <java/lang/Object.hpp>
#include <org/apache/http/ConnectionReuseStrategy.hpp>
#include <org/apache/http/HttpResponseFactory.hpp>
#include <org/apache/http/HttpServerConnection.hpp>
#include <org/apache/http/params/HttpParams.hpp>
#include <org/apache/http/protocol/HttpContext.hpp>
#include <org/apache/http/protocol/HttpExpectationVerifier.hpp>
#include <org/apache/http/protocol/HttpProcessor.hpp>
#include <org/apache/http/protocol/HttpRequestHandlerResolver.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace protocol {

	class HttpService;
	class HttpService
		: public object<HttpService>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)

		explicit HttpService(jobject jobj)
		: object<HttpService>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;


		HttpService(local_ref< org::apache::http::protocol::HttpProcessor > const&, local_ref< org::apache::http::ConnectionReuseStrategy > const&, local_ref< org::apache::http::HttpResponseFactory > const&);
		void setHttpProcessor(local_ref< org::apache::http::protocol::HttpProcessor >  const&);
		void setConnReuseStrategy(local_ref< org::apache::http::ConnectionReuseStrategy >  const&);
		void setResponseFactory(local_ref< org::apache::http::HttpResponseFactory >  const&);
		void setHandlerResolver(local_ref< org::apache::http::protocol::HttpRequestHandlerResolver >  const&);
		void setExpectationVerifier(local_ref< org::apache::http::protocol::HttpExpectationVerifier >  const&);
		local_ref< org::apache::http::params::HttpParams > getParams();
		void setParams(local_ref< org::apache::http::params::HttpParams >  const&);
		void handleRequest(local_ref< org::apache::http::HttpServerConnection >  const&, local_ref< org::apache::http::protocol::HttpContext >  const&);
	}; //class HttpService

} //namespace protocol
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_PROTOCOL_HTTPSERVICE_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_PROTOCOL_HTTPSERVICE_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_PROTOCOL_HTTPSERVICE_HPP_IMPL

namespace j2cpp {



org::apache::http::protocol::HttpService::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


org::apache::http::protocol::HttpService::HttpService(local_ref< org::apache::http::protocol::HttpProcessor > const &a0, local_ref< org::apache::http::ConnectionReuseStrategy > const &a1, local_ref< org::apache::http::HttpResponseFactory > const &a2)
: object<org::apache::http::protocol::HttpService>(
	call_new_object<
		org::apache::http::protocol::HttpService::J2CPP_CLASS_NAME,
		org::apache::http::protocol::HttpService::J2CPP_METHOD_NAME(0),
		org::apache::http::protocol::HttpService::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1, a2)
)
{
}


void org::apache::http::protocol::HttpService::setHttpProcessor(local_ref< org::apache::http::protocol::HttpProcessor > const &a0)
{
	return call_method<
		org::apache::http::protocol::HttpService::J2CPP_CLASS_NAME,
		org::apache::http::protocol::HttpService::J2CPP_METHOD_NAME(1),
		org::apache::http::protocol::HttpService::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::protocol::HttpService::setConnReuseStrategy(local_ref< org::apache::http::ConnectionReuseStrategy > const &a0)
{
	return call_method<
		org::apache::http::protocol::HttpService::J2CPP_CLASS_NAME,
		org::apache::http::protocol::HttpService::J2CPP_METHOD_NAME(2),
		org::apache::http::protocol::HttpService::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::protocol::HttpService::setResponseFactory(local_ref< org::apache::http::HttpResponseFactory > const &a0)
{
	return call_method<
		org::apache::http::protocol::HttpService::J2CPP_CLASS_NAME,
		org::apache::http::protocol::HttpService::J2CPP_METHOD_NAME(3),
		org::apache::http::protocol::HttpService::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::protocol::HttpService::setHandlerResolver(local_ref< org::apache::http::protocol::HttpRequestHandlerResolver > const &a0)
{
	return call_method<
		org::apache::http::protocol::HttpService::J2CPP_CLASS_NAME,
		org::apache::http::protocol::HttpService::J2CPP_METHOD_NAME(4),
		org::apache::http::protocol::HttpService::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::protocol::HttpService::setExpectationVerifier(local_ref< org::apache::http::protocol::HttpExpectationVerifier > const &a0)
{
	return call_method<
		org::apache::http::protocol::HttpService::J2CPP_CLASS_NAME,
		org::apache::http::protocol::HttpService::J2CPP_METHOD_NAME(5),
		org::apache::http::protocol::HttpService::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject(), a0);
}

local_ref< org::apache::http::params::HttpParams > org::apache::http::protocol::HttpService::getParams()
{
	return call_method<
		org::apache::http::protocol::HttpService::J2CPP_CLASS_NAME,
		org::apache::http::protocol::HttpService::J2CPP_METHOD_NAME(6),
		org::apache::http::protocol::HttpService::J2CPP_METHOD_SIGNATURE(6), 
		local_ref< org::apache::http::params::HttpParams >
	>(get_jobject());
}

void org::apache::http::protocol::HttpService::setParams(local_ref< org::apache::http::params::HttpParams > const &a0)
{
	return call_method<
		org::apache::http::protocol::HttpService::J2CPP_CLASS_NAME,
		org::apache::http::protocol::HttpService::J2CPP_METHOD_NAME(7),
		org::apache::http::protocol::HttpService::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::protocol::HttpService::handleRequest(local_ref< org::apache::http::HttpServerConnection > const &a0, local_ref< org::apache::http::protocol::HttpContext > const &a1)
{
	return call_method<
		org::apache::http::protocol::HttpService::J2CPP_CLASS_NAME,
		org::apache::http::protocol::HttpService::J2CPP_METHOD_NAME(8),
		org::apache::http::protocol::HttpService::J2CPP_METHOD_SIGNATURE(8), 
		void
	>(get_jobject(), a0, a1);
}




J2CPP_DEFINE_CLASS(org::apache::http::protocol::HttpService,"org/apache/http/protocol/HttpService")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::HttpService,0,"<init>","(Lorg/apache/http/protocol/HttpProcessor;Lorg/apache/http/ConnectionReuseStrategy;Lorg/apache/http/HttpResponseFactory;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::HttpService,1,"setHttpProcessor","(Lorg/apache/http/protocol/HttpProcessor;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::HttpService,2,"setConnReuseStrategy","(Lorg/apache/http/ConnectionReuseStrategy;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::HttpService,3,"setResponseFactory","(Lorg/apache/http/HttpResponseFactory;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::HttpService,4,"setHandlerResolver","(Lorg/apache/http/protocol/HttpRequestHandlerResolver;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::HttpService,5,"setExpectationVerifier","(Lorg/apache/http/protocol/HttpExpectationVerifier;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::HttpService,6,"getParams","()Lorg/apache/http/params/HttpParams;")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::HttpService,7,"setParams","(Lorg/apache/http/params/HttpParams;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::HttpService,8,"handleRequest","(Lorg/apache/http/HttpServerConnection;Lorg/apache/http/protocol/HttpContext;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::HttpService,9,"handleException","(Lorg/apache/http/HttpException;Lorg/apache/http/HttpResponse;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::HttpService,10,"doService","(Lorg/apache/http/HttpRequest;Lorg/apache/http/HttpResponse;Lorg/apache/http/protocol/HttpContext;)V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_PROTOCOL_HTTPSERVICE_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

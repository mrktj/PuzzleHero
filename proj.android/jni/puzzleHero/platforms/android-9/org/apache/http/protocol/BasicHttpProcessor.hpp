/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: org.apache.http.protocol.BasicHttpProcessor
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Class; } } }
namespace j2cpp { namespace java { namespace lang { class Cloneable; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace util { class List; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpResponse; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpRequest; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpRequestInterceptor; } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace protocol { class HttpProcessor; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace protocol { class HttpContext; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace protocol { class HttpRequestInterceptorList; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace protocol { class HttpResponseInterceptorList; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { class HttpResponseInterceptor; } } } }


#include <java/lang/Class.hpp>
#include <java/lang/Cloneable.hpp>
#include <java/lang/Object.hpp>
#include <java/util/List.hpp>
#include <org/apache/http/HttpRequest.hpp>
#include <org/apache/http/HttpRequestInterceptor.hpp>
#include <org/apache/http/HttpResponse.hpp>
#include <org/apache/http/HttpResponseInterceptor.hpp>
#include <org/apache/http/protocol/HttpContext.hpp>
#include <org/apache/http/protocol/HttpProcessor.hpp>
#include <org/apache/http/protocol/HttpRequestInterceptorList.hpp>
#include <org/apache/http/protocol/HttpResponseInterceptorList.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace protocol {

	class BasicHttpProcessor;
	class BasicHttpProcessor
		: public object<BasicHttpProcessor>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_METHOD(7)
		J2CPP_DECLARE_METHOD(8)
		J2CPP_DECLARE_METHOD(9)
		J2CPP_DECLARE_METHOD(10)
		J2CPP_DECLARE_METHOD(11)
		J2CPP_DECLARE_METHOD(12)
		J2CPP_DECLARE_METHOD(13)
		J2CPP_DECLARE_METHOD(14)
		J2CPP_DECLARE_METHOD(15)
		J2CPP_DECLARE_METHOD(16)
		J2CPP_DECLARE_METHOD(17)
		J2CPP_DECLARE_METHOD(18)
		J2CPP_DECLARE_METHOD(19)
		J2CPP_DECLARE_METHOD(20)
		J2CPP_DECLARE_METHOD(21)
		J2CPP_DECLARE_METHOD(22)
		J2CPP_DECLARE_METHOD(23)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)

		explicit BasicHttpProcessor(jobject jobj)
		: object<BasicHttpProcessor>(jobj)
		{
		}

		operator local_ref<java::lang::Cloneable>() const;
		operator local_ref<java::lang::Object>() const;
		operator local_ref<org::apache::http::HttpRequestInterceptor>() const;
		operator local_ref<org::apache::http::protocol::HttpProcessor>() const;
		operator local_ref<org::apache::http::protocol::HttpRequestInterceptorList>() const;
		operator local_ref<org::apache::http::protocol::HttpResponseInterceptorList>() const;
		operator local_ref<org::apache::http::HttpResponseInterceptor>() const;


		BasicHttpProcessor();
		void addRequestInterceptor(local_ref< org::apache::http::HttpRequestInterceptor >  const&);
		void addRequestInterceptor(local_ref< org::apache::http::HttpRequestInterceptor >  const&, jint);
		void addResponseInterceptor(local_ref< org::apache::http::HttpResponseInterceptor >  const&, jint);
		void removeRequestInterceptorByClass(local_ref< java::lang::Class >  const&);
		void removeResponseInterceptorByClass(local_ref< java::lang::Class >  const&);
		void addInterceptor(local_ref< org::apache::http::HttpRequestInterceptor >  const&);
		void addInterceptor(local_ref< org::apache::http::HttpRequestInterceptor >  const&, jint);
		jint getRequestInterceptorCount();
		local_ref< org::apache::http::HttpRequestInterceptor > getRequestInterceptor(jint);
		void clearRequestInterceptors();
		void addResponseInterceptor(local_ref< org::apache::http::HttpResponseInterceptor >  const&);
		void addInterceptor(local_ref< org::apache::http::HttpResponseInterceptor >  const&);
		void addInterceptor(local_ref< org::apache::http::HttpResponseInterceptor >  const&, jint);
		jint getResponseInterceptorCount();
		local_ref< org::apache::http::HttpResponseInterceptor > getResponseInterceptor(jint);
		void clearResponseInterceptors();
		void setInterceptors(local_ref< java::util::List >  const&);
		void clearInterceptors();
		void process(local_ref< org::apache::http::HttpRequest >  const&, local_ref< org::apache::http::protocol::HttpContext >  const&);
		void process(local_ref< org::apache::http::HttpResponse >  const&, local_ref< org::apache::http::protocol::HttpContext >  const&);
		local_ref< org::apache::http::protocol::BasicHttpProcessor > copy();
		local_ref< java::lang::Object > clone();

	}; //class BasicHttpProcessor

} //namespace protocol
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_HPP_IMPL

namespace j2cpp {



org::apache::http::protocol::BasicHttpProcessor::operator local_ref<java::lang::Cloneable>() const
{
	return local_ref<java::lang::Cloneable>(get_jobject());
}

org::apache::http::protocol::BasicHttpProcessor::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

org::apache::http::protocol::BasicHttpProcessor::operator local_ref<org::apache::http::HttpRequestInterceptor>() const
{
	return local_ref<org::apache::http::HttpRequestInterceptor>(get_jobject());
}

org::apache::http::protocol::BasicHttpProcessor::operator local_ref<org::apache::http::protocol::HttpProcessor>() const
{
	return local_ref<org::apache::http::protocol::HttpProcessor>(get_jobject());
}

org::apache::http::protocol::BasicHttpProcessor::operator local_ref<org::apache::http::protocol::HttpRequestInterceptorList>() const
{
	return local_ref<org::apache::http::protocol::HttpRequestInterceptorList>(get_jobject());
}

org::apache::http::protocol::BasicHttpProcessor::operator local_ref<org::apache::http::protocol::HttpResponseInterceptorList>() const
{
	return local_ref<org::apache::http::protocol::HttpResponseInterceptorList>(get_jobject());
}

org::apache::http::protocol::BasicHttpProcessor::operator local_ref<org::apache::http::HttpResponseInterceptor>() const
{
	return local_ref<org::apache::http::HttpResponseInterceptor>(get_jobject());
}


org::apache::http::protocol::BasicHttpProcessor::BasicHttpProcessor()
: object<org::apache::http::protocol::BasicHttpProcessor>(
	call_new_object<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(0),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(0)
	>()
)
{
}


void org::apache::http::protocol::BasicHttpProcessor::addRequestInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const &a0)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(1),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::protocol::BasicHttpProcessor::addRequestInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const &a0, jint a1)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(2),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0, a1);
}

void org::apache::http::protocol::BasicHttpProcessor::addResponseInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const &a0, jint a1)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(3),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0, a1);
}

void org::apache::http::protocol::BasicHttpProcessor::removeRequestInterceptorByClass(local_ref< java::lang::Class > const &a0)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(4),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::protocol::BasicHttpProcessor::removeResponseInterceptorByClass(local_ref< java::lang::Class > const &a0)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(5),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(5), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::protocol::BasicHttpProcessor::addInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const &a0)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(6),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(6), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::protocol::BasicHttpProcessor::addInterceptor(local_ref< org::apache::http::HttpRequestInterceptor > const &a0, jint a1)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(7),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(7), 
		void
	>(get_jobject(), a0, a1);
}

jint org::apache::http::protocol::BasicHttpProcessor::getRequestInterceptorCount()
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(8),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(8), 
		jint
	>(get_jobject());
}

local_ref< org::apache::http::HttpRequestInterceptor > org::apache::http::protocol::BasicHttpProcessor::getRequestInterceptor(jint a0)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(9),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(9), 
		local_ref< org::apache::http::HttpRequestInterceptor >
	>(get_jobject(), a0);
}

void org::apache::http::protocol::BasicHttpProcessor::clearRequestInterceptors()
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(10),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(10), 
		void
	>(get_jobject());
}

void org::apache::http::protocol::BasicHttpProcessor::addResponseInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const &a0)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(11),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(11), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::protocol::BasicHttpProcessor::addInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const &a0)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(12),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(12), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::protocol::BasicHttpProcessor::addInterceptor(local_ref< org::apache::http::HttpResponseInterceptor > const &a0, jint a1)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(13),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(13), 
		void
	>(get_jobject(), a0, a1);
}

jint org::apache::http::protocol::BasicHttpProcessor::getResponseInterceptorCount()
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(14),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(14), 
		jint
	>(get_jobject());
}

local_ref< org::apache::http::HttpResponseInterceptor > org::apache::http::protocol::BasicHttpProcessor::getResponseInterceptor(jint a0)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(15),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(15), 
		local_ref< org::apache::http::HttpResponseInterceptor >
	>(get_jobject(), a0);
}

void org::apache::http::protocol::BasicHttpProcessor::clearResponseInterceptors()
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(16),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(16), 
		void
	>(get_jobject());
}

void org::apache::http::protocol::BasicHttpProcessor::setInterceptors(local_ref< java::util::List > const &a0)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(17),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(17), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::protocol::BasicHttpProcessor::clearInterceptors()
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(18),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(18), 
		void
	>(get_jobject());
}

void org::apache::http::protocol::BasicHttpProcessor::process(local_ref< org::apache::http::HttpRequest > const &a0, local_ref< org::apache::http::protocol::HttpContext > const &a1)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(19),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(19), 
		void
	>(get_jobject(), a0, a1);
}

void org::apache::http::protocol::BasicHttpProcessor::process(local_ref< org::apache::http::HttpResponse > const &a0, local_ref< org::apache::http::protocol::HttpContext > const &a1)
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(20),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(20), 
		void
	>(get_jobject(), a0, a1);
}


local_ref< org::apache::http::protocol::BasicHttpProcessor > org::apache::http::protocol::BasicHttpProcessor::copy()
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(22),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(22), 
		local_ref< org::apache::http::protocol::BasicHttpProcessor >
	>(get_jobject());
}

local_ref< java::lang::Object > org::apache::http::protocol::BasicHttpProcessor::clone()
{
	return call_method<
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_CLASS_NAME,
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_NAME(23),
		org::apache::http::protocol::BasicHttpProcessor::J2CPP_METHOD_SIGNATURE(23), 
		local_ref< java::lang::Object >
	>(get_jobject());
}



J2CPP_DEFINE_CLASS(org::apache::http::protocol::BasicHttpProcessor,"org/apache/http/protocol/BasicHttpProcessor")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,0,"<init>","()V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,1,"addRequestInterceptor","(Lorg/apache/http/HttpRequestInterceptor;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,2,"addRequestInterceptor","(Lorg/apache/http/HttpRequestInterceptor;I)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,3,"addResponseInterceptor","(Lorg/apache/http/HttpResponseInterceptor;I)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,4,"removeRequestInterceptorByClass","(Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,5,"removeResponseInterceptorByClass","(Ljava/lang/Class;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,6,"addInterceptor","(Lorg/apache/http/HttpRequestInterceptor;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,7,"addInterceptor","(Lorg/apache/http/HttpRequestInterceptor;I)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,8,"getRequestInterceptorCount","()I")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,9,"getRequestInterceptor","(I)Lorg/apache/http/HttpRequestInterceptor;")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,10,"clearRequestInterceptors","()V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,11,"addResponseInterceptor","(Lorg/apache/http/HttpResponseInterceptor;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,12,"addInterceptor","(Lorg/apache/http/HttpResponseInterceptor;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,13,"addInterceptor","(Lorg/apache/http/HttpResponseInterceptor;I)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,14,"getResponseInterceptorCount","()I")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,15,"getResponseInterceptor","(I)Lorg/apache/http/HttpResponseInterceptor;")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,16,"clearResponseInterceptors","()V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,17,"setInterceptors","(Ljava/util/List;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,18,"clearInterceptors","()V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,19,"process","(Lorg/apache/http/HttpRequest;Lorg/apache/http/protocol/HttpContext;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,20,"process","(Lorg/apache/http/HttpResponse;Lorg/apache/http/protocol/HttpContext;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,21,"copyInterceptors","(Lorg/apache/http/protocol/BasicHttpProcessor;)V")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,22,"copy","()Lorg/apache/http/protocol/BasicHttpProcessor;")
J2CPP_DEFINE_METHOD(org::apache::http::protocol::BasicHttpProcessor,23,"clone","()Ljava/lang/Object;")
J2CPP_DEFINE_FIELD(org::apache::http::protocol::BasicHttpProcessor,0,"requestInterceptors","Ljava/util/List;")
J2CPP_DEFINE_FIELD(org::apache::http::protocol::BasicHttpProcessor,1,"responseInterceptors","Ljava/util/List;")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_PROTOCOL_BASICHTTPPROCESSOR_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

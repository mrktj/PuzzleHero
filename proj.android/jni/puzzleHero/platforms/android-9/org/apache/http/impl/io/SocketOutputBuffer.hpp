/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: org.apache.http.impl.io.SocketOutputBuffer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_IO_SOCKETOUTPUTBUFFER_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_IMPL_IO_SOCKETOUTPUTBUFFER_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace java { namespace net { class Socket; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace impl { namespace io { class AbstractSessionOutputBuffer; } } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace io { class SessionOutputBuffer; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace params { class HttpParams; } } } } }


#include <java/lang/Object.hpp>
#include <java/net/Socket.hpp>
#include <org/apache/http/impl/io/AbstractSessionOutputBuffer.hpp>
#include <org/apache/http/io/SessionOutputBuffer.hpp>
#include <org/apache/http/params/HttpParams.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace impl { namespace io {

	class SocketOutputBuffer;
	class SocketOutputBuffer
		: public object<SocketOutputBuffer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)

		explicit SocketOutputBuffer(jobject jobj)
		: object<SocketOutputBuffer>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<org::apache::http::impl::io::AbstractSessionOutputBuffer>() const;
		operator local_ref<org::apache::http::io::SessionOutputBuffer>() const;


		SocketOutputBuffer(local_ref< java::net::Socket > const&, jint, local_ref< org::apache::http::params::HttpParams > const&);
	}; //class SocketOutputBuffer

} //namespace io
} //namespace impl
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_IO_SOCKETOUTPUTBUFFER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_IMPL_IO_SOCKETOUTPUTBUFFER_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_IMPL_IO_SOCKETOUTPUTBUFFER_HPP_IMPL

namespace j2cpp {



org::apache::http::impl::io::SocketOutputBuffer::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

org::apache::http::impl::io::SocketOutputBuffer::operator local_ref<org::apache::http::impl::io::AbstractSessionOutputBuffer>() const
{
	return local_ref<org::apache::http::impl::io::AbstractSessionOutputBuffer>(get_jobject());
}

org::apache::http::impl::io::SocketOutputBuffer::operator local_ref<org::apache::http::io::SessionOutputBuffer>() const
{
	return local_ref<org::apache::http::io::SessionOutputBuffer>(get_jobject());
}


org::apache::http::impl::io::SocketOutputBuffer::SocketOutputBuffer(local_ref< java::net::Socket > const &a0, jint a1, local_ref< org::apache::http::params::HttpParams > const &a2)
: object<org::apache::http::impl::io::SocketOutputBuffer>(
	call_new_object<
		org::apache::http::impl::io::SocketOutputBuffer::J2CPP_CLASS_NAME,
		org::apache::http::impl::io::SocketOutputBuffer::J2CPP_METHOD_NAME(0),
		org::apache::http::impl::io::SocketOutputBuffer::J2CPP_METHOD_SIGNATURE(0)
	>(a0, a1, a2)
)
{
}



J2CPP_DEFINE_CLASS(org::apache::http::impl::io::SocketOutputBuffer,"org/apache/http/impl/io/SocketOutputBuffer")
J2CPP_DEFINE_METHOD(org::apache::http::impl::io::SocketOutputBuffer,0,"<init>","(Ljava/net/Socket;ILorg/apache/http/params/HttpParams;)V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_IMPL_IO_SOCKETOUTPUTBUFFER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

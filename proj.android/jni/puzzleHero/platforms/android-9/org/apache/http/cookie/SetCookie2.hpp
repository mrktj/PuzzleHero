/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: org.apache.http.cookie.SetCookie2
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_COOKIE_SETCOOKIE2_HPP_DECL
#define J2CPP_ORG_APACHE_HTTP_COOKIE_SETCOOKIE2_HPP_DECL


namespace j2cpp { namespace java { namespace lang { class String; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace cookie { class SetCookie; } } } } }
namespace j2cpp { namespace org { namespace apache { namespace http { namespace cookie { class Cookie; } } } } }


#include <java/lang/Object.hpp>
#include <java/lang/String.hpp>
#include <org/apache/http/cookie/Cookie.hpp>
#include <org/apache/http/cookie/SetCookie.hpp>


namespace j2cpp {

namespace org { namespace apache { namespace http { namespace cookie {

	class SetCookie2;
	class SetCookie2
		: public object<SetCookie2>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)

		explicit SetCookie2(jobject jobj)
		: object<SetCookie2>(jobj)
		{
		}

		operator local_ref<java::lang::Object>() const;
		operator local_ref<org::apache::http::cookie::SetCookie>() const;
		operator local_ref<org::apache::http::cookie::Cookie>() const;


		void setCommentURL(local_ref< java::lang::String >  const&);
		void setPorts(local_ref< array<jint,1> >  const&);
		void setDiscard(jboolean);
	}; //class SetCookie2

} //namespace cookie
} //namespace http
} //namespace apache
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_COOKIE_SETCOOKIE2_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_APACHE_HTTP_COOKIE_SETCOOKIE2_HPP_IMPL
#define J2CPP_ORG_APACHE_HTTP_COOKIE_SETCOOKIE2_HPP_IMPL

namespace j2cpp {



org::apache::http::cookie::SetCookie2::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}

org::apache::http::cookie::SetCookie2::operator local_ref<org::apache::http::cookie::SetCookie>() const
{
	return local_ref<org::apache::http::cookie::SetCookie>(get_jobject());
}

org::apache::http::cookie::SetCookie2::operator local_ref<org::apache::http::cookie::Cookie>() const
{
	return local_ref<org::apache::http::cookie::Cookie>(get_jobject());
}

void org::apache::http::cookie::SetCookie2::setCommentURL(local_ref< java::lang::String > const &a0)
{
	return call_method<
		org::apache::http::cookie::SetCookie2::J2CPP_CLASS_NAME,
		org::apache::http::cookie::SetCookie2::J2CPP_METHOD_NAME(0),
		org::apache::http::cookie::SetCookie2::J2CPP_METHOD_SIGNATURE(0), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::cookie::SetCookie2::setPorts(local_ref< array<jint,1> > const &a0)
{
	return call_method<
		org::apache::http::cookie::SetCookie2::J2CPP_CLASS_NAME,
		org::apache::http::cookie::SetCookie2::J2CPP_METHOD_NAME(1),
		org::apache::http::cookie::SetCookie2::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject(), a0);
}

void org::apache::http::cookie::SetCookie2::setDiscard(jboolean a0)
{
	return call_method<
		org::apache::http::cookie::SetCookie2::J2CPP_CLASS_NAME,
		org::apache::http::cookie::SetCookie2::J2CPP_METHOD_NAME(2),
		org::apache::http::cookie::SetCookie2::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject(), a0);
}


J2CPP_DEFINE_CLASS(org::apache::http::cookie::SetCookie2,"org/apache/http/cookie/SetCookie2")
J2CPP_DEFINE_METHOD(org::apache::http::cookie::SetCookie2,0,"setCommentURL","(Ljava/lang/String;)V")
J2CPP_DEFINE_METHOD(org::apache::http::cookie::SetCookie2,1,"setPorts","([I)V")
J2CPP_DEFINE_METHOD(org::apache::http::cookie::SetCookie2,2,"setDiscard","(Z)V")

} //namespace j2cpp

#endif //J2CPP_ORG_APACHE_HTTP_COOKIE_SETCOOKIE2_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION

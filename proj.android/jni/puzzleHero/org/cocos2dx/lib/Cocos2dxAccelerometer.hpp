/*================================================================================
  code generated by: java2cpp
  author: Zoran Angelov, mailto://baldzar@gmail.com
  class: org.cocos2dx.lib.Cocos2dxAccelerometer
================================================================================*/


#ifndef J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_COCOS2DX_LIB_COCOS2DXACCELEROMETER_HPP_DECL
#define J2CPP_ORG_COCOS2DX_LIB_COCOS2DXACCELEROMETER_HPP_DECL


namespace j2cpp { namespace android { namespace hardware { class Sensor; } } }
namespace j2cpp { namespace android { namespace hardware { class SensorEventListener; } } }
namespace j2cpp { namespace android { namespace hardware { class SensorEvent; } } }
namespace j2cpp { namespace android { namespace content { class Context; } } }
namespace j2cpp { namespace java { namespace lang { class Object; } } }


#include <android/content/Context.hpp>
#include <android/hardware/Sensor.hpp>
#include <android/hardware/SensorEvent.hpp>
#include <android/hardware/SensorEventListener.hpp>
#include <java/lang/Object.hpp>


namespace j2cpp {

namespace org { namespace cocos2dx { namespace lib {

	class Cocos2dxAccelerometer;
	class Cocos2dxAccelerometer
		: public object<Cocos2dxAccelerometer>
	{
	public:

		J2CPP_DECLARE_CLASS

		J2CPP_DECLARE_METHOD(0)
		J2CPP_DECLARE_METHOD(1)
		J2CPP_DECLARE_METHOD(2)
		J2CPP_DECLARE_METHOD(3)
		J2CPP_DECLARE_METHOD(4)
		J2CPP_DECLARE_METHOD(5)
		J2CPP_DECLARE_METHOD(6)
		J2CPP_DECLARE_FIELD(0)
		J2CPP_DECLARE_FIELD(1)
		J2CPP_DECLARE_FIELD(2)
		J2CPP_DECLARE_FIELD(3)
		J2CPP_DECLARE_FIELD(4)

		explicit Cocos2dxAccelerometer(jobject jobj)
		: object<Cocos2dxAccelerometer>(jobj)
		{
		}

		operator local_ref<android::hardware::SensorEventListener>() const;
		operator local_ref<java::lang::Object>() const;


		Cocos2dxAccelerometer(local_ref< android::content::Context > const&);
		void enable();
		void disable();
		void onSensorChanged(local_ref< android::hardware::SensorEvent >  const&);
		void onAccuracyChanged(local_ref< android::hardware::Sensor >  const&, jint);

	}; //class Cocos2dxAccelerometer

} //namespace lib
} //namespace cocos2dx
} //namespace org

} //namespace j2cpp

#endif //J2CPP_ORG_COCOS2DX_LIB_COCOS2DXACCELEROMETER_HPP_DECL

#else //J2CPP_INCLUDE_IMPLEMENTATION

#ifndef J2CPP_ORG_COCOS2DX_LIB_COCOS2DXACCELEROMETER_HPP_IMPL
#define J2CPP_ORG_COCOS2DX_LIB_COCOS2DXACCELEROMETER_HPP_IMPL

namespace j2cpp {



org::cocos2dx::lib::Cocos2dxAccelerometer::operator local_ref<android::hardware::SensorEventListener>() const
{
	return local_ref<android::hardware::SensorEventListener>(get_jobject());
}

org::cocos2dx::lib::Cocos2dxAccelerometer::operator local_ref<java::lang::Object>() const
{
	return local_ref<java::lang::Object>(get_jobject());
}


org::cocos2dx::lib::Cocos2dxAccelerometer::Cocos2dxAccelerometer(local_ref< android::content::Context > const &a0)
: object<org::cocos2dx::lib::Cocos2dxAccelerometer>(
	call_new_object<
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_CLASS_NAME,
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_METHOD_NAME(0),
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_METHOD_SIGNATURE(0)
	>(a0)
)
{
}


void org::cocos2dx::lib::Cocos2dxAccelerometer::enable()
{
	return call_method<
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_CLASS_NAME,
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_METHOD_NAME(1),
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_METHOD_SIGNATURE(1), 
		void
	>(get_jobject());
}

void org::cocos2dx::lib::Cocos2dxAccelerometer::disable()
{
	return call_method<
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_CLASS_NAME,
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_METHOD_NAME(2),
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_METHOD_SIGNATURE(2), 
		void
	>(get_jobject());
}

void org::cocos2dx::lib::Cocos2dxAccelerometer::onSensorChanged(local_ref< android::hardware::SensorEvent > const &a0)
{
	return call_method<
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_CLASS_NAME,
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_METHOD_NAME(3),
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_METHOD_SIGNATURE(3), 
		void
	>(get_jobject(), a0);
}

void org::cocos2dx::lib::Cocos2dxAccelerometer::onAccuracyChanged(local_ref< android::hardware::Sensor > const &a0, jint a1)
{
	return call_method<
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_CLASS_NAME,
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_METHOD_NAME(4),
		org::cocos2dx::lib::Cocos2dxAccelerometer::J2CPP_METHOD_SIGNATURE(4), 
		void
	>(get_jobject(), a0, a1);
}





J2CPP_DEFINE_CLASS(org::cocos2dx::lib::Cocos2dxAccelerometer,"org/cocos2dx/lib/Cocos2dxAccelerometer")
J2CPP_DEFINE_METHOD(org::cocos2dx::lib::Cocos2dxAccelerometer,0,"<init>","(Landroid/content/Context;)V")
J2CPP_DEFINE_METHOD(org::cocos2dx::lib::Cocos2dxAccelerometer,1,"enable","()V")
J2CPP_DEFINE_METHOD(org::cocos2dx::lib::Cocos2dxAccelerometer,2,"disable","()V")
J2CPP_DEFINE_METHOD(org::cocos2dx::lib::Cocos2dxAccelerometer,3,"onSensorChanged","(Landroid/hardware/SensorEvent;)V")
J2CPP_DEFINE_METHOD(org::cocos2dx::lib::Cocos2dxAccelerometer,4,"onAccuracyChanged","(Landroid/hardware/Sensor;I)V")
J2CPP_DEFINE_METHOD(org::cocos2dx::lib::Cocos2dxAccelerometer,5,"onSensorChanged","(FFFJ)V")
J2CPP_DEFINE_METHOD(org::cocos2dx::lib::Cocos2dxAccelerometer,6,"<clinit>","()V")
J2CPP_DEFINE_FIELD(org::cocos2dx::lib::Cocos2dxAccelerometer,0,"TAG","Ljava/lang/String;")
J2CPP_DEFINE_FIELD(org::cocos2dx::lib::Cocos2dxAccelerometer,1,"mContext","Landroid/content/Context;")
J2CPP_DEFINE_FIELD(org::cocos2dx::lib::Cocos2dxAccelerometer,2,"mSensorManager","Landroid/hardware/SensorManager;")
J2CPP_DEFINE_FIELD(org::cocos2dx::lib::Cocos2dxAccelerometer,3,"mAccelerometer","Landroid/hardware/Sensor;")
J2CPP_DEFINE_FIELD(org::cocos2dx::lib::Cocos2dxAccelerometer,4,"mNaturalOrientation","I")

} //namespace j2cpp

#endif //J2CPP_ORG_COCOS2DX_LIB_COCOS2DXACCELEROMETER_HPP_IMPL

#endif //J2CPP_INCLUDE_IMPLEMENTATION
